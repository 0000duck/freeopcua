#!/usr/bin/env python

schema_files = dict(
  object_ids = 'NodeIds.csv',
  status_codes = 'StatusCode.csv',
  status_codes_tostring = 'StatusCode.csv',
)

import csv

def usage(msg=None):
  if msg: print ('Error {0}'.format(msg))
  print ('''Usage: {0} [cxx|py] [object_ids,status_codes,status_codes_tostring]'''.format(sys.argv[0]))
  raise SystemExit


def cxx_object_ids(fname):
  print('''//
// DO NOT EDIT THIS FILE!
// It is automatically generated from opcfoundation.org schemas.
//

#pragma once

#include <stdint.h>

namespace OpcUa
{
  enum class ObjectID : uint32_t
  {
    Null = 0,''')

  with open(fname) as fd:
    for e in csv.reader(fd, delimiter=','):
      print ('    {0} = {1},'.format(*e[:2]))

  print ('''  };
}
''')

def cxx_status_codes(fname):
  print('''//
// DO NOT EDIT THIS FILE!
// It is automatically generated from opcfoundation.org schemas.
//

#pragma once

#include <stdint.h>

namespace OpcUa
{
  enum class StatusCode : uint32_t
  {
    Good = 0,''')

  with open(fname) as fd:
    for e in csv.reader(fd, delimiter=','):
      print ('    {0} = {1},'.format(*e[:2]))

  print ('''  };

  //raise appropriate exception if StatusCode is not Good
  void CheckStatusCode(StatusCode code);

}
''')

def cxx_status_codes_tostring(fname):
  print('''//
// DO NOT EDIT THIS FILE!
// It is automatically generated from opcfoundation.org schemas.
//

#include <string>
#include <sstream>
#include <iomanip>

#include "opc/ua/protocol/status_codes.h"

namespace OpcUa
{

std::string ToString(const StatusCode& code)
{
  if (code == StatusCode::Good)
  {
    return std::string();
  }

  std::stringstream stream;
  switch (code)
  {''')

  with open(fname) as fd:
    for e in csv.reader(fd, delimiter=','):
      print ('''    case StatusCode::{0}:
      stream << "{1}";
      break;'''.format(e[0],e[2]))

  print ('''    default:
      stream << "Unknown StatusCode?";
      break;
  }

  stream << " (0x" << std::setfill('0') << std::setw(8) << std::hex << (unsigned)code << ")";

  return stream.str();
}

} // namespace OpcUa

''')


def py_object_ids(fname):
  print('''//
// DO NOT EDIT THIS FILE!
// It is automatically generated from opcfoundation.org schemas.
//

#include <boost/python.hpp>

#include "opc/ua/protocol/object_ids.h"

using namespace boost::python;
using namespace OpcUa;

void py_opcua_enums_ObjectID()
{
  enum_<ObjectID>("ObjectID")
#define _value(X) value(#X, ObjectID:: X)''')

  with open(fname) as fd:
    for e in csv.reader(fd, delimiter=','):
      print ('  ._value({0})'.format(e[0]))

  print ('''#undef _value
  ;
}
''')

def py_status_codes(fname):
  print('''//
// DO NOT EDIT THIS FILE!
// It is automatically generated from opcfoundation.org schemas.
//

#include <boost/python.hpp>

#include "opc/ua/protocol/status_codes.h"

using namespace boost::python;
using namespace OpcUa;

void py_opcua_enums_StatusCode()
{
  enum_<StatusCode>("StatusCode")
#define _value(X) value(#X, StatusCode:: X)''')

  with open(fname) as fd:
    for e in csv.reader(fd, delimiter=','):
      print ('  ._value({0})'.format(e[0]))

  print ('''#undef _value
  ;
}
''')

def py_status_codes_tostring(fname):
  raise Exception('py_status_codes_tostring not implemented')

if __name__ == '__main__':
  import sys
  import os
  
  if len(sys.argv) != 3: usage()
  target, what = sys.argv[1:]
  if target not in ('cxx','py',): usage()
  if what not in ('object_ids','status_codes','status_codes_tostring'): usage()
  call='{0}_{1}'.format(target,what)
  try:
    relpath = os.path.dirname(__file__)
    locals()[call](os.path.join(relpath,schema_files[what]))
  except Exception as e:
    usage(e)

