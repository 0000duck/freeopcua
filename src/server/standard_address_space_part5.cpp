
// DO NOT EDIT THIS FILE!
// It is automatically generated from opcfoundation.org schemas.
//

#include "standard_address_space_parts.h"
#include <opc/ua/protocol/string_utils.h>
#include <opc/common/addons_core/addon.h>
#include <opc/ua/protocol/strings.h>
#include <opc/ua/protocol/variable_access_level.h>
#include <opc/ua/services/node_management.h>

#include <algorithm>
#include <iostream>
#include <map>

namespace OpcUa
{
  void CreateAddressSpacePart5(OpcUa::NodeManagementServices& registry)
  {
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=51");
        node.BrowseName = ToQualifiedName("FromState");
        node.Class = NodeClass::ReferenceType;
        node.ParentNodeId = ToNodeId("i=32");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ReferenceTypeAttributes attrs;
        attrs.Description = LocalizedText("The type for a reference to the state before a transition.");
        attrs.DisplayName = LocalizedText("FromState");
        attrs.InverseName = LocalizedText("ToTransition");
        attrs.IsAbstract = false;
        attrs.Symmetric = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=52");
        node.BrowseName = ToQualifiedName("ToState");
        node.Class = NodeClass::ReferenceType;
        node.ParentNodeId = ToNodeId("i=32");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ReferenceTypeAttributes attrs;
        attrs.Description = LocalizedText("The type for a reference to the state after a transition.");
        attrs.DisplayName = LocalizedText("ToState");
        attrs.InverseName = LocalizedText("FromTransition");
        attrs.IsAbstract = false;
        attrs.Symmetric = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=53");
        node.BrowseName = ToQualifiedName("HasCause");
        node.Class = NodeClass::ReferenceType;
        node.ParentNodeId = ToNodeId("i=32");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ReferenceTypeAttributes attrs;
        attrs.Description = LocalizedText("The type for a reference to a method that can cause a transition to occur.");
        attrs.DisplayName = LocalizedText("HasCause");
        attrs.InverseName = LocalizedText("MayBeCausedBy");
        attrs.IsAbstract = false;
        attrs.Symmetric = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=54");
        node.BrowseName = ToQualifiedName("HasEffect");
        node.Class = NodeClass::ReferenceType;
        node.ParentNodeId = ToNodeId("i=32");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ReferenceTypeAttributes attrs;
        attrs.Description = LocalizedText("The type for a reference to an event that may be raised when a transition occurs.");
        attrs.DisplayName = LocalizedText("HasEffect");
        attrs.InverseName = LocalizedText("MayBeEffectedBy");
        attrs.IsAbstract = false;
        attrs.Symmetric = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=117");
        node.BrowseName = ToQualifiedName("HasSubStateMachine");
        node.Class = NodeClass::ReferenceType;
        node.ParentNodeId = ToNodeId("i=32");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ReferenceTypeAttributes attrs;
        attrs.Description = LocalizedText("The type for a reference to a substate for a state.");
        attrs.DisplayName = LocalizedText("HasSubStateMachine");
        attrs.InverseName = LocalizedText("SubStateMachineOf");
        attrs.IsAbstract = false;
        attrs.Symmetric = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=58");
        node.BrowseName = ToQualifiedName("BaseObjectType");
        node.Class = NodeClass::ObjectType;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("The base type for all object nodes.");
        attrs.DisplayName = LocalizedText("BaseObjectType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=61");
        node.BrowseName = ToQualifiedName("FolderType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("The type for objects that organize other nodes.");
        attrs.DisplayName = LocalizedText("FolderType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=62");
        node.BrowseName = ToQualifiedName("BaseVariableType");
        node.Class = NodeClass::VariableType;
        VariableTypeAttributes attrs;
        attrs.Description = LocalizedText("The abstract base type for all variable nodes.");
        attrs.DisplayName = LocalizedText("BaseVariableType");
        attrs.Type = ObjectId::String;
        attrs.Rank = -2;
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=63");
        node.BrowseName = ToQualifiedName("BaseDataVariableType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=62");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.Description = LocalizedText("The type for variable that represents a process value.");
        attrs.DisplayName = LocalizedText("BaseDataVariableType");
        attrs.Type = ObjectId::String;
        attrs.Rank = -2;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=68");
        node.BrowseName = ToQualifiedName("PropertyType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=62");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.Description = LocalizedText("The type for variable that represents a property of another node.");
        attrs.DisplayName = LocalizedText("PropertyType");
        attrs.Type = ObjectId::String;
        attrs.Rank = -2;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=69");
        node.BrowseName = ToQualifiedName("DataTypeDescriptionType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.Description = LocalizedText("The type for variable that represents the description of a data type encoding.");
        attrs.DisplayName = LocalizedText("DataTypeDescriptionType");
        attrs.Type = ObjectId::String;
        attrs.Rank = -2;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=69");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=104");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=69");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=105");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=104");
        node.BrowseName = ToQualifiedName("DataTypeVersion");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=69");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The version number for the data type description.");
        attrs.DisplayName = LocalizedText("DataTypeVersion");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=104");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=105");
        node.BrowseName = ToQualifiedName("DictionaryFragment");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=69");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A fragment of a data type dictionary that defines the data type.");
        attrs.DisplayName = LocalizedText("DictionaryFragment");
        attrs.Type = ObjectId::ByteString;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=105");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=72");
        node.BrowseName = ToQualifiedName("DataTypeDictionaryType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.Description = LocalizedText("The type for variable that represents the collection of data type decriptions.");
        attrs.DisplayName = LocalizedText("DataTypeDictionaryType");
        attrs.Type = ObjectId::ByteString;
        attrs.Rank = -2;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=72");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=106");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=72");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=107");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=106");
        node.BrowseName = ToQualifiedName("DataTypeVersion");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=72");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The version number for the data type dictionary.");
        attrs.DisplayName = LocalizedText("DataTypeVersion");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=106");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=107");
        node.BrowseName = ToQualifiedName("NamespaceUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=72");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A URI that uniquely identifies the dictionary.");
        attrs.DisplayName = LocalizedText("NamespaceUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=107");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=75");
        node.BrowseName = ToQualifiedName("DataTypeSystemType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("DataTypeSystemType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=76");
        node.BrowseName = ToQualifiedName("DataTypeEncodingType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("DataTypeEncodingType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=77");
        node.BrowseName = ToQualifiedName("ModellingRuleType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("The type for an object that describes how an instance declaration is used when a type is instantiated.");
        attrs.DisplayName = LocalizedText("ModellingRuleType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=77");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=111");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=111");
        node.BrowseName = ToQualifiedName("NamingRule");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=77");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Specified the significances of the BrowseName when a type is instantiated.");
        attrs.DisplayName = LocalizedText("NamingRule");
        attrs.Type = ToNodeId("i=120");
        attrs.Value = (int32_t) 1;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=111");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=78");
        node.BrowseName = ToQualifiedName("Mandatory");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeId("i=77");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Specifies that an instance with the attributes and references of the instance declaration must appear when a type is instantiated.");
        attrs.DisplayName = LocalizedText("Mandatory");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=78");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=112");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=112");
        node.BrowseName = ToQualifiedName("NamingRule");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=78");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Specified the significances of the BrowseName when a type is instantiated.");
        attrs.DisplayName = LocalizedText("NamingRule");
        attrs.Type = ToNodeId("i=120");
        attrs.Value = (int32_t) 1;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=80");
        node.BrowseName = ToQualifiedName("Optional");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeId("i=77");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Specifies that an instance with the attributes and references of the instance declaration may appear when a type is instantiated.");
        attrs.DisplayName = LocalizedText("Optional");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=80");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=113");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=113");
        node.BrowseName = ToQualifiedName("NamingRule");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=80");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Specified the significances of the BrowseName when a type is instantiated.");
        attrs.DisplayName = LocalizedText("NamingRule");
        attrs.Type = ToNodeId("i=120");
        attrs.Value = (int32_t) 2;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=83");
        node.BrowseName = ToQualifiedName("ExposesItsArray");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeId("i=77");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Specifies that an instance appears for each element of the containing array variable.");
        attrs.DisplayName = LocalizedText("ExposesItsArray");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=83");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=114");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=114");
        node.BrowseName = ToQualifiedName("NamingRule");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=83");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Specified the significances of the BrowseName when a type is instantiated.");
        attrs.DisplayName = LocalizedText("NamingRule");
        attrs.Type = ToNodeId("i=120");
        attrs.Value = (int32_t) 3;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=79");
        node.BrowseName = ToQualifiedName("MandatoryShared");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeId("i=77");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Specifies that a reference to a shared instance must appear in when a type is instantiated.");
        attrs.DisplayName = LocalizedText("MandatoryShared");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=79");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=116");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=116");
        node.BrowseName = ToQualifiedName("NamingRule");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=79");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Specified the significances of the BrowseName when a type is instantiated.");
        attrs.DisplayName = LocalizedText("NamingRule");
        attrs.Type = ToNodeId("i=120");
        attrs.Value = (int32_t) 1;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11508");
        node.BrowseName = ToQualifiedName("OptionalPlaceholder");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeId("i=77");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Specifies that zero or more instances with the attributes and references of the instance declaration may appear when a type is instantiated.");
        attrs.DisplayName = LocalizedText("OptionalPlaceholder");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11508");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11509");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11509");
        node.BrowseName = ToQualifiedName("NamingRule");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11508");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Specified the significances of the BrowseName when a type is instantiated.");
        attrs.DisplayName = LocalizedText("NamingRule");
        attrs.Type = ToNodeId("i=120");
        attrs.Value = (int32_t) 2;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11510");
        node.BrowseName = ToQualifiedName("MandatoryPlaceholder");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeId("i=77");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Specifies that one or more instances with the attributes and references of the instance declaration must appear when a type is instantiated.");
        attrs.DisplayName = LocalizedText("MandatoryPlaceholder");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11510");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11511");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11511");
        node.BrowseName = ToQualifiedName("NamingRule");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11510");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Specified the significances of the BrowseName when a type is instantiated.");
        attrs.DisplayName = LocalizedText("NamingRule");
        attrs.Type = ToNodeId("i=120");
        attrs.Value = (int32_t) 1;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=84");
        node.BrowseName = ToQualifiedName("Root");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("The root of the server address space.");
        attrs.DisplayName = LocalizedText("Root");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=85");
        node.BrowseName = ToQualifiedName("Objects");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=84");
        node.ReferenceTypeId = ReferenceId::Organizes;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("The browse entry point when looking for objects in the server address space.");
        attrs.DisplayName = LocalizedText("Objects");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=86");
        node.BrowseName = ToQualifiedName("Types");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=84");
        node.ReferenceTypeId = ReferenceId::Organizes;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("The browse entry point when looking for types in the server address space.");
        attrs.DisplayName = LocalizedText("Types");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=87");
        node.BrowseName = ToQualifiedName("Views");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=84");
        node.ReferenceTypeId = ReferenceId::Organizes;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("The browse entry point when looking for views in the server address space.");
        attrs.DisplayName = LocalizedText("Views");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=88");
        node.BrowseName = ToQualifiedName("ObjectTypes");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=86");
        node.ReferenceTypeId = ReferenceId::Organizes;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("The browse entry point when looking for object types in the server address space.");
        attrs.DisplayName = LocalizedText("ObjectTypes");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::Organizes;
        ref.SourceNodeId = ToNodeId("i=88");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=58");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=89");
        node.BrowseName = ToQualifiedName("VariableTypes");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=86");
        node.ReferenceTypeId = ReferenceId::Organizes;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("The browse entry point when looking for variable types in the server address space.");
        attrs.DisplayName = LocalizedText("VariableTypes");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::Organizes;
        ref.SourceNodeId = ToNodeId("i=89");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=62");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=90");
        node.BrowseName = ToQualifiedName("DataTypes");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=86");
        node.ReferenceTypeId = ReferenceId::Organizes;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("The browse entry point when looking for data types in the server address space.");
        attrs.DisplayName = LocalizedText("DataTypes");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::Organizes;
        ref.SourceNodeId = ToNodeId("i=90");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=24");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=91");
        node.BrowseName = ToQualifiedName("ReferenceTypes");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=86");
        node.ReferenceTypeId = ReferenceId::Organizes;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("The browse entry point when looking for reference types in the server address space.");
        attrs.DisplayName = LocalizedText("ReferenceTypes");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::Organizes;
        ref.SourceNodeId = ToNodeId("i=91");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=31");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=92");
        node.BrowseName = ToQualifiedName("XML Schema");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=90");
        node.ReferenceTypeId = ReferenceId::Organizes;
        node.TypeDefinition = ToNodeId("i=75");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A type system which uses XML schema to describe the encoding of data types.");
        attrs.DisplayName = LocalizedText("XML Schema");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=93");
        node.BrowseName = ToQualifiedName("OPC Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=90");
        node.ReferenceTypeId = ReferenceId::Organizes;
        node.TypeDefinition = ToNodeId("i=75");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A type system which uses OPC binary schema to describe the encoding of data types.");
        attrs.DisplayName = LocalizedText("OPC Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2004");
        node.BrowseName = ToQualifiedName("ServerType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("Specifies the current status and capabilities of the server.");
        attrs.DisplayName = LocalizedText("ServerType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2004");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2005");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2004");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2006");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2004");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2007");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2004");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2008");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2004");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2742");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2004");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2009");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2004");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2010");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2004");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2011");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2004");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2012");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2004");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11527");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2004");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11489");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2005");
        node.BrowseName = ToQualifiedName("ServerArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2004");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The list of server URIs used by the server.");
        attrs.DisplayName = LocalizedText("ServerArray");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2005");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2006");
        node.BrowseName = ToQualifiedName("NamespaceArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2004");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The list of namespace URIs used by the server.");
        attrs.DisplayName = LocalizedText("NamespaceArray");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2006");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2007");
        node.BrowseName = ToQualifiedName("ServerStatus");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2004");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2138");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The current status of the server.");
        attrs.DisplayName = LocalizedText("ServerStatus");
        attrs.Type = ToNodeId("i=862");
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2007");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3074");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2007");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3075");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2007");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3076");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2007");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3077");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2007");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3084");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2007");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3085");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2007");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3074");
        node.BrowseName = ToQualifiedName("StartTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2007");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("StartTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3074");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3075");
        node.BrowseName = ToQualifiedName("CurrentTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2007");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3075");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3076");
        node.BrowseName = ToQualifiedName("State");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2007");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("State");
        attrs.Type = ToNodeId("i=852");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3076");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3077");
        node.BrowseName = ToQualifiedName("BuildInfo");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2007");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=3051");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildInfo");
        attrs.Type = ToNodeId("i=338");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3077");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3078");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3077");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3079");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3077");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3080");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3077");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3081");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3077");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3082");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3077");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3083");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3077");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3078");
        node.BrowseName = ToQualifiedName("ProductUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3077");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProductUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3078");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3079");
        node.BrowseName = ToQualifiedName("ManufacturerName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3077");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ManufacturerName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3079");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3080");
        node.BrowseName = ToQualifiedName("ProductName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3077");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProductName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3080");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3081");
        node.BrowseName = ToQualifiedName("SoftwareVersion");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3077");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SoftwareVersion");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3081");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3082");
        node.BrowseName = ToQualifiedName("BuildNumber");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3077");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildNumber");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3082");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3083");
        node.BrowseName = ToQualifiedName("BuildDate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3077");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildDate");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3083");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3084");
        node.BrowseName = ToQualifiedName("SecondsTillShutdown");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2007");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecondsTillShutdown");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3084");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3085");
        node.BrowseName = ToQualifiedName("ShutdownReason");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2007");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ShutdownReason");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3085");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2008");
        node.BrowseName = ToQualifiedName("ServiceLevel");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2004");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A value indicating the level of service the server can provide. 255 indicates the best.");
        attrs.DisplayName = LocalizedText("ServiceLevel");
        attrs.Type = ObjectId::Byte;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2008");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2742");
        node.BrowseName = ToQualifiedName("Auditing");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2004");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A flag indicating whether the server is currently generating audit events.");
        attrs.DisplayName = LocalizedText("Auditing");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2742");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2009");
        node.BrowseName = ToQualifiedName("ServerCapabilities");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2004");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2013");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Describes capabilities supported by the server.");
        attrs.DisplayName = LocalizedText("ServerCapabilities");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2009");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3086");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2009");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3087");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2009");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3088");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2009");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3089");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2009");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3090");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2009");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3091");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2009");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3092");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2009");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3093");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2009");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3094");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2009");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3086");
        node.BrowseName = ToQualifiedName("ServerProfileArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2009");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of profiles supported by the server.");
        attrs.DisplayName = LocalizedText("ServerProfileArray");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3086");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3087");
        node.BrowseName = ToQualifiedName("LocaleIdArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2009");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of locales supported by the server.");
        attrs.DisplayName = LocalizedText("LocaleIdArray");
        attrs.Type = ToNodeId("i=295");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3087");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3088");
        node.BrowseName = ToQualifiedName("MinSupportedSampleRate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2009");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The minimum sampling interval supported by the server.");
        attrs.DisplayName = LocalizedText("MinSupportedSampleRate");
        attrs.Type = ToNodeId("i=290");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3088");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3089");
        node.BrowseName = ToQualifiedName("MaxBrowseContinuationPoints");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2009");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of continuation points for Browse operations per session.");
        attrs.DisplayName = LocalizedText("MaxBrowseContinuationPoints");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3089");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3090");
        node.BrowseName = ToQualifiedName("MaxQueryContinuationPoints");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2009");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of continuation points for Query operations per session.");
        attrs.DisplayName = LocalizedText("MaxQueryContinuationPoints");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3090");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3091");
        node.BrowseName = ToQualifiedName("MaxHistoryContinuationPoints");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2009");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of continuation points for ReadHistory operations per session.");
        attrs.DisplayName = LocalizedText("MaxHistoryContinuationPoints");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3091");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3092");
        node.BrowseName = ToQualifiedName("SoftwareCertificates");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2009");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The software certificates owned by the server.");
        attrs.DisplayName = LocalizedText("SoftwareCertificates");
        attrs.Type = ToNodeId("i=344");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3092");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3093");
        node.BrowseName = ToQualifiedName("ModellingRules");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2009");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A folder for the modelling rules supported by the server.");
        attrs.DisplayName = LocalizedText("ModellingRules");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3093");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3094");
        node.BrowseName = ToQualifiedName("AggregateFunctions");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2009");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A folder for the real time aggregates supported by the server.");
        attrs.DisplayName = LocalizedText("AggregateFunctions");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3094");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2010");
        node.BrowseName = ToQualifiedName("ServerDiagnostics");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2004");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2020");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Reports diagnostics about the server.");
        attrs.DisplayName = LocalizedText("ServerDiagnostics");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2010");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3095");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2010");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3110");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2010");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3111");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2010");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3114");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2010");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3095");
        node.BrowseName = ToQualifiedName("ServerDiagnosticsSummary");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2010");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2150");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A summary of server level diagnostics.");
        attrs.DisplayName = LocalizedText("ServerDiagnosticsSummary");
        attrs.Type = ToNodeId("i=859");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3096");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3097");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3098");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3099");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3100");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3101");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3102");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3104");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3105");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3106");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3107");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3108");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3096");
        node.BrowseName = ToQualifiedName("ServerViewCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3095");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerViewCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3096");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3097");
        node.BrowseName = ToQualifiedName("CurrentSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3095");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3097");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3098");
        node.BrowseName = ToQualifiedName("CumulatedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3095");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CumulatedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3099");
        node.BrowseName = ToQualifiedName("SecurityRejectedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3095");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityRejectedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3099");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3100");
        node.BrowseName = ToQualifiedName("RejectedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3095");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RejectedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3100");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3101");
        node.BrowseName = ToQualifiedName("SessionTimeoutCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3095");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionTimeoutCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3101");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3102");
        node.BrowseName = ToQualifiedName("SessionAbortCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3095");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionAbortCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3102");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3104");
        node.BrowseName = ToQualifiedName("PublishingIntervalCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3095");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishingIntervalCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3104");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3105");
        node.BrowseName = ToQualifiedName("CurrentSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3095");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSubscriptionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3105");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3106");
        node.BrowseName = ToQualifiedName("CumulatedSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3095");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CumulatedSubscriptionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3106");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3107");
        node.BrowseName = ToQualifiedName("SecurityRejectedRequestsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3095");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityRejectedRequestsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3107");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3108");
        node.BrowseName = ToQualifiedName("RejectedRequestsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3095");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RejectedRequestsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3108");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3110");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2010");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2171");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of diagnostics for each active subscription.");
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsArray");
        attrs.Type = ToNodeId("i=874");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3110");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3111");
        node.BrowseName = ToQualifiedName("SessionsDiagnosticsSummary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2010");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2026");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A summary of session level diagnostics.");
        attrs.DisplayName = LocalizedText("SessionsDiagnosticsSummary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3111");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3112");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3111");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3113");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3111");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3112");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3111");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2196");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of diagnostics for each active session.");
        attrs.DisplayName = LocalizedText("SessionDiagnosticsArray");
        attrs.Type = ToNodeId("i=865");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3112");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3113");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3111");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2243");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of security related diagnostics for each active session.");
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnosticsArray");
        attrs.Type = ToNodeId("i=868");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3113");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3114");
        node.BrowseName = ToQualifiedName("EnabledFlag");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2010");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("If TRUE the diagnostics collection is enabled.");
        attrs.DisplayName = LocalizedText("EnabledFlag");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        attrs.AccessLevel = (VariableAccessLevel) 3;
        attrs.UserAccessLevel = (VariableAccessLevel) 3;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3114");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2011");
        node.BrowseName = ToQualifiedName("VendorServerInfo");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2004");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2033");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Server information provided by the vendor.");
        attrs.DisplayName = LocalizedText("VendorServerInfo");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2011");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2012");
        node.BrowseName = ToQualifiedName("ServerRedundancy");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2004");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2034");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Describes the redundancy capabilities of the server.");
        attrs.DisplayName = LocalizedText("ServerRedundancy");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2012");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3115");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2012");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3115");
        node.BrowseName = ToQualifiedName("RedundancySupport");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2012");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Indicates what style of redundancy is supported by the server.");
        attrs.DisplayName = LocalizedText("RedundancySupport");
        attrs.Type = ToNodeId("i=851");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3115");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11527");
        node.BrowseName = ToQualifiedName("Namespaces");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2004");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=11645");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Describes the namespaces supported by the server.");
        attrs.DisplayName = LocalizedText("Namespaces");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11527");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11490");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11489");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11490");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11491");
        node.BrowseName = ToQualifiedName("OutputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11489");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OutputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11491");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2013");
        node.BrowseName = ToQualifiedName("ServerCapabilitiesType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("Describes the capabilities supported by the server.");
        attrs.DisplayName = LocalizedText("ServerCapabilitiesType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2014");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2016");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2017");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2732");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2733");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2734");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3049");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11549");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11550");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11551");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2019");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2754");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2013");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11562");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2014");
        node.BrowseName = ToQualifiedName("ServerProfileArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of profiles supported by the server.");
        attrs.DisplayName = LocalizedText("ServerProfileArray");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2014");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2016");
        node.BrowseName = ToQualifiedName("LocaleIdArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of locales supported by the server.");
        attrs.DisplayName = LocalizedText("LocaleIdArray");
        attrs.Type = ToNodeId("i=295");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2016");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2017");
        node.BrowseName = ToQualifiedName("MinSupportedSampleRate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The minimum sampling interval supported by the server.");
        attrs.DisplayName = LocalizedText("MinSupportedSampleRate");
        attrs.Type = ToNodeId("i=290");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2017");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2732");
        node.BrowseName = ToQualifiedName("MaxBrowseContinuationPoints");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of continuation points for Browse operations per session.");
        attrs.DisplayName = LocalizedText("MaxBrowseContinuationPoints");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2732");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2733");
        node.BrowseName = ToQualifiedName("MaxQueryContinuationPoints");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of continuation points for Query operations per session.");
        attrs.DisplayName = LocalizedText("MaxQueryContinuationPoints");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2733");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2734");
        node.BrowseName = ToQualifiedName("MaxHistoryContinuationPoints");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of continuation points for ReadHistory operations per session.");
        attrs.DisplayName = LocalizedText("MaxHistoryContinuationPoints");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2734");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3049");
        node.BrowseName = ToQualifiedName("SoftwareCertificates");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The software certificates owned by the server.");
        attrs.DisplayName = LocalizedText("SoftwareCertificates");
        attrs.Type = ToNodeId("i=344");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3049");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11549");
        node.BrowseName = ToQualifiedName("MaxArrayLength");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum length for an array value supported by the server.");
        attrs.DisplayName = LocalizedText("MaxArrayLength");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11549");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11550");
        node.BrowseName = ToQualifiedName("MaxStringLength");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum length for a string value supported by the server.");
        attrs.DisplayName = LocalizedText("MaxStringLength");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11550");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11551");
        node.BrowseName = ToQualifiedName("OperationLimits");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=11564");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Defines the limits supported by the server for different operations.");
        attrs.DisplayName = LocalizedText("OperationLimits");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11551");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2019");
        node.BrowseName = ToQualifiedName("ModellingRules");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A folder for the modelling rules supported by the server.");
        attrs.DisplayName = LocalizedText("ModellingRules");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2019");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2754");
        node.BrowseName = ToQualifiedName("AggregateFunctions");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A folder for the real time aggregates supported by the server.");
        attrs.DisplayName = LocalizedText("AggregateFunctions");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2754");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11562");
        node.BrowseName = ToQualifiedName("<VendorCapability>");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2013");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2137");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("<VendorCapability>");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11562");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11508");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2020");
        node.BrowseName = ToQualifiedName("ServerDiagnosticsType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("The diagnostics information for a server.");
        attrs.DisplayName = LocalizedText("ServerDiagnosticsType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2020");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2021");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2020");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2022");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2020");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2023");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2020");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2744");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2020");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2025");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2021");
        node.BrowseName = ToQualifiedName("ServerDiagnosticsSummary");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2020");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2150");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A summary of server level diagnostics.");
        attrs.DisplayName = LocalizedText("ServerDiagnosticsSummary");
        attrs.Type = ToNodeId("i=859");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3116");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3117");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3118");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3119");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3120");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3121");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3122");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3124");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3125");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3126");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3127");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3128");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2021");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3116");
        node.BrowseName = ToQualifiedName("ServerViewCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2021");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerViewCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3116");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3117");
        node.BrowseName = ToQualifiedName("CurrentSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2021");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3117");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3118");
        node.BrowseName = ToQualifiedName("CumulatedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2021");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CumulatedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3118");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3119");
        node.BrowseName = ToQualifiedName("SecurityRejectedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2021");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityRejectedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3119");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3120");
        node.BrowseName = ToQualifiedName("RejectedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2021");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RejectedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3120");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3121");
        node.BrowseName = ToQualifiedName("SessionTimeoutCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2021");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionTimeoutCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3121");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3122");
        node.BrowseName = ToQualifiedName("SessionAbortCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2021");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionAbortCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3122");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3124");
        node.BrowseName = ToQualifiedName("PublishingIntervalCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2021");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishingIntervalCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3124");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3125");
        node.BrowseName = ToQualifiedName("CurrentSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2021");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSubscriptionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3125");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3126");
        node.BrowseName = ToQualifiedName("CumulatedSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2021");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CumulatedSubscriptionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3126");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3127");
        node.BrowseName = ToQualifiedName("SecurityRejectedRequestsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2021");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityRejectedRequestsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3127");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3128");
        node.BrowseName = ToQualifiedName("RejectedRequestsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2021");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RejectedRequestsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3128");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2022");
        node.BrowseName = ToQualifiedName("SamplingIntervalDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2020");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2164");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of diagnostics for each sampling interval supported by the server.");
        attrs.DisplayName = LocalizedText("SamplingIntervalDiagnosticsArray");
        attrs.Type = ToNodeId("i=856");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2022");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2023");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2020");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2171");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of diagnostics for each active subscription.");
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsArray");
        attrs.Type = ToNodeId("i=874");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2023");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2744");
        node.BrowseName = ToQualifiedName("SessionsDiagnosticsSummary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2020");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2026");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A summary of session level diagnostics.");
        attrs.DisplayName = LocalizedText("SessionsDiagnosticsSummary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2744");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3129");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2744");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3130");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2744");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3129");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2744");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2196");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of diagnostics for each active session.");
        attrs.DisplayName = LocalizedText("SessionDiagnosticsArray");
        attrs.Type = ToNodeId("i=865");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3129");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3130");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2744");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2243");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of security related diagnostics for each active session.");
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnosticsArray");
        attrs.Type = ToNodeId("i=868");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3130");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2025");
        node.BrowseName = ToQualifiedName("EnabledFlag");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2020");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("If TRUE the diagnostics collection is enabled.");
        attrs.DisplayName = LocalizedText("EnabledFlag");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        attrs.AccessLevel = (VariableAccessLevel) 3;
        attrs.UserAccessLevel = (VariableAccessLevel) 3;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2025");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2026");
        node.BrowseName = ToQualifiedName("SessionsDiagnosticsSummaryType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("Provides a summary of session level diagnostics.");
        attrs.DisplayName = LocalizedText("SessionsDiagnosticsSummaryType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2026");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2027");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2026");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2028");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2026");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12097");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2027");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2026");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2196");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of diagnostics for each active session.");
        attrs.DisplayName = LocalizedText("SessionDiagnosticsArray");
        attrs.Type = ToNodeId("i=865");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2027");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2028");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2026");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2243");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of security related diagnostics for each active session.");
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnosticsArray");
        attrs.Type = ToNodeId("i=868");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2028");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12097");
        node.BrowseName = ToQualifiedName("<SessionPlaceholder>");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2026");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2029");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("<SessionPlaceholder>");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12097");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12098");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12097");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12142");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12097");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12152");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12097");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11508");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12098");
        node.BrowseName = ToQualifiedName("SessionDiagnostics");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12097");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2197");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Diagnostics information for an active session.");
        attrs.DisplayName = LocalizedText("SessionDiagnostics");
        attrs.Type = ToNodeId("i=865");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12099");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12100");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12101");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12102");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12103");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12104");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12105");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12106");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12107");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12108");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12109");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12110");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12111");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12112");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12113");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12114");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12115");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12116");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12117");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12118");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12119");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12120");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12121");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12122");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12123");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12124");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12125");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12126");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12127");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12128");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12129");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12130");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12131");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12132");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12133");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12134");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12135");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12136");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12137");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12138");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12139");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12140");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12141");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12099");
        node.BrowseName = ToQualifiedName("SessionId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionId");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12099");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12100");
        node.BrowseName = ToQualifiedName("SessionName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12100");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12101");
        node.BrowseName = ToQualifiedName("ClientDescription");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientDescription");
        attrs.Type = ToNodeId("i=308");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12101");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12102");
        node.BrowseName = ToQualifiedName("ServerUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12102");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12103");
        node.BrowseName = ToQualifiedName("EndpointUrl");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointUrl");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12103");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12104");
        node.BrowseName = ToQualifiedName("LocaleIds");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("LocaleIds");
        attrs.Type = ToNodeId("i=295");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12104");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12105");
        node.BrowseName = ToQualifiedName("ActualSessionTimeout");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ActualSessionTimeout");
        attrs.Type = ToNodeId("i=290");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12105");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12106");
        node.BrowseName = ToQualifiedName("MaxResponseMessageSize");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MaxResponseMessageSize");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12106");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12107");
        node.BrowseName = ToQualifiedName("ClientConnectionTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientConnectionTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12107");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12108");
        node.BrowseName = ToQualifiedName("ClientLastContactTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientLastContactTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12108");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12109");
        node.BrowseName = ToQualifiedName("CurrentSubscriptionsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSubscriptionsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12109");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12110");
        node.BrowseName = ToQualifiedName("CurrentMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentMonitoredItemsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12110");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12111");
        node.BrowseName = ToQualifiedName("CurrentPublishRequestsInQueue");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentPublishRequestsInQueue");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12111");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12112");
        node.BrowseName = ToQualifiedName("TotalRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TotalRequestCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12112");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12113");
        node.BrowseName = ToQualifiedName("UnauthorizedRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UnauthorizedRequestCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12113");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12114");
        node.BrowseName = ToQualifiedName("ReadCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ReadCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12114");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12115");
        node.BrowseName = ToQualifiedName("HistoryReadCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryReadCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12115");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12116");
        node.BrowseName = ToQualifiedName("WriteCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("WriteCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12116");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12117");
        node.BrowseName = ToQualifiedName("HistoryUpdateCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryUpdateCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12117");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12118");
        node.BrowseName = ToQualifiedName("CallCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CallCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12118");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12119");
        node.BrowseName = ToQualifiedName("CreateMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CreateMonitoredItemsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12119");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12120");
        node.BrowseName = ToQualifiedName("ModifyMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ModifyMonitoredItemsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12120");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12121");
        node.BrowseName = ToQualifiedName("SetMonitoringModeCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SetMonitoringModeCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12121");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12122");
        node.BrowseName = ToQualifiedName("SetTriggeringCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SetTriggeringCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12122");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12123");
        node.BrowseName = ToQualifiedName("DeleteMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteMonitoredItemsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12123");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12124");
        node.BrowseName = ToQualifiedName("CreateSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CreateSubscriptionCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12124");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12125");
        node.BrowseName = ToQualifiedName("ModifySubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ModifySubscriptionCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12125");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12126");
        node.BrowseName = ToQualifiedName("SetPublishingModeCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SetPublishingModeCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12126");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12127");
        node.BrowseName = ToQualifiedName("PublishCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12127");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12128");
        node.BrowseName = ToQualifiedName("RepublishCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RepublishCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12128");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12129");
        node.BrowseName = ToQualifiedName("TransferSubscriptionsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransferSubscriptionsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12129");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12130");
        node.BrowseName = ToQualifiedName("DeleteSubscriptionsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteSubscriptionsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12130");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12131");
        node.BrowseName = ToQualifiedName("AddNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12131");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12132");
        node.BrowseName = ToQualifiedName("AddReferencesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddReferencesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12132");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12133");
        node.BrowseName = ToQualifiedName("DeleteNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12133");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12134");
        node.BrowseName = ToQualifiedName("DeleteReferencesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteReferencesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12134");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12135");
        node.BrowseName = ToQualifiedName("BrowseCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BrowseCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12135");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12136");
        node.BrowseName = ToQualifiedName("BrowseNextCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BrowseNextCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12136");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12137");
        node.BrowseName = ToQualifiedName("TranslateBrowsePathsToNodeIdsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TranslateBrowsePathsToNodeIdsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12137");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12138");
        node.BrowseName = ToQualifiedName("QueryFirstCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("QueryFirstCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12138");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12139");
        node.BrowseName = ToQualifiedName("QueryNextCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("QueryNextCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12139");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12140");
        node.BrowseName = ToQualifiedName("RegisterNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RegisterNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12140");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12141");
        node.BrowseName = ToQualifiedName("UnregisterNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12098");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UnregisterNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12141");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12142");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnostics");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12097");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2244");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Security related diagnostics information for an active session.");
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnostics");
        attrs.Type = ToNodeId("i=868");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12143");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12144");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12145");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12146");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12147");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12148");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12149");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12150");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=12142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12151");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12143");
        node.BrowseName = ToQualifiedName("SessionId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionId");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12143");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12144");
        node.BrowseName = ToQualifiedName("ClientUserIdOfSession");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientUserIdOfSession");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12144");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12145");
        node.BrowseName = ToQualifiedName("ClientUserIdHistory");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientUserIdHistory");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12145");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12146");
        node.BrowseName = ToQualifiedName("AuthenticationMechanism");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AuthenticationMechanism");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12146");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12147");
        node.BrowseName = ToQualifiedName("Encoding");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Encoding");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12147");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12148");
        node.BrowseName = ToQualifiedName("TransportProtocol");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransportProtocol");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12148");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12149");
        node.BrowseName = ToQualifiedName("SecurityMode");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityMode");
        attrs.Type = ToNodeId("i=302");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12149");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12150");
        node.BrowseName = ToQualifiedName("SecurityPolicyUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityPolicyUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12151");
        node.BrowseName = ToQualifiedName("ClientCertificate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientCertificate");
        attrs.Type = ObjectId::ByteString;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12151");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12152");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=12097");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2171");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of diagnostics for each subscription owned by the session.");
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsArray");
        attrs.Type = ToNodeId("i=874");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12152");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2029");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsObjectType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("A container for session level diagnostics information.");
        attrs.DisplayName = LocalizedText("SessionDiagnosticsObjectType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2029");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2030");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2029");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2031");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2029");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2032");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2030");
        node.BrowseName = ToQualifiedName("SessionDiagnostics");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2029");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2197");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Diagnostics information for an active session.");
        attrs.DisplayName = LocalizedText("SessionDiagnostics");
        attrs.Type = ToNodeId("i=865");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3131");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3132");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3133");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3134");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3135");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3136");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3137");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3138");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3139");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3140");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3141");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3142");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3143");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8898");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11891");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3151");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3152");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3153");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3154");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3155");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3156");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3157");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3158");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3159");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3160");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3161");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3162");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3163");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3164");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3165");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3166");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3167");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3168");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3169");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3170");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3171");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3172");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3173");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3174");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3175");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3176");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3177");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3178");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2030");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3131");
        node.BrowseName = ToQualifiedName("SessionId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionId");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3131");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3132");
        node.BrowseName = ToQualifiedName("SessionName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3132");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3133");
        node.BrowseName = ToQualifiedName("ClientDescription");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientDescription");
        attrs.Type = ToNodeId("i=308");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3133");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3134");
        node.BrowseName = ToQualifiedName("ServerUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3134");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3135");
        node.BrowseName = ToQualifiedName("EndpointUrl");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointUrl");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3135");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3136");
        node.BrowseName = ToQualifiedName("LocaleIds");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("LocaleIds");
        attrs.Type = ToNodeId("i=295");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3136");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3137");
        node.BrowseName = ToQualifiedName("ActualSessionTimeout");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ActualSessionTimeout");
        attrs.Type = ToNodeId("i=290");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3137");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3138");
        node.BrowseName = ToQualifiedName("MaxResponseMessageSize");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MaxResponseMessageSize");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3138");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3139");
        node.BrowseName = ToQualifiedName("ClientConnectionTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientConnectionTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3139");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3140");
        node.BrowseName = ToQualifiedName("ClientLastContactTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientLastContactTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3140");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3141");
        node.BrowseName = ToQualifiedName("CurrentSubscriptionsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSubscriptionsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3141");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3142");
        node.BrowseName = ToQualifiedName("CurrentMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentMonitoredItemsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3143");
        node.BrowseName = ToQualifiedName("CurrentPublishRequestsInQueue");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentPublishRequestsInQueue");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3143");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8898");
        node.BrowseName = ToQualifiedName("TotalRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TotalRequestCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8898");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11891");
        node.BrowseName = ToQualifiedName("UnauthorizedRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UnauthorizedRequestCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11891");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3151");
        node.BrowseName = ToQualifiedName("ReadCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ReadCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3151");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3152");
        node.BrowseName = ToQualifiedName("HistoryReadCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryReadCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3152");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3153");
        node.BrowseName = ToQualifiedName("WriteCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("WriteCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3153");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3154");
        node.BrowseName = ToQualifiedName("HistoryUpdateCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryUpdateCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3154");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3155");
        node.BrowseName = ToQualifiedName("CallCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CallCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3155");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3156");
        node.BrowseName = ToQualifiedName("CreateMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CreateMonitoredItemsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3156");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3157");
        node.BrowseName = ToQualifiedName("ModifyMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ModifyMonitoredItemsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3157");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3158");
        node.BrowseName = ToQualifiedName("SetMonitoringModeCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SetMonitoringModeCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3158");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3159");
        node.BrowseName = ToQualifiedName("SetTriggeringCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SetTriggeringCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3159");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3160");
        node.BrowseName = ToQualifiedName("DeleteMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteMonitoredItemsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3160");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3161");
        node.BrowseName = ToQualifiedName("CreateSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CreateSubscriptionCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3161");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3162");
        node.BrowseName = ToQualifiedName("ModifySubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ModifySubscriptionCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3162");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3163");
        node.BrowseName = ToQualifiedName("SetPublishingModeCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SetPublishingModeCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3163");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3164");
        node.BrowseName = ToQualifiedName("PublishCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3164");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3165");
        node.BrowseName = ToQualifiedName("RepublishCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RepublishCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3165");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3166");
        node.BrowseName = ToQualifiedName("TransferSubscriptionsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransferSubscriptionsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3166");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3167");
        node.BrowseName = ToQualifiedName("DeleteSubscriptionsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteSubscriptionsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3167");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3168");
        node.BrowseName = ToQualifiedName("AddNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3168");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3169");
        node.BrowseName = ToQualifiedName("AddReferencesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddReferencesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3169");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3170");
        node.BrowseName = ToQualifiedName("DeleteNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3170");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3171");
        node.BrowseName = ToQualifiedName("DeleteReferencesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteReferencesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3171");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3172");
        node.BrowseName = ToQualifiedName("BrowseCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BrowseCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3173");
        node.BrowseName = ToQualifiedName("BrowseNextCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BrowseNextCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3173");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3174");
        node.BrowseName = ToQualifiedName("TranslateBrowsePathsToNodeIdsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TranslateBrowsePathsToNodeIdsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3174");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3175");
        node.BrowseName = ToQualifiedName("QueryFirstCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("QueryFirstCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3175");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3176");
        node.BrowseName = ToQualifiedName("QueryNextCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("QueryNextCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3176");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3177");
        node.BrowseName = ToQualifiedName("RegisterNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RegisterNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3177");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3178");
        node.BrowseName = ToQualifiedName("UnregisterNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2030");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UnregisterNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3178");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2031");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnostics");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2029");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2244");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Security related diagnostics information for an active session.");
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnostics");
        attrs.Type = ToNodeId("i=868");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2031");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3179");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2031");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3180");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2031");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3181");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2031");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3182");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2031");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3183");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2031");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3184");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2031");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3185");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2031");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3186");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2031");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3187");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2031");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3179");
        node.BrowseName = ToQualifiedName("SessionId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2031");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionId");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3179");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3180");
        node.BrowseName = ToQualifiedName("ClientUserIdOfSession");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2031");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientUserIdOfSession");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3180");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3181");
        node.BrowseName = ToQualifiedName("ClientUserIdHistory");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2031");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientUserIdHistory");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3181");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3182");
        node.BrowseName = ToQualifiedName("AuthenticationMechanism");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2031");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AuthenticationMechanism");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3182");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3183");
        node.BrowseName = ToQualifiedName("Encoding");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2031");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Encoding");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3183");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3184");
        node.BrowseName = ToQualifiedName("TransportProtocol");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2031");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransportProtocol");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3184");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3185");
        node.BrowseName = ToQualifiedName("SecurityMode");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2031");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityMode");
        attrs.Type = ToNodeId("i=302");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3185");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3186");
        node.BrowseName = ToQualifiedName("SecurityPolicyUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2031");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityPolicyUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3186");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3187");
        node.BrowseName = ToQualifiedName("ClientCertificate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2031");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientCertificate");
        attrs.Type = ObjectId::ByteString;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3187");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2032");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2029");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2171");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of diagnostics for each subscription owned by the session.");
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsArray");
        attrs.Type = ToNodeId("i=874");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2032");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2033");
        node.BrowseName = ToQualifiedName("VendorServerInfoType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("A base type for vendor specific server information.");
        attrs.DisplayName = LocalizedText("VendorServerInfoType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2034");
        node.BrowseName = ToQualifiedName("ServerRedundancyType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("A base type for an object that describe how a server supports redundancy.");
        attrs.DisplayName = LocalizedText("ServerRedundancyType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2034");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2035");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2035");
        node.BrowseName = ToQualifiedName("RedundancySupport");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2034");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Indicates what style of redundancy is supported by the server.");
        attrs.DisplayName = LocalizedText("RedundancySupport");
        attrs.Type = ToNodeId("i=851");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2035");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2036");
        node.BrowseName = ToQualifiedName("TransparentRedundancyType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2034");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("Identifies the capabilties of server that supports transparent redundancy.");
        attrs.DisplayName = LocalizedText("TransparentRedundancyType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2036");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2037");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2036");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2038");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2037");
        node.BrowseName = ToQualifiedName("CurrentServerId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2036");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The ID of the server that is currently in use.");
        attrs.DisplayName = LocalizedText("CurrentServerId");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2037");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2038");
        node.BrowseName = ToQualifiedName("RedundantServerArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2036");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of servers in the same redundant set.");
        attrs.DisplayName = LocalizedText("RedundantServerArray");
        attrs.Type = ToNodeId("i=853");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2038");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2039");
        node.BrowseName = ToQualifiedName("NonTransparentRedundancyType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2034");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("Identifies the capabilties of server that supports non-transparent redundancy.");
        attrs.DisplayName = LocalizedText("NonTransparentRedundancyType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2039");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2040");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2040");
        node.BrowseName = ToQualifiedName("ServerUriArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2039");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of servers in the same redundant set.");
        attrs.DisplayName = LocalizedText("ServerUriArray");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2040");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11945");
        node.BrowseName = ToQualifiedName("NonTransparentNetworkRedundancyType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2039");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("NonTransparentNetworkRedundancyType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11945");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11948");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11948");
        node.BrowseName = ToQualifiedName("ServerNetworkGroups");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11945");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerNetworkGroups");
        attrs.Type = ToNodeId("i=11944");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11948");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11564");
        node.BrowseName = ToQualifiedName("OperationLimitsType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("Identifies the operation limits imposed by the server.");
        attrs.DisplayName = LocalizedText("OperationLimitsType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11564");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11565");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11564");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12161");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11564");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12162");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11564");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11567");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11564");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12163");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11564");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12164");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11564");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11569");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11564");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11570");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11564");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11571");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11564");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11572");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11564");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11573");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11564");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11574");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11565");
        node.BrowseName = ToQualifiedName("MaxNodesPerRead");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11564");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single Read request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerRead");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11565");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12161");
        node.BrowseName = ToQualifiedName("MaxNodesPerHistoryReadData");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11564");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single data HistoryRead request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerHistoryReadData");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12161");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12162");
        node.BrowseName = ToQualifiedName("MaxNodesPerHistoryReadEvents");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11564");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single event HistoryRead request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerHistoryReadEvents");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12162");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11567");
        node.BrowseName = ToQualifiedName("MaxNodesPerWrite");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11564");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single Write request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerWrite");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11567");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12163");
        node.BrowseName = ToQualifiedName("MaxNodesPerHistoryUpdateData");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11564");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single data HistoryUpdate request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerHistoryUpdateData");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12163");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12164");
        node.BrowseName = ToQualifiedName("MaxNodesPerHistoryUpdateEvents");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11564");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single event HistoryUpdate request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerHistoryUpdateEvents");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=12164");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11569");
        node.BrowseName = ToQualifiedName("MaxNodesPerMethodCall");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11564");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single Call request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerMethodCall");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11569");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11570");
        node.BrowseName = ToQualifiedName("MaxNodesPerBrowse");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11564");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single Browse request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerBrowse");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11570");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11571");
        node.BrowseName = ToQualifiedName("MaxNodesPerRegisterNodes");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11564");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single RegisterNodes request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerRegisterNodes");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11571");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11572");
        node.BrowseName = ToQualifiedName("MaxNodesPerTranslateBrowsePathsToNodeIds");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11564");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single TranslateBrowsePathsToNodeIds request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerTranslateBrowsePathsToNodeIds");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11572");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11573");
        node.BrowseName = ToQualifiedName("MaxNodesPerNodeManagement");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11564");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single AddNodes, AddReferences, DeleteNodes or DeleteReferences request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerNodeManagement");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11573");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11574");
        node.BrowseName = ToQualifiedName("MaxMonitoredItemsPerCall");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11564");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single MonitoredItem related request.");
        attrs.DisplayName = LocalizedText("MaxMonitoredItemsPerCall");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11574");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11575");
        node.BrowseName = ToQualifiedName("FileType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("An object that represents a file that can be accessed via the server.");
        attrs.DisplayName = LocalizedText("FileType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11575");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11576");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11575");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11577");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11575");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11578");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11575");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11579");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11575");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11580");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11575");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11583");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11575");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11585");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11575");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11588");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11575");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11590");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11575");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11593");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11576");
        node.BrowseName = ToQualifiedName("Size");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11575");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The size of the file in bytes.");
        attrs.DisplayName = LocalizedText("Size");
        attrs.Type = ObjectId::UInt64;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11576");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11577");
        node.BrowseName = ToQualifiedName("Writeable");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11575");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Whether the file is writeable.");
        attrs.DisplayName = LocalizedText("Writeable");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11577");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11578");
        node.BrowseName = ToQualifiedName("UserWriteable");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11575");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Whether the file is writeable by the current user.");
        attrs.DisplayName = LocalizedText("UserWriteable");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11578");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11579");
        node.BrowseName = ToQualifiedName("OpenCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11575");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The current number of open file handles.");
        attrs.DisplayName = LocalizedText("OpenCount");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11579");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11581");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11580");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11581");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11582");
        node.BrowseName = ToQualifiedName("OutputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11580");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OutputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11582");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11584");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11583");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11584");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11586");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11585");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11586");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11587");
        node.BrowseName = ToQualifiedName("OutputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11585");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OutputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11587");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11589");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11588");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11589");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11591");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11590");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11591");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11592");
        node.BrowseName = ToQualifiedName("OutputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11590");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OutputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11592");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11594");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11593");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11594");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11595");
        node.BrowseName = ToQualifiedName("AddressSpaceFileType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=11575");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("A file used to store a namespace exported from the server.");
        attrs.DisplayName = LocalizedText("AddressSpaceFileType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11595");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11615");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11616");
        node.BrowseName = ToQualifiedName("NamespaceMetadataType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("Provides the metadata for a namespace used by the server.");
        attrs.DisplayName = LocalizedText("NamespaceMetadataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11616");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11617");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11616");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11618");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11616");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11619");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11616");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11620");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11616");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11621");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11616");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11622");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11616");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11623");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11616");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11624");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11617");
        node.BrowseName = ToQualifiedName("NamespaceUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11616");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The URI of the namespace.");
        attrs.DisplayName = LocalizedText("NamespaceUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11618");
        node.BrowseName = ToQualifiedName("NamespaceVersion");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11616");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The human readable string representing version of the namespace.");
        attrs.DisplayName = LocalizedText("NamespaceVersion");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11618");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11619");
        node.BrowseName = ToQualifiedName("NamespacePublicationDate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11616");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The publication date for the namespace.");
        attrs.DisplayName = LocalizedText("NamespacePublicationDate");
        attrs.Type = ObjectId::DateTime;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11619");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11620");
        node.BrowseName = ToQualifiedName("IsNamespaceSubset");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11616");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("If TRUE then the server only supports a subset of the namespace.");
        attrs.DisplayName = LocalizedText("IsNamespaceSubset");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11620");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11621");
        node.BrowseName = ToQualifiedName("StaticNodeIdIdentifierTypes");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11616");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of IdTypes for nodes which are the same in every server that exposes them.");
        attrs.DisplayName = LocalizedText("StaticNodeIdIdentifierTypes");
        attrs.Type = ToNodeId("i=256");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11621");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11622");
        node.BrowseName = ToQualifiedName("StaticNumericNodeIdRange");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11616");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of ranges for numeric node ids which are the same in every server that exposes them.");
        attrs.DisplayName = LocalizedText("StaticNumericNodeIdRange");
        attrs.Type = ToNodeId("i=291");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11622");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11623");
        node.BrowseName = ToQualifiedName("StaticStringNodeIdPattern");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11616");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A regular expression which matches string node ids are the same in every server that exposes them.");
        attrs.DisplayName = LocalizedText("StaticStringNodeIdPattern");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11623");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11624");
        node.BrowseName = ToQualifiedName("NamespaceFile");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=11616");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=11595");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A file containing the nodes of the namespace.");
        attrs.DisplayName = LocalizedText("NamespaceFile");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11624");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11625");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11624");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11626");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11624");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11627");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11624");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11628");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11624");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11629");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11624");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11632");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11624");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11634");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11624");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11637");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11624");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11639");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11624");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11642");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11624");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11625");
        node.BrowseName = ToQualifiedName("Size");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11624");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The size of the file in bytes.");
        attrs.DisplayName = LocalizedText("Size");
        attrs.Type = ObjectId::UInt64;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11625");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11626");
        node.BrowseName = ToQualifiedName("Writeable");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11624");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Whether the file is writeable.");
        attrs.DisplayName = LocalizedText("Writeable");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11626");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11627");
        node.BrowseName = ToQualifiedName("UserWriteable");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11624");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Whether the file is writeable by the current user.");
        attrs.DisplayName = LocalizedText("UserWriteable");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11627");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11628");
        node.BrowseName = ToQualifiedName("OpenCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11624");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The current number of open file handles.");
        attrs.DisplayName = LocalizedText("OpenCount");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11628");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11630");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11629");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11630");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11631");
        node.BrowseName = ToQualifiedName("OutputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11629");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OutputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11631");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11633");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11632");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11633");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11635");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11634");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11635");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11636");
        node.BrowseName = ToQualifiedName("OutputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11634");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OutputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11636");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11638");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11637");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11638");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11640");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11639");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11640");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11641");
        node.BrowseName = ToQualifiedName("OutputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11639");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OutputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11641");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11643");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11642");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11643");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11645");
        node.BrowseName = ToQualifiedName("NamespacesType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("A container for the namespace metadata provided by the server.");
        attrs.DisplayName = LocalizedText("NamespacesType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11645");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11646");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11645");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11675");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11646");
        node.BrowseName = ToQualifiedName("<NamespaceIdentifier>");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=11645");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=11616");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("<NamespaceIdentifier>");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11646");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11647");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11646");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11648");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11646");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11649");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11646");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11650");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11646");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11651");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11646");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11652");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11646");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11653");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11646");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11508");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11647");
        node.BrowseName = ToQualifiedName("NamespaceUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11646");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The URI of the namespace.");
        attrs.DisplayName = LocalizedText("NamespaceUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11647");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11648");
        node.BrowseName = ToQualifiedName("NamespaceVersion");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11646");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The human readable string representing version of the namespace.");
        attrs.DisplayName = LocalizedText("NamespaceVersion");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11648");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11649");
        node.BrowseName = ToQualifiedName("NamespacePublicationDate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11646");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The publication date for the namespace.");
        attrs.DisplayName = LocalizedText("NamespacePublicationDate");
        attrs.Type = ObjectId::DateTime;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11649");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11650");
        node.BrowseName = ToQualifiedName("IsNamespaceSubset");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11646");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("If TRUE then the server only supports a subset of the namespace.");
        attrs.DisplayName = LocalizedText("IsNamespaceSubset");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11650");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11651");
        node.BrowseName = ToQualifiedName("StaticNodeIdIdentifierTypes");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11646");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of IdTypes for nodes which are the same in every server that exposes them.");
        attrs.DisplayName = LocalizedText("StaticNodeIdIdentifierTypes");
        attrs.Type = ToNodeId("i=256");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11651");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11652");
        node.BrowseName = ToQualifiedName("StaticNumericNodeIdRange");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11646");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of ranges for numeric node ids which are the same in every server that exposes them.");
        attrs.DisplayName = LocalizedText("StaticNumericNodeIdRange");
        attrs.Type = ToNodeId("i=291");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11652");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11653");
        node.BrowseName = ToQualifiedName("StaticStringNodeIdPattern");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11646");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A regular expression which matches string node ids are the same in every server that exposes them.");
        attrs.DisplayName = LocalizedText("StaticStringNodeIdPattern");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11653");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11675");
        node.BrowseName = ToQualifiedName("AddressSpaceFile");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=11645");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=11595");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A file containing the nodes of the namespace.");
        attrs.DisplayName = LocalizedText("AddressSpaceFile");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11675");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11676");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11675");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11677");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11675");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11678");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11675");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11679");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11675");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11680");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11675");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11683");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11675");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11685");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11675");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11688");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11675");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11690");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=11675");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11693");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11675");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11676");
        node.BrowseName = ToQualifiedName("Size");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11675");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The size of the file in bytes.");
        attrs.DisplayName = LocalizedText("Size");
        attrs.Type = ObjectId::UInt64;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11676");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11677");
        node.BrowseName = ToQualifiedName("Writeable");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11675");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Whether the file is writeable.");
        attrs.DisplayName = LocalizedText("Writeable");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11677");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11678");
        node.BrowseName = ToQualifiedName("UserWriteable");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11675");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Whether the file is writeable by the current user.");
        attrs.DisplayName = LocalizedText("UserWriteable");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11678");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11679");
        node.BrowseName = ToQualifiedName("OpenCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11675");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The current number of open file handles.");
        attrs.DisplayName = LocalizedText("OpenCount");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11679");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11681");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11680");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11681");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11682");
        node.BrowseName = ToQualifiedName("OutputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11680");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OutputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11682");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11684");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11683");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11684");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11686");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11685");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11686");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11687");
        node.BrowseName = ToQualifiedName("OutputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11685");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OutputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11687");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11689");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11688");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11689");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11691");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11690");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11691");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11692");
        node.BrowseName = ToQualifiedName("OutputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11690");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OutputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11692");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11694");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11693");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11694");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2041");
        node.BrowseName = ToQualifiedName("BaseEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("The base type for all events.");
        attrs.DisplayName = LocalizedText("BaseEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2041");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2042");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2041");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2043");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2041");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2044");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2041");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2045");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2041");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2046");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2041");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2047");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2041");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3190");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2041");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2050");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2041");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2051");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2042");
        node.BrowseName = ToQualifiedName("EventId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A globally unique identifier for the event.");
        attrs.DisplayName = LocalizedText("EventId");
        attrs.Type = ObjectId::ByteString;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2042");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2043");
        node.BrowseName = ToQualifiedName("EventType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The identifier for the event type.");
        attrs.DisplayName = LocalizedText("EventType");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2043");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2044");
        node.BrowseName = ToQualifiedName("SourceNode");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The source of the event.");
        attrs.DisplayName = LocalizedText("SourceNode");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2044");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2045");
        node.BrowseName = ToQualifiedName("SourceName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A description of the source of the event.");
        attrs.DisplayName = LocalizedText("SourceName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2045");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2046");
        node.BrowseName = ToQualifiedName("Time");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("When the event occurred.");
        attrs.DisplayName = LocalizedText("Time");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2046");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2047");
        node.BrowseName = ToQualifiedName("ReceiveTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("When the server received the event from the underlying system.");
        attrs.DisplayName = LocalizedText("ReceiveTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2047");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3190");
        node.BrowseName = ToQualifiedName("LocalTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Information about the local time where the event originated.");
        attrs.DisplayName = LocalizedText("LocalTime");
        attrs.Type = ToNodeId("i=8912");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3190");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2050");
        node.BrowseName = ToQualifiedName("Message");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A localized description of the event.");
        attrs.DisplayName = LocalizedText("Message");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2050");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2051");
        node.BrowseName = ToQualifiedName("Severity");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Indicates how urgent an event is.");
        attrs.DisplayName = LocalizedText("Severity");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2051");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2052");
        node.BrowseName = ToQualifiedName("AuditEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("A base type for events used to track client initiated changes to the server state.");
        attrs.DisplayName = LocalizedText("AuditEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2052");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2053");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2052");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2054");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2052");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2055");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2052");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2056");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2052");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2057");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2053");
        node.BrowseName = ToQualifiedName("ActionTimeStamp");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2052");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("When the action triggering the event occurred.");
        attrs.DisplayName = LocalizedText("ActionTimeStamp");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2053");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2054");
        node.BrowseName = ToQualifiedName("Status");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2052");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("If TRUE the action was performed. If FALSE the action failed and the server state did not change.");
        attrs.DisplayName = LocalizedText("Status");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2054");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2055");
        node.BrowseName = ToQualifiedName("ServerId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2052");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The unique identifier for the server generating the event.");
        attrs.DisplayName = LocalizedText("ServerId");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2055");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2056");
        node.BrowseName = ToQualifiedName("ClientAuditEntryId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2052");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The log entry id provided in the request that initiated the action.");
        attrs.DisplayName = LocalizedText("ClientAuditEntryId");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2056");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2057");
        node.BrowseName = ToQualifiedName("ClientUserId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2052");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The user identity associated with the session that initiated the action.");
        attrs.DisplayName = LocalizedText("ClientUserId");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2057");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2058");
        node.BrowseName = ToQualifiedName("AuditSecurityEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2052");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("A base type for events used to track security related changes.");
        attrs.DisplayName = LocalizedText("AuditSecurityEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2059");
        node.BrowseName = ToQualifiedName("AuditChannelEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2058");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("A base type for events used to track related changes to a secure channel.");
        attrs.DisplayName = LocalizedText("AuditChannelEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2059");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2745");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2745");
        node.BrowseName = ToQualifiedName("SecureChannelId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2059");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The identifier for the secure channel that was changed.");
        attrs.DisplayName = LocalizedText("SecureChannelId");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2745");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2060");
        node.BrowseName = ToQualifiedName("AuditOpenSecureChannelEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2059");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("An event that is raised when a secure channel is opened.");
        attrs.DisplayName = LocalizedText("AuditOpenSecureChannelEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2060");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2061");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2060");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2746");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2060");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2062");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2060");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2063");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2060");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2065");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2060");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2066");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2061");
        node.BrowseName = ToQualifiedName("ClientCertificate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2060");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The certificate provided by the client.");
        attrs.DisplayName = LocalizedText("ClientCertificate");
        attrs.Type = ObjectId::ByteString;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2061");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2746");
        node.BrowseName = ToQualifiedName("ClientCertificateThumbprint");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2060");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The thumbprint for certificate provided by the client.");
        attrs.DisplayName = LocalizedText("ClientCertificateThumbprint");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2746");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2062");
        node.BrowseName = ToQualifiedName("RequestType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2060");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The type of request (NEW or RENEW).");
        attrs.DisplayName = LocalizedText("RequestType");
        attrs.Type = ToNodeId("i=315");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2062");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2063");
        node.BrowseName = ToQualifiedName("SecurityPolicyUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2060");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The security policy used by the channel.");
        attrs.DisplayName = LocalizedText("SecurityPolicyUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2063");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2065");
        node.BrowseName = ToQualifiedName("SecurityMode");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2060");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The security mode used by the channel.");
        attrs.DisplayName = LocalizedText("SecurityMode");
        attrs.Type = ToNodeId("i=302");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2065");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2066");
        node.BrowseName = ToQualifiedName("RequestedLifetime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2060");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The lifetime of the channel requested by the client.");
        attrs.DisplayName = LocalizedText("RequestedLifetime");
        attrs.Type = ToNodeId("i=290");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2066");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2069");
        node.BrowseName = ToQualifiedName("AuditSessionEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2052");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("A base type for events used to track related changes to a session.");
        attrs.DisplayName = LocalizedText("AuditSessionEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2069");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2070");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2070");
        node.BrowseName = ToQualifiedName("SessionId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2069");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The unique identifier for the session,.");
        attrs.DisplayName = LocalizedText("SessionId");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2070");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2071");
        node.BrowseName = ToQualifiedName("AuditCreateSessionEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2069");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.Description = LocalizedText("An event that is raised when a session is created.");
        attrs.DisplayName = LocalizedText("AuditCreateSessionEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2071");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2072");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2071");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2073");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2071");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2747");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2071");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2074");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2072");
        node.BrowseName = ToQualifiedName("SecureChannelId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2071");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The secure channel associated with the session.");
        attrs.DisplayName = LocalizedText("SecureChannelId");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2072");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2073");
        node.BrowseName = ToQualifiedName("ClientCertificate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2071");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The certificate provided by the client.");
        attrs.DisplayName = LocalizedText("ClientCertificate");
        attrs.Type = ObjectId::ByteString;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2073");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2747");
        node.BrowseName = ToQualifiedName("ClientCertificateThumbprint");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2071");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The thumbprint of the certificate provided by the client.");
        attrs.DisplayName = LocalizedText("ClientCertificateThumbprint");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2747");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2074");
        node.BrowseName = ToQualifiedName("RevisedSessionTimeout");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2071");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The timeout for the session.");
        attrs.DisplayName = LocalizedText("RevisedSessionTimeout");
        attrs.Type = ToNodeId("i=290");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2074");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2748");
        node.BrowseName = ToQualifiedName("AuditUrlMismatchEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2071");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditUrlMismatchEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2748");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2749");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2749");
        node.BrowseName = ToQualifiedName("EndpointUrl");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2748");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointUrl");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2749");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2075");
        node.BrowseName = ToQualifiedName("AuditActivateSessionEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2069");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditActivateSessionEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2075");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2076");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2075");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2077");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2075");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11485");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2076");
        node.BrowseName = ToQualifiedName("ClientSoftwareCertificates");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2075");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientSoftwareCertificates");
        attrs.Type = ToNodeId("i=344");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2076");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2077");
        node.BrowseName = ToQualifiedName("UserIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2075");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UserIdentityToken");
        attrs.Type = ToNodeId("i=316");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2077");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11485");
        node.BrowseName = ToQualifiedName("SecureChannelId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2075");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecureChannelId");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11485");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2078");
        node.BrowseName = ToQualifiedName("AuditCancelEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2069");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditCancelEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2078");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2079");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2079");
        node.BrowseName = ToQualifiedName("RequestHandle");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2078");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RequestHandle");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2079");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2080");
        node.BrowseName = ToQualifiedName("AuditCertificateEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2058");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditCertificateEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2080");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2081");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2081");
        node.BrowseName = ToQualifiedName("Certificate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2080");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Certificate");
        attrs.Type = ObjectId::ByteString;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2081");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2082");
        node.BrowseName = ToQualifiedName("AuditCertificateDataMismatchEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2080");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditCertificateDataMismatchEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2082");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2083");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2082");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2084");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2083");
        node.BrowseName = ToQualifiedName("InvalidHostname");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2082");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InvalidHostname");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2083");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2084");
        node.BrowseName = ToQualifiedName("InvalidUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2082");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InvalidUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2084");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2085");
        node.BrowseName = ToQualifiedName("AuditCertificateExpiredEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2080");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditCertificateExpiredEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2086");
        node.BrowseName = ToQualifiedName("AuditCertificateInvalidEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2080");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditCertificateInvalidEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2087");
        node.BrowseName = ToQualifiedName("AuditCertificateUntrustedEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2080");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditCertificateUntrustedEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2088");
        node.BrowseName = ToQualifiedName("AuditCertificateRevokedEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2080");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditCertificateRevokedEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2089");
        node.BrowseName = ToQualifiedName("AuditCertificateMismatchEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2080");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditCertificateMismatchEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2090");
        node.BrowseName = ToQualifiedName("AuditNodeManagementEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2052");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditNodeManagementEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2091");
        node.BrowseName = ToQualifiedName("AuditAddNodesEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2090");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditAddNodesEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2091");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2092");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2092");
        node.BrowseName = ToQualifiedName("NodesToAdd");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2091");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("NodesToAdd");
        attrs.Type = ToNodeId("i=376");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2092");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2093");
        node.BrowseName = ToQualifiedName("AuditDeleteNodesEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2090");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditDeleteNodesEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2093");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2094");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2094");
        node.BrowseName = ToQualifiedName("NodesToDelete");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2093");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("NodesToDelete");
        attrs.Type = ToNodeId("i=382");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2094");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2095");
        node.BrowseName = ToQualifiedName("AuditAddReferencesEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2090");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditAddReferencesEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2095");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2096");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2096");
        node.BrowseName = ToQualifiedName("ReferencesToAdd");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2095");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ReferencesToAdd");
        attrs.Type = ToNodeId("i=379");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2096");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2097");
        node.BrowseName = ToQualifiedName("AuditDeleteReferencesEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2090");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditDeleteReferencesEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2097");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2098");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2098");
        node.BrowseName = ToQualifiedName("ReferencesToDelete");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2097");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ReferencesToDelete");
        attrs.Type = ToNodeId("i=385");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2098");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2099");
        node.BrowseName = ToQualifiedName("AuditUpdateEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2052");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditUpdateEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2100");
        node.BrowseName = ToQualifiedName("AuditWriteUpdateEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2099");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditWriteUpdateEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2100");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2750");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2100");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2101");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2100");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2102");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2100");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2103");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2750");
        node.BrowseName = ToQualifiedName("AttributeId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2100");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AttributeId");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2750");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2101");
        node.BrowseName = ToQualifiedName("IndexRange");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2100");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("IndexRange");
        attrs.Type = ToNodeId("i=291");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2101");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2102");
        node.BrowseName = ToQualifiedName("OldValue");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2100");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OldValue");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2102");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2103");
        node.BrowseName = ToQualifiedName("NewValue");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2100");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("NewValue");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2103");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2104");
        node.BrowseName = ToQualifiedName("AuditHistoryUpdateEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2099");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditHistoryUpdateEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2104");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2751");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2751");
        node.BrowseName = ToQualifiedName("ParameterDataTypeId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2104");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ParameterDataTypeId");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2751");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2127");
        node.BrowseName = ToQualifiedName("AuditUpdateMethodEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2052");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditUpdateMethodEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2127");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2128");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2127");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2129");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2128");
        node.BrowseName = ToQualifiedName("MethodId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2127");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MethodId");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2128");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2129");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2127");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2129");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2130");
        node.BrowseName = ToQualifiedName("SystemEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SystemEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2131");
        node.BrowseName = ToQualifiedName("DeviceFailureEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2130");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("DeviceFailureEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11446");
        node.BrowseName = ToQualifiedName("SystemStatusChangeEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2130");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SystemStatusChangeEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11446");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11696");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11696");
        node.BrowseName = ToQualifiedName("SystemState");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11446");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SystemState");
        attrs.Type = ToNodeId("i=852");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11696");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2132");
        node.BrowseName = ToQualifiedName("BaseModelChangeEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("BaseModelChangeEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2133");
        node.BrowseName = ToQualifiedName("GeneralModelChangeEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2132");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("GeneralModelChangeEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2133");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2134");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2134");
        node.BrowseName = ToQualifiedName("Changes");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2133");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Changes");
        attrs.Type = ToNodeId("i=877");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2134");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2738");
        node.BrowseName = ToQualifiedName("SemanticChangeEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2132");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SemanticChangeEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2738");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2739");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2739");
        node.BrowseName = ToQualifiedName("Changes");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2738");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Changes");
        attrs.Type = ToNodeId("i=897");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2739");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3035");
        node.BrowseName = ToQualifiedName("EventQueueOverflowEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("EventQueueOverflowEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11436");
        node.BrowseName = ToQualifiedName("ProgressEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ProgressEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2340");
        node.BrowseName = ToQualifiedName("AggregateFunctionType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AggregateFunctionType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2137");
        node.BrowseName = ToQualifiedName("ServerVendorCapabilityType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerVendorCapabilityType");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2138");
        node.BrowseName = ToQualifiedName("ServerStatusType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerStatusType");
        attrs.Type = ToNodeId("i=862");
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2138");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2139");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2138");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2140");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2138");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2141");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2138");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2142");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2138");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2752");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2138");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2753");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2139");
        node.BrowseName = ToQualifiedName("StartTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2138");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("StartTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2139");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2140");
        node.BrowseName = ToQualifiedName("CurrentTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2138");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2140");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2141");
        node.BrowseName = ToQualifiedName("State");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2138");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("State");
        attrs.Type = ToNodeId("i=852");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2141");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2142");
        node.BrowseName = ToQualifiedName("BuildInfo");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2138");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=3051");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildInfo");
        attrs.Type = ToNodeId("i=338");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3698");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3699");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3700");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3701");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3702");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3703");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2142");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3698");
        node.BrowseName = ToQualifiedName("ProductUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProductUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3698");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3699");
        node.BrowseName = ToQualifiedName("ManufacturerName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ManufacturerName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3699");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3700");
        node.BrowseName = ToQualifiedName("ProductName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProductName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3700");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3701");
        node.BrowseName = ToQualifiedName("SoftwareVersion");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SoftwareVersion");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3701");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3702");
        node.BrowseName = ToQualifiedName("BuildNumber");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildNumber");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3702");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3703");
        node.BrowseName = ToQualifiedName("BuildDate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2142");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildDate");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3703");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2752");
        node.BrowseName = ToQualifiedName("SecondsTillShutdown");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2138");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecondsTillShutdown");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2752");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2753");
        node.BrowseName = ToQualifiedName("ShutdownReason");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2138");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ShutdownReason");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2753");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3051");
        node.BrowseName = ToQualifiedName("BuildInfoType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildInfoType");
        attrs.Type = ToNodeId("i=338");
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3051");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3052");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3051");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3053");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3051");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3054");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3051");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3055");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3051");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3056");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3051");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3057");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3052");
        node.BrowseName = ToQualifiedName("ProductUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3051");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProductUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3052");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3053");
        node.BrowseName = ToQualifiedName("ManufacturerName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3051");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ManufacturerName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3053");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3054");
        node.BrowseName = ToQualifiedName("ProductName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3051");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProductName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3054");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3055");
        node.BrowseName = ToQualifiedName("SoftwareVersion");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3051");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SoftwareVersion");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3055");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3056");
        node.BrowseName = ToQualifiedName("BuildNumber");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3051");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildNumber");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3056");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3057");
        node.BrowseName = ToQualifiedName("BuildDate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3051");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildDate");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3057");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2150");
        node.BrowseName = ToQualifiedName("ServerDiagnosticsSummaryType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerDiagnosticsSummaryType");
        attrs.Type = ToNodeId("i=859");
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2151");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2152");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2153");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2154");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2155");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2156");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2157");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2159");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2160");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2161");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2162");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2150");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2163");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2151");
        node.BrowseName = ToQualifiedName("ServerViewCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerViewCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2151");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2152");
        node.BrowseName = ToQualifiedName("CurrentSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2152");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2153");
        node.BrowseName = ToQualifiedName("CumulatedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CumulatedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2153");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2154");
        node.BrowseName = ToQualifiedName("SecurityRejectedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityRejectedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2154");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2155");
        node.BrowseName = ToQualifiedName("RejectedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RejectedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2155");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2156");
        node.BrowseName = ToQualifiedName("SessionTimeoutCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionTimeoutCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2156");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2157");
        node.BrowseName = ToQualifiedName("SessionAbortCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionAbortCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2157");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2159");
        node.BrowseName = ToQualifiedName("PublishingIntervalCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishingIntervalCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2159");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2160");
        node.BrowseName = ToQualifiedName("CurrentSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSubscriptionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2160");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2161");
        node.BrowseName = ToQualifiedName("CumulatedSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CumulatedSubscriptionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2161");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2162");
        node.BrowseName = ToQualifiedName("SecurityRejectedRequestsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityRejectedRequestsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2162");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2163");
        node.BrowseName = ToQualifiedName("RejectedRequestsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2150");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RejectedRequestsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2163");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2164");
        node.BrowseName = ToQualifiedName("SamplingIntervalDiagnosticsArrayType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SamplingIntervalDiagnosticsArrayType");
        attrs.Type = ToNodeId("i=856");
        attrs.Rank = 1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2165");
        node.BrowseName = ToQualifiedName("SamplingIntervalDiagnosticsType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SamplingIntervalDiagnosticsType");
        attrs.Type = ToNodeId("i=856");
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2165");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2166");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2165");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11697");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2165");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11698");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2165");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11699");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2166");
        node.BrowseName = ToQualifiedName("SamplingInterval");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2165");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SamplingInterval");
        attrs.Type = ToNodeId("i=290");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2166");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11697");
        node.BrowseName = ToQualifiedName("SampledMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2165");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SampledMonitoredItemsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11697");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11698");
        node.BrowseName = ToQualifiedName("MaxSampledMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2165");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MaxSampledMonitoredItemsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11698");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11699");
        node.BrowseName = ToQualifiedName("DisabledMonitoredItemsSamplingCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2165");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DisabledMonitoredItemsSamplingCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11699");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2171");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsArrayType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsArrayType");
        attrs.Type = ToNodeId("i=874");
        attrs.Rank = 1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2172");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsType");
        attrs.Type = ToNodeId("i=874");
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2173");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2174");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2175");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2176");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2177");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8888");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2179");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2180");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2181");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2182");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2183");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2184");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2185");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2186");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2187");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2188");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2189");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2190");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2191");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2998");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2193");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8889");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8890");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8891");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8892");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8893");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8894");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8895");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8896");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8897");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2172");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8902");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2173");
        node.BrowseName = ToQualifiedName("SessionId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionId");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2173");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2174");
        node.BrowseName = ToQualifiedName("SubscriptionId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SubscriptionId");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2174");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2175");
        node.BrowseName = ToQualifiedName("Priority");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Priority");
        attrs.Type = ObjectId::Byte;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2175");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2176");
        node.BrowseName = ToQualifiedName("PublishingInterval");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishingInterval");
        attrs.Type = ObjectId::Double;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2176");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2177");
        node.BrowseName = ToQualifiedName("MaxKeepAliveCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MaxKeepAliveCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2177");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8888");
        node.BrowseName = ToQualifiedName("MaxLifetimeCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MaxLifetimeCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8888");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2179");
        node.BrowseName = ToQualifiedName("MaxNotificationsPerPublish");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MaxNotificationsPerPublish");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2179");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2180");
        node.BrowseName = ToQualifiedName("PublishingEnabled");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishingEnabled");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2180");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2181");
        node.BrowseName = ToQualifiedName("ModifyCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ModifyCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2181");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2182");
        node.BrowseName = ToQualifiedName("EnableCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EnableCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2182");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2183");
        node.BrowseName = ToQualifiedName("DisableCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DisableCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2183");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2184");
        node.BrowseName = ToQualifiedName("RepublishRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RepublishRequestCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2184");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2185");
        node.BrowseName = ToQualifiedName("RepublishMessageRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RepublishMessageRequestCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2185");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2186");
        node.BrowseName = ToQualifiedName("RepublishMessageCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RepublishMessageCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2186");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2187");
        node.BrowseName = ToQualifiedName("TransferRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransferRequestCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2187");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2188");
        node.BrowseName = ToQualifiedName("TransferredToAltClientCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransferredToAltClientCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2188");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2189");
        node.BrowseName = ToQualifiedName("TransferredToSameClientCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransferredToSameClientCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2189");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2190");
        node.BrowseName = ToQualifiedName("PublishRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishRequestCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2190");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2191");
        node.BrowseName = ToQualifiedName("DataChangeNotificationsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DataChangeNotificationsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2191");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2998");
        node.BrowseName = ToQualifiedName("EventNotificationsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EventNotificationsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2998");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2193");
        node.BrowseName = ToQualifiedName("NotificationsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("NotificationsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2193");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8889");
        node.BrowseName = ToQualifiedName("LatePublishRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("LatePublishRequestCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8889");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8890");
        node.BrowseName = ToQualifiedName("CurrentKeepAliveCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentKeepAliveCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8890");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8891");
        node.BrowseName = ToQualifiedName("CurrentLifetimeCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentLifetimeCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8891");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8892");
        node.BrowseName = ToQualifiedName("UnacknowledgedMessageCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UnacknowledgedMessageCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8892");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8893");
        node.BrowseName = ToQualifiedName("DiscardedMessageCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DiscardedMessageCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8893");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8894");
        node.BrowseName = ToQualifiedName("MonitoredItemCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MonitoredItemCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8894");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8895");
        node.BrowseName = ToQualifiedName("DisabledMonitoredItemCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DisabledMonitoredItemCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8895");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8896");
        node.BrowseName = ToQualifiedName("MonitoringQueueOverflowCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MonitoringQueueOverflowCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8896");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8897");
        node.BrowseName = ToQualifiedName("NextSequenceNumber");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("NextSequenceNumber");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8897");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8902");
        node.BrowseName = ToQualifiedName("EventQueueOverFlowCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2172");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EventQueueOverFlowCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8902");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2196");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsArrayType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionDiagnosticsArrayType");
        attrs.Type = ToNodeId("i=865");
        attrs.Rank = 1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2197");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsVariableType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionDiagnosticsVariableType");
        attrs.Type = ToNodeId("i=865");
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2198");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2199");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2200");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2201");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2202");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2203");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2204");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3050");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2205");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2206");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2207");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2208");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2209");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8900");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11892");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2217");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2218");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2219");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2220");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2221");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2222");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2223");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2224");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2225");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2226");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2227");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2228");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2229");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2230");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2231");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2232");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2233");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2234");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2235");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2236");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2237");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2238");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2239");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2240");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2241");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2242");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2730");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2197");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2731");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2198");
        node.BrowseName = ToQualifiedName("SessionId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionId");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2198");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2199");
        node.BrowseName = ToQualifiedName("SessionName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2199");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2200");
        node.BrowseName = ToQualifiedName("ClientDescription");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientDescription");
        attrs.Type = ToNodeId("i=308");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2200");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2201");
        node.BrowseName = ToQualifiedName("ServerUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2201");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2202");
        node.BrowseName = ToQualifiedName("EndpointUrl");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointUrl");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2202");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2203");
        node.BrowseName = ToQualifiedName("LocaleIds");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("LocaleIds");
        attrs.Type = ToNodeId("i=295");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2203");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2204");
        node.BrowseName = ToQualifiedName("ActualSessionTimeout");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ActualSessionTimeout");
        attrs.Type = ToNodeId("i=290");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2204");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3050");
        node.BrowseName = ToQualifiedName("MaxResponseMessageSize");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MaxResponseMessageSize");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3050");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2205");
        node.BrowseName = ToQualifiedName("ClientConnectionTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientConnectionTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2205");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2206");
        node.BrowseName = ToQualifiedName("ClientLastContactTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientLastContactTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2206");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2207");
        node.BrowseName = ToQualifiedName("CurrentSubscriptionsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSubscriptionsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2207");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2208");
        node.BrowseName = ToQualifiedName("CurrentMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentMonitoredItemsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2208");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2209");
        node.BrowseName = ToQualifiedName("CurrentPublishRequestsInQueue");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentPublishRequestsInQueue");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2209");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8900");
        node.BrowseName = ToQualifiedName("TotalRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TotalRequestCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=8900");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11892");
        node.BrowseName = ToQualifiedName("UnauthorizedRequestCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UnauthorizedRequestCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11892");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2217");
        node.BrowseName = ToQualifiedName("ReadCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ReadCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2217");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2218");
        node.BrowseName = ToQualifiedName("HistoryReadCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryReadCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2218");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2219");
        node.BrowseName = ToQualifiedName("WriteCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("WriteCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2219");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2220");
        node.BrowseName = ToQualifiedName("HistoryUpdateCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryUpdateCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2220");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2221");
        node.BrowseName = ToQualifiedName("CallCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CallCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2221");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2222");
        node.BrowseName = ToQualifiedName("CreateMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CreateMonitoredItemsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2222");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2223");
        node.BrowseName = ToQualifiedName("ModifyMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ModifyMonitoredItemsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2223");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2224");
        node.BrowseName = ToQualifiedName("SetMonitoringModeCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SetMonitoringModeCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2224");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2225");
        node.BrowseName = ToQualifiedName("SetTriggeringCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SetTriggeringCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2225");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2226");
        node.BrowseName = ToQualifiedName("DeleteMonitoredItemsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteMonitoredItemsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2226");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2227");
        node.BrowseName = ToQualifiedName("CreateSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CreateSubscriptionCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2227");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2228");
        node.BrowseName = ToQualifiedName("ModifySubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ModifySubscriptionCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2228");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2229");
        node.BrowseName = ToQualifiedName("SetPublishingModeCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SetPublishingModeCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2229");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2230");
        node.BrowseName = ToQualifiedName("PublishCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2230");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2231");
        node.BrowseName = ToQualifiedName("RepublishCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RepublishCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2231");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2232");
        node.BrowseName = ToQualifiedName("TransferSubscriptionsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransferSubscriptionsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2232");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2233");
        node.BrowseName = ToQualifiedName("DeleteSubscriptionsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteSubscriptionsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2233");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2234");
        node.BrowseName = ToQualifiedName("AddNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2234");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2235");
        node.BrowseName = ToQualifiedName("AddReferencesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddReferencesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2235");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2236");
        node.BrowseName = ToQualifiedName("DeleteNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2236");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2237");
        node.BrowseName = ToQualifiedName("DeleteReferencesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteReferencesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2237");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2238");
        node.BrowseName = ToQualifiedName("BrowseCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BrowseCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2238");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2239");
        node.BrowseName = ToQualifiedName("BrowseNextCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BrowseNextCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2239");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2240");
        node.BrowseName = ToQualifiedName("TranslateBrowsePathsToNodeIdsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TranslateBrowsePathsToNodeIdsCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2240");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2241");
        node.BrowseName = ToQualifiedName("QueryFirstCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("QueryFirstCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2241");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2242");
        node.BrowseName = ToQualifiedName("QueryNextCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("QueryNextCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2242");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2730");
        node.BrowseName = ToQualifiedName("RegisterNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RegisterNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2730");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2731");
        node.BrowseName = ToQualifiedName("UnregisterNodesCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2197");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UnregisterNodesCount");
        attrs.Type = ToNodeId("i=871");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2731");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2243");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnosticsArrayType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnosticsArrayType");
        attrs.Type = ToNodeId("i=868");
        attrs.Rank = 1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2244");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnosticsType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnosticsType");
        attrs.Type = ToNodeId("i=868");
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2244");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2245");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2244");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2246");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2244");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2247");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2244");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2248");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2244");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2249");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2244");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2250");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2244");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2251");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2244");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2252");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2244");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3058");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2245");
        node.BrowseName = ToQualifiedName("SessionId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionId");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2245");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2246");
        node.BrowseName = ToQualifiedName("ClientUserIdOfSession");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientUserIdOfSession");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2246");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2247");
        node.BrowseName = ToQualifiedName("ClientUserIdHistory");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientUserIdHistory");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2247");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2248");
        node.BrowseName = ToQualifiedName("AuthenticationMechanism");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AuthenticationMechanism");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2248");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2249");
        node.BrowseName = ToQualifiedName("Encoding");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Encoding");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2249");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2250");
        node.BrowseName = ToQualifiedName("TransportProtocol");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransportProtocol");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2250");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2251");
        node.BrowseName = ToQualifiedName("SecurityMode");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityMode");
        attrs.Type = ToNodeId("i=302");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2251");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2252");
        node.BrowseName = ToQualifiedName("SecurityPolicyUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityPolicyUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3058");
        node.BrowseName = ToQualifiedName("ClientCertificate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2244");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ClientCertificate");
        attrs.Type = ObjectId::ByteString;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3058");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11487");
        node.BrowseName = ToQualifiedName("OptionSetType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("OptionSetType");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11487");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11488");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11487");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11701");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11488");
        node.BrowseName = ToQualifiedName("OptionSetValues");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11487");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OptionSetValues");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11488");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11701");
        node.BrowseName = ToQualifiedName("BitMask");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11487");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BitMask");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11701");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3048");
        node.BrowseName = ToQualifiedName("EventTypes");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=86");
        node.ReferenceTypeId = ReferenceId::Organizes;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("EventTypes");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::Organizes;
        ref.SourceNodeId = ToNodeId("i=3048");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2041");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2253");
        node.BrowseName = ToQualifiedName("Server");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=85");
        node.ReferenceTypeId = ReferenceId::Organizes;
        node.TypeDefinition = ToNodeId("i=2004");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Server");
        attrs.EventNotifier = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2253");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2254");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2253");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2255");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2253");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2256");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2253");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2267");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2253");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2994");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2253");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2268");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2253");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2274");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2253");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2295");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2253");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2296");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2253");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11715");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2253");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11492");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2254");
        node.BrowseName = ToQualifiedName("ServerArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The list of server URIs used by the server.");
        attrs.DisplayName = LocalizedText("ServerArray");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2255");
        node.BrowseName = ToQualifiedName("NamespaceArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The list of namespace URIs used by the server.");
        attrs.DisplayName = LocalizedText("NamespaceArray");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2256");
        node.BrowseName = ToQualifiedName("ServerStatus");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2138");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The current status of the server.");
        attrs.DisplayName = LocalizedText("ServerStatus");
        attrs.Type = ToNodeId("i=862");
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2256");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2257");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2256");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2258");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2256");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2259");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2256");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2260");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2256");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2992");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2256");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2993");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2257");
        node.BrowseName = ToQualifiedName("StartTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2256");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("StartTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2258");
        node.BrowseName = ToQualifiedName("CurrentTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2256");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2259");
        node.BrowseName = ToQualifiedName("State");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2256");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("State");
        attrs.Type = ToNodeId("i=852");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2260");
        node.BrowseName = ToQualifiedName("BuildInfo");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2256");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=3051");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildInfo");
        attrs.Type = ToNodeId("i=338");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2260");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2262");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2260");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2263");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2260");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2261");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2260");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2264");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2260");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2265");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2260");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2266");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2262");
        node.BrowseName = ToQualifiedName("ProductUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2260");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProductUri");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2263");
        node.BrowseName = ToQualifiedName("ManufacturerName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2260");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ManufacturerName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2261");
        node.BrowseName = ToQualifiedName("ProductName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2260");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProductName");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2264");
        node.BrowseName = ToQualifiedName("SoftwareVersion");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2260");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SoftwareVersion");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2265");
        node.BrowseName = ToQualifiedName("BuildNumber");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2260");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildNumber");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2266");
        node.BrowseName = ToQualifiedName("BuildDate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2260");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildDate");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2992");
        node.BrowseName = ToQualifiedName("SecondsTillShutdown");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2256");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecondsTillShutdown");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2993");
        node.BrowseName = ToQualifiedName("ShutdownReason");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2256");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ShutdownReason");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2267");
        node.BrowseName = ToQualifiedName("ServiceLevel");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A value indicating the level of service the server can provide. 255 indicates the best.");
        attrs.DisplayName = LocalizedText("ServiceLevel");
        attrs.Type = ObjectId::Byte;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2994");
        node.BrowseName = ToQualifiedName("Auditing");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A flag indicating whether the server is currently generating audit events.");
        attrs.DisplayName = LocalizedText("Auditing");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        attrs.MinimumSamplingInterval = 1000;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2268");
        node.BrowseName = ToQualifiedName("ServerCapabilities");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2013");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Describes capabilities supported by the server.");
        attrs.DisplayName = LocalizedText("ServerCapabilities");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2268");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2269");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2268");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2271");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2268");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2272");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2268");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2735");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2268");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2736");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2268");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2737");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2268");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3704");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2268");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11702");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2268");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11703");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2268");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11704");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2268");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2996");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2268");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2997");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2269");
        node.BrowseName = ToQualifiedName("ServerProfileArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of profiles supported by the server.");
        attrs.DisplayName = LocalizedText("ServerProfileArray");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2271");
        node.BrowseName = ToQualifiedName("LocaleIdArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of locales supported by the server.");
        attrs.DisplayName = LocalizedText("LocaleIdArray");
        attrs.Type = ToNodeId("i=295");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2272");
        node.BrowseName = ToQualifiedName("MinSupportedSampleRate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The minimum sampling interval supported by the server.");
        attrs.DisplayName = LocalizedText("MinSupportedSampleRate");
        attrs.Type = ToNodeId("i=290");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2735");
        node.BrowseName = ToQualifiedName("MaxBrowseContinuationPoints");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of continuation points for Browse operations per session.");
        attrs.DisplayName = LocalizedText("MaxBrowseContinuationPoints");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2736");
        node.BrowseName = ToQualifiedName("MaxQueryContinuationPoints");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of continuation points for Query operations per session.");
        attrs.DisplayName = LocalizedText("MaxQueryContinuationPoints");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2737");
        node.BrowseName = ToQualifiedName("MaxHistoryContinuationPoints");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of continuation points for ReadHistory operations per session.");
        attrs.DisplayName = LocalizedText("MaxHistoryContinuationPoints");
        attrs.Type = ObjectId::UInt16;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3704");
        node.BrowseName = ToQualifiedName("SoftwareCertificates");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The software certificates owned by the server.");
        attrs.DisplayName = LocalizedText("SoftwareCertificates");
        attrs.Type = ToNodeId("i=344");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11702");
        node.BrowseName = ToQualifiedName("MaxArrayLength");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum length for an array value supported by the server.");
        attrs.DisplayName = LocalizedText("MaxArrayLength");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11703");
        node.BrowseName = ToQualifiedName("MaxStringLength");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum length for a string value supported by the server.");
        attrs.DisplayName = LocalizedText("MaxStringLength");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11704");
        node.BrowseName = ToQualifiedName("OperationLimits");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=11564");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Defines the limits supported by the server for different operations.");
        attrs.DisplayName = LocalizedText("OperationLimits");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11704");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11705");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11704");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12165");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11704");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12166");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11704");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11707");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11704");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12167");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11704");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12168");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11704");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11709");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11704");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11710");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11704");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11711");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11704");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11712");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11704");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11713");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=11704");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11714");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11705");
        node.BrowseName = ToQualifiedName("MaxNodesPerRead");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single Read request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerRead");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12165");
        node.BrowseName = ToQualifiedName("MaxNodesPerHistoryReadData");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single data HistoryRead request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerHistoryReadData");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12166");
        node.BrowseName = ToQualifiedName("MaxNodesPerHistoryReadEvents");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single event HistoryRead request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerHistoryReadEvents");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11707");
        node.BrowseName = ToQualifiedName("MaxNodesPerWrite");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single Write request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerWrite");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12167");
        node.BrowseName = ToQualifiedName("MaxNodesPerHistoryUpdateData");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single data HistoryUpdate request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerHistoryUpdateData");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12168");
        node.BrowseName = ToQualifiedName("MaxNodesPerHistoryUpdateEvents");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single event HistoryUpdate request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerHistoryUpdateEvents");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11709");
        node.BrowseName = ToQualifiedName("MaxNodesPerMethodCall");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single Call request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerMethodCall");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11710");
        node.BrowseName = ToQualifiedName("MaxNodesPerBrowse");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single Browse request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerBrowse");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11711");
        node.BrowseName = ToQualifiedName("MaxNodesPerRegisterNodes");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single RegisterNodes request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerRegisterNodes");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11712");
        node.BrowseName = ToQualifiedName("MaxNodesPerTranslateBrowsePathsToNodeIds");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single TranslateBrowsePathsToNodeIds request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerTranslateBrowsePathsToNodeIds");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11713");
        node.BrowseName = ToQualifiedName("MaxNodesPerNodeManagement");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single AddNodes, AddReferences, DeleteNodes or DeleteReferences request.");
        attrs.DisplayName = LocalizedText("MaxNodesPerNodeManagement");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11714");
        node.BrowseName = ToQualifiedName("MaxMonitoredItemsPerCall");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11704");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("The maximum number of operations in a single MonitoredItem related request.");
        attrs.DisplayName = LocalizedText("MaxMonitoredItemsPerCall");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2996");
        node.BrowseName = ToQualifiedName("ModellingRules");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A folder for the modelling rules supported by the server.");
        attrs.DisplayName = LocalizedText("ModellingRules");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2997");
        node.BrowseName = ToQualifiedName("AggregateFunctions");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2268");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=61");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A folder for the real time aggregates supported by the server.");
        attrs.DisplayName = LocalizedText("AggregateFunctions");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2274");
        node.BrowseName = ToQualifiedName("ServerDiagnostics");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2020");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Reports diagnostics about the server.");
        attrs.DisplayName = LocalizedText("ServerDiagnostics");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2274");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2275");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2274");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2289");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2274");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2290");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2274");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3706");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2274");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2294");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2275");
        node.BrowseName = ToQualifiedName("ServerDiagnosticsSummary");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2274");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2150");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A summary of server level diagnostics.");
        attrs.DisplayName = LocalizedText("ServerDiagnosticsSummary");
        attrs.Type = ToNodeId("i=859");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2275");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2276");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2275");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2277");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2275");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2278");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2275");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2279");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2275");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3705");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2275");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2281");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2275");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2282");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2275");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2284");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2275");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2285");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2275");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2286");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2275");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2287");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2275");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2288");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2276");
        node.BrowseName = ToQualifiedName("ServerViewCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerViewCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2277");
        node.BrowseName = ToQualifiedName("CurrentSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2278");
        node.BrowseName = ToQualifiedName("CumulatedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CumulatedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2279");
        node.BrowseName = ToQualifiedName("SecurityRejectedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityRejectedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3705");
        node.BrowseName = ToQualifiedName("RejectedSessionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RejectedSessionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2281");
        node.BrowseName = ToQualifiedName("SessionTimeoutCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionTimeoutCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2282");
        node.BrowseName = ToQualifiedName("SessionAbortCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionAbortCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2284");
        node.BrowseName = ToQualifiedName("PublishingIntervalCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PublishingIntervalCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2285");
        node.BrowseName = ToQualifiedName("CurrentSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentSubscriptionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2286");
        node.BrowseName = ToQualifiedName("CumulatedSubscriptionCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CumulatedSubscriptionCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2287");
        node.BrowseName = ToQualifiedName("SecurityRejectedRequestsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SecurityRejectedRequestsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2288");
        node.BrowseName = ToQualifiedName("RejectedRequestsCount");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2275");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=63");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RejectedRequestsCount");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2289");
        node.BrowseName = ToQualifiedName("SamplingIntervalDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2274");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2164");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of diagnostics for each sampling interval supported by the server.");
        attrs.DisplayName = LocalizedText("SamplingIntervalDiagnosticsArray");
        attrs.Type = ToNodeId("i=856");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2290");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2274");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2171");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of diagnostics for each active subscription.");
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsArray");
        attrs.Type = ToNodeId("i=874");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3706");
        node.BrowseName = ToQualifiedName("SessionsDiagnosticsSummary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2274");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2026");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("A summary of session level diagnostics.");
        attrs.DisplayName = LocalizedText("SessionsDiagnosticsSummary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3706");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3707");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=3706");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3708");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3707");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3706");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2196");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of diagnostics for each active session.");
        attrs.DisplayName = LocalizedText("SessionDiagnosticsArray");
        attrs.Type = ToNodeId("i=865");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3708");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnosticsArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=3706");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2243");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A list of security related diagnostics for each active session.");
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnosticsArray");
        attrs.Type = ToNodeId("i=868");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2294");
        node.BrowseName = ToQualifiedName("EnabledFlag");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2274");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("If TRUE the diagnostics collection is enabled.");
        attrs.DisplayName = LocalizedText("EnabledFlag");
        attrs.Type = ObjectId::Boolean;
        attrs.Rank = -1;
        attrs.AccessLevel = (VariableAccessLevel) 3;
        attrs.UserAccessLevel = (VariableAccessLevel) 3;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2295");
        node.BrowseName = ToQualifiedName("VendorServerInfo");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2033");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Server information provided by the vendor.");
        attrs.DisplayName = LocalizedText("VendorServerInfo");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2296");
        node.BrowseName = ToQualifiedName("ServerRedundancy");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2034");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Describes the redundancy capabilities of the server.");
        attrs.DisplayName = LocalizedText("ServerRedundancy");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2296");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3709");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2296");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11312");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2296");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11313");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2296");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11314");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3709");
        node.BrowseName = ToQualifiedName("RedundancySupport");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2296");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("Indicates what style of redundancy is supported by the server.");
        attrs.DisplayName = LocalizedText("RedundancySupport");
        attrs.Type = ToNodeId("i=851");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11312");
        node.BrowseName = ToQualifiedName("CurrentServerId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2296");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentServerId");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11313");
        node.BrowseName = ToQualifiedName("RedundantServerArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2296");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RedundantServerArray");
        attrs.Type = ToNodeId("i=853");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11314");
        node.BrowseName = ToQualifiedName("ServerUriArray");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2296");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerUriArray");
        attrs.Type = ObjectId::String;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11715");
        node.BrowseName = ToQualifiedName("Namespaces");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=2253");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=11645");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Describes the namespaces supported by the server.");
        attrs.DisplayName = LocalizedText("Namespaces");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11493");
        node.BrowseName = ToQualifiedName("InputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11492");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("InputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11494");
        node.BrowseName = ToQualifiedName("OutputArguments");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=11492");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OutputArguments");
        attrs.Type = ToNodeId("i=296");
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11737");
        node.BrowseName = ToQualifiedName("BitFieldMaskDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=9");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.Description = LocalizedText("A mask of 32 bits that can be updated individually by using the top 32 bits as a mask.");
        attrs.DisplayName = LocalizedText("BitFieldMaskDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2299");
        node.BrowseName = ToQualifiedName("StateMachineType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("StateMachineType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2299");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2769");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2299");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2770");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2769");
        node.BrowseName = ToQualifiedName("CurrentState");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2299");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2755");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentState");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2769");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3720");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2769");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3720");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2769");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3720");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2770");
        node.BrowseName = ToQualifiedName("LastTransition");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2299");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2762");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("LastTransition");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2770");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3724");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2770");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3724");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2770");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3724");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2755");
        node.BrowseName = ToQualifiedName("StateVariableType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("StateVariableType");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2755");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2756");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2755");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2757");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2755");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2758");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2755");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2759");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2756");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2755");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2756");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2757");
        node.BrowseName = ToQualifiedName("Name");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2755");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Name");
        attrs.Type = ObjectId::QualifiedName;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2757");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2758");
        node.BrowseName = ToQualifiedName("Number");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2755");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Number");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2758");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2759");
        node.BrowseName = ToQualifiedName("EffectiveDisplayName");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2755");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EffectiveDisplayName");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2759");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2762");
        node.BrowseName = ToQualifiedName("TransitionVariableType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=63");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("TransitionVariableType");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2762");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2763");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2762");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2764");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2762");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2765");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2762");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2766");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2762");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11456");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2763");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2762");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2763");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2764");
        node.BrowseName = ToQualifiedName("Name");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2762");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Name");
        attrs.Type = ObjectId::QualifiedName;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2764");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2765");
        node.BrowseName = ToQualifiedName("Number");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2762");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Number");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2765");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2766");
        node.BrowseName = ToQualifiedName("TransitionTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2762");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransitionTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2766");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11456");
        node.BrowseName = ToQualifiedName("EffectiveTransitionTime");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2762");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EffectiveTransitionTime");
        attrs.Type = ToNodeId("i=294");
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=11456");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2771");
        node.BrowseName = ToQualifiedName("FiniteStateMachineType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2299");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("FiniteStateMachineType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2771");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2772");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2771");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2773");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2772");
        node.BrowseName = ToQualifiedName("CurrentState");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2771");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2760");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CurrentState");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2772");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3728");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2772");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3728");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2772");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3728");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2773");
        node.BrowseName = ToQualifiedName("LastTransition");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2771");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2767");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("LastTransition");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2773");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3732");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2773");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=80");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3732");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2773");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3732");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2760");
        node.BrowseName = ToQualifiedName("FiniteStateVariableType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=2755");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("FiniteStateVariableType");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2760");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2761");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2761");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2760");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2761");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2767");
        node.BrowseName = ToQualifiedName("FiniteTransitionVariableType");
        node.Class = NodeClass::VariableType;
        node.ParentNodeId = ToNodeId("i=2762");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        VariableTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("FiniteTransitionVariableType");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2767");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2768");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2768");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2767");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::NodeId;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2768");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2307");
        node.BrowseName = ToQualifiedName("StateType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("StateType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2307");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2308");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2308");
        node.BrowseName = ToQualifiedName("StateNumber");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2307");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("StateNumber");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2308");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2309");
        node.BrowseName = ToQualifiedName("InitialStateType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2307");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("InitialStateType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2310");
        node.BrowseName = ToQualifiedName("TransitionType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=58");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("TransitionType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2310");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2312");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2312");
        node.BrowseName = ToQualifiedName("TransitionNumber");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2310");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TransitionNumber");
        attrs.Type = ObjectId::UInt32;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2312");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2311");
        node.BrowseName = ToQualifiedName("TransitionEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2041");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("TransitionEventType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2311");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2774");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2311");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2775");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=2311");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2776");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2774");
        node.BrowseName = ToQualifiedName("Transition");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2311");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2762");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Transition");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2774");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3754");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2774");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3754");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2774");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3754");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2775");
        node.BrowseName = ToQualifiedName("FromState");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2311");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2755");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("FromState");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2775");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3746");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2775");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3746");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2775");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3746");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2776");
        node.BrowseName = ToQualifiedName("ToState");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2311");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=2755");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ToState");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2776");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=3750");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2776");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=3750");
        node.BrowseName = ToQualifiedName("Id");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2776");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Id");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=3750");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2315");
        node.BrowseName = ToQualifiedName("AuditUpdateStateEventType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeId("i=2127");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        ObjectTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("AuditUpdateStateEventType");
        attrs.IsAbstract = true;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2315");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2777");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=2315");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=2778");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2777");
        node.BrowseName = ToQualifiedName("OldStateId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2315");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("OldStateId");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2777");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=2778");
        node.BrowseName = ToQualifiedName("NewStateId");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=2315");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("NewStateId");
        attrs.Type = ObjectId::String;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=2778");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=338");
        node.BrowseName = ToQualifiedName("BuildInfo");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildInfo");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=851");
        node.BrowseName = ToQualifiedName("RedundancySupport");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=29");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("RedundancySupport");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=851");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7611");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7611");
        node.BrowseName = ToQualifiedName("EnumStrings");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=851");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EnumStrings");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=7611");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=852");
        node.BrowseName = ToQualifiedName("ServerState");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=29");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerState");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=852");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7612");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7612");
        node.BrowseName = ToQualifiedName("EnumStrings");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=852");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EnumStrings");
        attrs.Type = ObjectId::LocalizedText;
        attrs.Rank = 1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasModellingRule;
        ref.SourceNodeId = ToNodeId("i=7612");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=853");
        node.BrowseName = ToQualifiedName("RedundantServerDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("RedundantServerDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11943");
        node.BrowseName = ToQualifiedName("EndpointUrlListDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointUrlListDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11944");
        node.BrowseName = ToQualifiedName("NetworkGroupDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("NetworkGroupDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=856");
        node.BrowseName = ToQualifiedName("SamplingIntervalDiagnosticsDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SamplingIntervalDiagnosticsDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=859");
        node.BrowseName = ToQualifiedName("ServerDiagnosticsSummaryDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerDiagnosticsSummaryDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=862");
        node.BrowseName = ToQualifiedName("ServerStatusDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerStatusDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=865");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionDiagnosticsDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=868");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnosticsDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnosticsDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=871");
        node.BrowseName = ToQualifiedName("ServiceCounterDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ServiceCounterDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=299");
        node.BrowseName = ToQualifiedName("StatusResult");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("StatusResult");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=874");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=877");
        node.BrowseName = ToQualifiedName("ModelChangeStructureDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("ModelChangeStructureDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=897");
        node.BrowseName = ToQualifiedName("SemanticChangeStructureDataType");
        node.Class = NodeClass::DataType;
        node.ParentNodeId = ToNodeId("i=22");
        node.ReferenceTypeId = ReferenceId::HasSubtype;
        DataTypeAttributes attrs;
        attrs.DisplayName = LocalizedText("SemanticChangeStructureDataType");
        attrs.IsAbstract = false;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=339");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=338");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=339");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8327");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=854");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=853");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=854");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8843");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11949");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=11943");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=11949");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11951");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11950");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=11944");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=11950");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11954");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=857");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=856");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=857");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8846");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=860");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=859");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=860");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8849");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=863");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=862");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=863");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8852");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=866");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=865");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=866");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8855");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=869");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=868");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=869");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8858");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=872");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=871");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=872");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8861");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=300");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=299");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=300");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8294");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=875");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=874");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=875");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8864");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=878");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=877");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=878");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8867");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=898");
        node.BrowseName = ToQualifiedName("Default XML");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=897");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default XML");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=898");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8870");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8252");
        node.BrowseName = ToQualifiedName("Opc.Ua");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=92");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=72");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Opc.Ua");
        attrs.Type = ObjectId::ByteString;
        attrs.Value = +""PHhzOnNjaGVtYQ0KICB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEi"
"DQogIHhtbG5zOnVhPSJodHRwOi8vb3BjZm91bmRhdGlvbi5vcmcvVUEvMjAwOC8wMi9UeXBlcy54"
"c2QiDQogIHhtbG5zOnRucz0iaHR0cDovL29wY2ZvdW5kYXRpb24ub3JnL1VBLzIwMDgvMDIvVHlw"
"ZXMueHNkIg0KICB0YXJnZXROYW1lc3BhY2U9Imh0dHA6Ly9vcGNmb3VuZGF0aW9uLm9yZy9VQS8y"
"MDA4LzAyL1R5cGVzLnhzZCINCiAgZWxlbWVudEZvcm1EZWZhdWx0PSJxdWFsaWZpZWQiDQo+DQog"
"IDx4czplbGVtZW50IG5hbWU9IkJvb2xlYW4iIG5pbGxhYmxlPSJ0cnVlIiB0eXBlPSJ4czpib29s"
"ZWFuIiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJMaXN0T2ZCb29sZWFuIj4NCiAgICA8"
"eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJCb29sZWFuIiB0eXBlPSJ4czpi"
"b29sZWFuIiBtaW5PY2N1cnM9IjAiIG1heE9jY3Vycz0idW5ib3VuZGVkIiAvPg0KICAgIDwveHM6"
"c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ikxpc3RP"
"ZkJvb2xlYW4iIHR5cGU9InRuczpMaXN0T2ZCb29sZWFuIiBuaWxsYWJsZT0idHJ1ZSI+PC94czpl"
"bGVtZW50Pg0KDQogIDx4czplbGVtZW50IG5hbWU9IlNCeXRlIiBuaWxsYWJsZT0idHJ1ZSIgdHlw"
"ZT0ieHM6Ynl0ZSIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTGlzdE9mU0J5dGUiPg0K"
"ICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlNCeXRlIiB0eXBlPSJ4"
"czpieXRlIiBtaW5PY2N1cnM9IjAiIG1heE9jY3Vycz0idW5ib3VuZGVkIiAvPg0KICAgIDwveHM6"
"c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ikxpc3RP"
"ZlNCeXRlIiB0eXBlPSJ0bnM6TGlzdE9mU0J5dGUiIG5pbGxhYmxlPSJ0cnVlIj48L3hzOmVsZW1l"
"bnQ+DQoNCiAgPHhzOmVsZW1lbnQgbmFtZT0iQnl0ZSIgbmlsbGFibGU9InRydWUiIHR5cGU9Inhz"
"OnVuc2lnbmVkQnl0ZSIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTGlzdE9mQnl0ZSI+"
"DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iQnl0ZSIgdHlwZT0i"
"eHM6dW5zaWduZWRCeXRlIiBtaW5PY2N1cnM9IjAiIG1heE9jY3Vycz0idW5ib3VuZGVkIiAvPg0K"
"ICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5h"
"bWU9Ikxpc3RPZkJ5dGUiIHR5cGU9InRuczpMaXN0T2ZCeXRlIiBuaWxsYWJsZT0idHJ1ZSI+PC94"
"czplbGVtZW50Pg0KDQogIDx4czplbGVtZW50IG5hbWU9IkludDE2IiBuaWxsYWJsZT0idHJ1ZSIg"
"dHlwZT0ieHM6c2hvcnQiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxpc3RPZkludDE2"
"Ij4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJJbnQxNiIgdHlw"
"ZT0ieHM6c2hvcnQiIG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIC8+DQogICAg"
"PC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0i"
"TGlzdE9mSW50MTYiIHR5cGU9InRuczpMaXN0T2ZJbnQxNiIgbmlsbGFibGU9InRydWUiPjwveHM6"
"ZWxlbWVudD4NCg0KICA8eHM6ZWxlbWVudCBuYW1lPSJVSW50MTYiIG5pbGxhYmxlPSJ0cnVlIiB0"
"eXBlPSJ4czp1bnNpZ25lZFNob3J0IiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJMaXN0"
"T2ZVSW50MTYiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlVJ"
"bnQxNiIgdHlwZT0ieHM6dW5zaWduZWRTaG9ydCIgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVu"
"Ym91bmRlZCIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8"
"eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZVSW50MTYiIHR5cGU9InRuczpMaXN0T2ZVSW50MTYiIG5p"
"bGxhYmxlPSJ0cnVlIj48L3hzOmVsZW1lbnQ+DQoNCiAgPHhzOmVsZW1lbnQgbmFtZT0iSW50MzIi"
"IG5pbGxhYmxlPSJ0cnVlIiB0eXBlPSJ4czppbnQiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5h"
"bWU9Ikxpc3RPZkludDMyIj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBu"
"YW1lPSJJbnQzMiIgdHlwZT0ieHM6aW50IiBtaW5PY2N1cnM9IjAiIG1heE9jY3Vycz0idW5ib3Vu"
"ZGVkIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czpl"
"bGVtZW50IG5hbWU9Ikxpc3RPZkludDMyIiB0eXBlPSJ0bnM6TGlzdE9mSW50MzIiIG5pbGxhYmxl"
"PSJ0cnVlIj48L3hzOmVsZW1lbnQ+DQoNCiAgPHhzOmVsZW1lbnQgbmFtZT0iVUludDMyIiBuaWxs"
"YWJsZT0idHJ1ZSIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBl"
"IG5hbWU9Ikxpc3RPZlVJbnQzMiI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1l"
"bnQgbmFtZT0iVUludDMyIiB0eXBlPSJ4czp1bnNpZ25lZEludCIgbWluT2NjdXJzPSIwIiBtYXhP"
"Y2N1cnM9InVuYm91bmRlZCIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhU"
"eXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZVSW50MzIiIHR5cGU9InRuczpMaXN0T2ZV"
"SW50MzIiIG5pbGxhYmxlPSJ0cnVlIj48L3hzOmVsZW1lbnQ+DQoNCiAgPHhzOmVsZW1lbnQgbmFt"
"ZT0iSW50NjQiIG5pbGxhYmxlPSJ0cnVlIiB0eXBlPSJ4czpsb25nIiAvPg0KDQogIDx4czpjb21w"
"bGV4VHlwZSBuYW1lPSJMaXN0T2ZJbnQ2NCI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iSW50NjQiIHR5cGU9InhzOmxvbmciIG1pbk9jY3Vycz0iMCIgbWF4T2Nj"
"dXJzPSJ1bmJvdW5kZWQiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlw"
"ZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTGlzdE9mSW50NjQiIHR5cGU9InRuczpMaXN0T2ZJbnQ2"
"NCIgbmlsbGFibGU9InRydWUiPjwveHM6ZWxlbWVudD4NCg0KICA8eHM6ZWxlbWVudCBuYW1lPSJV"
"SW50NjQiIG5pbGxhYmxlPSJ0cnVlIiB0eXBlPSJ4czp1bnNpZ25lZExvbmciIC8+DQoNCiAgPHhz"
"OmNvbXBsZXhUeXBlIG5hbWU9Ikxpc3RPZlVJbnQ2NCI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAg"
"ICAgPHhzOmVsZW1lbnQgbmFtZT0iVUludDY0IiB0eXBlPSJ4czp1bnNpZ25lZExvbmciIG1pbk9j"
"Y3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAg"
"PC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTGlzdE9mVUludDY0IiB0eXBl"
"PSJ0bnM6TGlzdE9mVUludDY0IiBuaWxsYWJsZT0idHJ1ZSI+PC94czplbGVtZW50Pg0KDQogIDx4"
"czplbGVtZW50IG5hbWU9IkZsb2F0IiBuaWxsYWJsZT0idHJ1ZSIgdHlwZT0ieHM6ZmxvYXQiIC8+"
"DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxpc3RPZkZsb2F0Ij4NCiAgICA8eHM6c2VxdWVu"
"Y2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJGbG9hdCIgdHlwZT0ieHM6ZmxvYXQiIG1pbk9j"
"Y3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAg"
"PC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTGlzdE9mRmxvYXQiIHR5cGU9"
"InRuczpMaXN0T2ZGbG9hdCIgbmlsbGFibGU9InRydWUiPjwveHM6ZWxlbWVudD4NCg0KICA8eHM6"
"ZWxlbWVudCBuYW1lPSJEb3VibGUiIG5pbGxhYmxlPSJ0cnVlIiB0eXBlPSJ4czpkb3VibGUiIC8+"
"DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxpc3RPZkRvdWJsZSI+DQogICAgPHhzOnNlcXVl"
"bmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRG91YmxlIiB0eXBlPSJ4czpkb3VibGUiIG1p"
"bk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIC8+DQogICAgPC94czpzZXF1ZW5jZT4N"
"CiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTGlzdE9mRG91YmxlIiB0"
"eXBlPSJ0bnM6TGlzdE9mRG91YmxlIiBuaWxsYWJsZT0idHJ1ZSI+PC94czplbGVtZW50Pg0KDQog"
"IDx4czplbGVtZW50IG5hbWU9IlN0cmluZyIgbmlsbGFibGU9InRydWUiIHR5cGU9InhzOnN0cmlu"
"ZyIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTGlzdE9mU3RyaW5nIj4NCiAgICA8eHM6"
"c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTdHJpbmciIHR5cGU9InhzOnN0cmlu"
"ZyIgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRlZCIgLz4NCiAgICA8L3hzOnNlcXVl"
"bmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZTdHJp"
"bmciIHR5cGU9InRuczpMaXN0T2ZTdHJpbmciIG5pbGxhYmxlPSJ0cnVlIj48L3hzOmVsZW1lbnQ+"
"DQoNCiAgPHhzOmVsZW1lbnQgbmFtZT0iRGF0ZVRpbWUiIG5pbGxhYmxlPSJ0cnVlIiB0eXBlPSJ4"
"czpkYXRlVGltZSIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTGlzdE9mRGF0ZVRpbWUi"
"Pg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkRhdGVUaW1lIiB0"
"eXBlPSJ4czpkYXRlVGltZSIgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRlZCIgLz4N"
"CiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBu"
"YW1lPSJMaXN0T2ZEYXRlVGltZSIgdHlwZT0idG5zOkxpc3RPZkRhdGVUaW1lIiBuaWxsYWJsZT0i"
"dHJ1ZSI+PC94czplbGVtZW50Pg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJHdWlkIj4NCiAg"
"ICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czphcHBpbmZvPg0KICAgICAgICA8SXNWYWx1ZVR5"
"cGUgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vMjAwMy8xMC9TZXJpYWxpemF0"
"aW9uLyI+dHJ1ZTwvSXNWYWx1ZVR5cGU+DQogICAgICA8L3hzOmFwcGluZm8+DQogICAgPC94czph"
"bm5vdGF0aW9uPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlN0"
"cmluZyIgdHlwZT0ieHM6c3RyaW5nIiBtaW5PY2N1cnM9IjAiIG1heE9jY3Vycz0iMSIgbmlsbGFi"
"bGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAg"
"PHhzOmVsZW1lbnQgbmFtZT0iR3VpZCIgdHlwZT0idG5zOkd1aWQiIG5pbGxhYmxlPSJ0cnVlIj48"
"L3hzOmVsZW1lbnQ+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxpc3RPZkd1aWQiPg0KICAg"
"IDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ikd1aWQiIHR5cGU9InRuczpH"
"dWlkIiBtaW5PY2N1cnM9IjAiIG1heE9jY3Vycz0idW5ib3VuZGVkIiAvPg0KICAgIDwveHM6c2Vx"
"dWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ikxpc3RPZkd1"
"aWQiIHR5cGU9InRuczpMaXN0T2ZHdWlkIiBuaWxsYWJsZT0idHJ1ZSI+PC94czplbGVtZW50Pg0K"
"DQogIDx4czplbGVtZW50IG5hbWU9IkJ5dGVTdHJpbmciIG5pbGxhYmxlPSJ0cnVlIiB0eXBlPSJ4"
"czpiYXNlNjRCaW5hcnkiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxpc3RPZkJ5dGVT"
"dHJpbmciPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkJ5dGVT"
"dHJpbmciIHR5cGU9InhzOmJhc2U2NEJpbmFyeSIgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVu"
"Ym91bmRlZCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpj"
"b21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTGlzdE9mQnl0ZVN0cmluZyIgdHlwZT0i"
"dG5zOkxpc3RPZkJ5dGVTdHJpbmciIG5pbGxhYmxlPSJ0cnVlIj48L3hzOmVsZW1lbnQ+DQoNCiAg"
"PHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxpc3RPZlhtbEVsZW1lbnQiPg0KICAgIDx4czpzZXF1ZW5j"
"ZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlhtbEVsZW1lbnQiIG1pbk9jY3Vycz0iMCIgbWF4"
"T2NjdXJzPSJ1bmJvdW5kZWQiIG5pbGxhYmxlPSJ0cnVlIj4NCiAgICAgICAgPHhzOmNvbXBsZXhU"
"eXBlPg0KICAgICAgICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgICAgICAgIDx4czphbnkgbWluT2Nj"
"dXJzPSIwIiBwcm9jZXNzQ29udGVudHM9ImxheCIvPg0KICAgICAgICAgIDwveHM6c2VxdWVuY2U+"
"DQogICAgICAgIDwveHM6Y29tcGxleFR5cGU+DQogICAgICA8L3hzOmVsZW1lbnQ+DQogICAgPC94"
"czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTGlz"
"dE9mWG1sRWxlbWVudCIgdHlwZT0idG5zOkxpc3RPZlhtbEVsZW1lbnQiIG5pbGxhYmxlPSJ0cnVl"
"Ij48L3hzOmVsZW1lbnQ+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ik5vZGVJZCI+DQogICAg"
"PHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iSWRlbnRpZmllciIgdHlwZT0i"
"eHM6c3RyaW5nIiBtaW5PY2N1cnM9IjAiIG1heE9jY3Vycz0iMSIgbmlsbGFibGU9InRydWUiIC8+"
"DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQg"
"bmFtZT0iTm9kZUlkIiB0eXBlPSJ0bnM6Tm9kZUlkIiBuaWxsYWJsZT0idHJ1ZSI+PC94czplbGVt"
"ZW50Pg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJMaXN0T2ZOb2RlSWQiPg0KICAgIDx4czpz"
"ZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik5vZGVJZCIgdHlwZT0idG5zOk5vZGVJ"
"ZCIgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRlZCIgbmlsbGFibGU9InRydWUiIC8+"
"DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQg"
"bmFtZT0iTGlzdE9mTm9kZUlkIiB0eXBlPSJ0bnM6TGlzdE9mTm9kZUlkIiBuaWxsYWJsZT0idHJ1"
"ZSI+PC94czplbGVtZW50Pg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJFeHBhbmRlZE5vZGVJ"
"ZCI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iSWRlbnRpZmll"
"ciIgdHlwZT0ieHM6c3RyaW5nIiBtaW5PY2N1cnM9IjAiIG1heE9jY3Vycz0iMSIgbmlsbGFibGU9"
"InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhz"
"OmVsZW1lbnQgbmFtZT0iRXhwYW5kZWROb2RlSWQiIHR5cGU9InRuczpFeHBhbmRlZE5vZGVJZCIg"
"bmlsbGFibGU9InRydWUiPjwveHM6ZWxlbWVudD4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0i"
"TGlzdE9mRXhwYW5kZWROb2RlSWQiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVt"
"ZW50IG5hbWU9IkV4cGFuZGVkTm9kZUlkIiB0eXBlPSJ0bnM6RXhwYW5kZWROb2RlSWQiIG1pbk9j"
"Y3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwv"
"eHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ikxp"
"c3RPZkV4cGFuZGVkTm9kZUlkIiB0eXBlPSJ0bnM6TGlzdE9mRXhwYW5kZWROb2RlSWQiIG5pbGxh"
"YmxlPSJ0cnVlIj48L3hzOmVsZW1lbnQ+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IlN0YXR1"
"c0NvZGUiPg0KICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmFwcGluZm8+DQogICAgICAg"
"IDxJc1ZhbHVlVHlwZSB4bWxucz0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS8yMDAzLzEw"
"L1NlcmlhbGl6YXRpb24vIj50cnVlPC9Jc1ZhbHVlVHlwZT4NCiAgICAgIDwveHM6YXBwaW5mbz4N"
"CiAgICA8L3hzOmFubm90YXRpb24+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1l"
"bnQgbmFtZT0iQ29kZSIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAg"
"ICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1l"
"PSJTdGF0dXNDb2RlIiB0eXBlPSJ0bnM6U3RhdHVzQ29kZSIgbmlsbGFibGU9InRydWUiPjwveHM6"
"ZWxlbWVudD4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTGlzdE9mU3RhdHVzQ29kZSI+DQog"
"ICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iU3RhdHVzQ29kZSIgdHlw"
"ZT0idG5zOlN0YXR1c0NvZGUiIG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIC8+"
"DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQg"
"bmFtZT0iTGlzdE9mU3RhdHVzQ29kZSIgdHlwZT0idG5zOkxpc3RPZlN0YXR1c0NvZGUiIG5pbGxh"
"YmxlPSJ0cnVlIj48L3hzOmVsZW1lbnQ+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IkRpYWdu"
"b3N0aWNJbmZvIj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJT"
"eW1ib2xpY0lkIiB0eXBlPSJ4czppbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVt"
"ZW50IG5hbWU9Ik5hbWVzcGFjZVVyaSIgdHlwZT0ieHM6aW50IiBtaW5PY2N1cnM9IjAiIC8+DQog"
"ICAgICA8eHM6ZWxlbWVudCBuYW1lPSJMb2NhbGUiIHR5cGU9InhzOmludCIgbWluT2NjdXJzPSIw"
"IiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iTG9jYWxpemVkVGV4dCIgdHlwZT0ieHM6aW50"
"IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJBZGRpdGlvbmFsSW5m"
"byIgdHlwZT0ieHM6c3RyaW5nIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBu"
"YW1lPSJJbm5lclN0YXR1c0NvZGUiIHR5cGU9InRuczpTdGF0dXNDb2RlIiBtaW5PY2N1cnM9IjAi"
"IC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJJbm5lckRpYWdub3N0aWNJbmZvIiB0eXBlPSJ0"
"bnM6RGlhZ25vc3RpY0luZm8iIG1pbk9jY3Vycz0iMCIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0K"
"ICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJEaWFnbm9zdGljSW5mbyIg"
"dHlwZT0idG5zOkRpYWdub3N0aWNJbmZvIiBuaWxsYWJsZT0idHJ1ZSI+PC94czplbGVtZW50Pg0K"
"DQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJMaXN0T2ZEaWFnbm9zdGljSW5mbyI+DQogICAgPHhz"
"OnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRGlhZ25vc3RpY0luZm8iIHR5cGU9"
"InRuczpEaWFnbm9zdGljSW5mbyIgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRlZCIg"
"bmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlw"
"ZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTGlzdE9mRGlhZ25vc3RpY0luZm8iIHR5cGU9InRuczpM"
"aXN0T2ZEaWFnbm9zdGljSW5mbyIgbmlsbGFibGU9InRydWUiPjwveHM6ZWxlbWVudD4NCg0KICA8"
"eHM6Y29tcGxleFR5cGUgbmFtZT0iTG9jYWxpemVkVGV4dCI+DQogICAgPHhzOnNlcXVlbmNlPg0K"
"ICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iTG9jYWxlIiB0eXBlPSJ4czpzdHJpbmciIG1pbk9jY3Vy"
"cz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJUZXh0IiB0"
"eXBlPSJ4czpzdHJpbmciIG1pbk9jY3Vycz0iMCIgIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwv"
"eHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ikxv"
"Y2FsaXplZFRleHQiIHR5cGU9InRuczpMb2NhbGl6ZWRUZXh0IiBuaWxsYWJsZT0idHJ1ZSIgLz4N"
"Cg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTGlzdE9mTG9jYWxpemVkVGV4dCI+DQogICAgPHhz"
"OnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iTG9jYWxpemVkVGV4dCIgdHlwZT0i"
"dG5zOkxvY2FsaXplZFRleHQiIG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIG5p"
"bGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+"
"DQogIDx4czplbGVtZW50IG5hbWU9Ikxpc3RPZkxvY2FsaXplZFRleHQiIHR5cGU9InRuczpMaXN0"
"T2ZMb2NhbGl6ZWRUZXh0IiBuaWxsYWJsZT0idHJ1ZSI+PC94czplbGVtZW50Pg0KDQogIDx4czpj"
"b21wbGV4VHlwZSBuYW1lPSJRdWFsaWZpZWROYW1lIj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAg"
"ICA8eHM6ZWxlbWVudCBuYW1lPSJOYW1lc3BhY2VJbmRleCIgdHlwZT0ieHM6dW5zaWduZWRTaG9y"
"dCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iTmFtZSIgdHlwZT0i"
"eHM6c3RyaW5nIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2Vx"
"dWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IlF1YWxpZmll"
"ZE5hbWUiIHR5cGU9InRuczpRdWFsaWZpZWROYW1lIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCg0KICA8"
"eHM6Y29tcGxleFR5cGUgbmFtZT0iTGlzdE9mUXVhbGlmaWVkTmFtZSI+DQogICAgPHhzOnNlcXVl"
"bmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUXVhbGlmaWVkTmFtZSIgdHlwZT0idG5zOlF1"
"YWxpZmllZE5hbWUiIG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIG5pbGxhYmxl"
"PSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4"
"czplbGVtZW50IG5hbWU9Ikxpc3RPZlF1YWxpZmllZE5hbWUiIHR5cGU9InRuczpMaXN0T2ZRdWFs"
"aWZpZWROYW1lIiBuaWxsYWJsZT0idHJ1ZSI+PC94czplbGVtZW50Pg0KDQogIDwhLS0NCiAgICBT"
"b21lIGVudmlyb25tZW50cyByZXF1aXJlIGEgV1NETC9YU0Qgd2hpY2ggZXhwbGljaXRseSBkZWZp"
"bmVzIGFsbCBwb3NzaWJsZSB0eXBlcy4NCiAgICBUaGUgVUEgV1NETC9YU0QgY2FuIGJlIG1vZGlm"
"aWVkIHRvIHN1cHBvcnQgdGhlc2UgZW52aXJvbm1lbnRzIGJ5IHJlcGxhY2luZyB0aGUNCiAgICBk"
"ZWZpbml0aW9ucyBvZiB0aGUgRXh0ZW5zaW9uT2JqZWN0Qm9keSBhbmQgVmFyaWFudFZhbHVlIGNv"
"bXBsZXggdHlwZXMgd2l0aCB0aGUNCiAgICBkZWZpbml0aW9ucyBpbiB0aGUgY29tbWVudHMgc2hv"
"d24gaGVyZS4gRGV2ZWxvcGVycyB3b3VsZCB0aGVuIGRlZmluZSBzdWJ0eXBlcw0KICAgIG9mIHRo"
"ZSBFeHRlbnNpb25PYmplY3RCb2R5IHR5cGUgd2hpY2ggZXhwbGljaXRseSBkZWNsYXJlIGEgY2hv"
"aWNlIGJldHdlZW4gYWxsIG9mIHRoZQ0KICAgIGNvbXBsZXggdHlwZXMgdXNlZCBieSB0aGUgc3lz"
"dGVtLiBUaGUgRXhhbXBsZUV4dGVuc2lvbk9iamVjdEJvZHkgc3VidHlwZSBpcyBwcm92aWRlcw0K"
"ICAgIGEgdGVtcGxhdGUgYmFzZWQgb24gYSBmZXcgY29tbW9uIFVBLWRlZmluZWQgY29tcGxleCB0"
"eXBlcy4NCiAgICAtLT4NCg0KICA8IS0tDQogICAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IkV4dGVu"
"c2lvbk9iamVjdEJvZHkiIC8+DQoNCiAgICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iRXhhbXBsZUV4"
"dGVuc2lvbk9iamVjdEJvZHkiPg0KICAgICAgPHhzOmNvbXBsZXhDb250ZW50Pg0KICAgICAgICA8"
"eHM6ZXh0ZW5zaW9uIGJhc2U9InRuczpFeHRlbnNpb25PYmplY3RCb2R5Ij4NCiAgICAgICAgICA8"
"eHM6Y2hvaWNlPg0KICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iQXJndW1lbnQiIHR5cGU9"
"InRuczpBcmd1bWVudCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgICAg"
"ICAgIDx4czplbGVtZW50IG5hbWU9IlVzZXJJZGVudGl0eVRva2VuIiB0eXBlPSJ0bnM6VXNlcklk"
"ZW50aXR5VG9rZW4iIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICAgICAg"
"ICA8eHM6ZWxlbWVudCBuYW1lPSJVc2VyTmFtZUlkZW50aXR5VG9rZW4iIHR5cGU9InRuczpVc2Vy"
"TmFtZUlkZW50aXR5VG9rZW4iIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAg"
"ICAgICAgPC94czpjaG9pY2U+DQogICAgICAgIDwveHM6ZXh0ZW5zaW9uPg0KICAgICAgPC94czpj"
"b21wbGV4Q29udGVudD4NCiAgICA8L3hzOmNvbXBsZXhUeXBlPg0KDQogICAgPHhzOmNvbXBsZXhU"
"eXBlIG5hbWU9IkV4dGVuc2lvbk9iamVjdCI+DQogICAgICA8eHM6c2VxdWVuY2U+DQogICAgICAg"
"IDx4czplbGVtZW50IG5hbWU9IlR5cGVJZCIgdHlwZT0idG5zOkV4cGFuZGVkTm9kZUlkIiBtaW5P"
"Y2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJC"
"b2R5IiBtaW5PY2N1cnM9IjAiIHR5cGU9InRuczpFeHRlbnNpb25PYmplY3RCb2R5IiBuaWxsYWJs"
"ZT0idHJ1ZSIgLz4NCiAgICAgIDwveHM6c2VxdWVuY2U+DQogICAgPC94czpjb21wbGV4VHlwZT4N"
"CiAgICA8eHM6ZWxlbWVudCBuYW1lPSJFeHRlbnNpb25PYmplY3QiIHR5cGU9InRuczpFeHRlbnNp"
"b25PYmplY3QiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIC0tPg0KDQogIDx4czpjb21wbGV4VHlw"
"ZSBuYW1lPSJFeHRlbnNpb25PYmplY3QiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czpl"
"bGVtZW50IG5hbWU9IlR5cGVJZCIgdHlwZT0idG5zOk5vZGVJZCIgbWluT2NjdXJzPSIwIiBuaWxs"
"YWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkJvZHkiIG1pbk9jY3Vycz0i"
"MCIgbmlsbGFibGU9InRydWUiPg0KICAgICAgICA8eHM6Y29tcGxleFR5cGU+DQogICAgICAgICAg"
"PHhzOnNlcXVlbmNlPg0KICAgICAgICAgICAgPHhzOmFueSBtaW5PY2N1cnM9IjAiIHByb2Nlc3ND"
"b250ZW50cz0ibGF4Ii8+DQogICAgICAgICAgPC94czpzZXF1ZW5jZT4NCiAgICAgICAgPC94czpj"
"b21wbGV4VHlwZT4NCiAgICAgIDwveHM6ZWxlbWVudD4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8"
"L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJFeHRlbnNpb25PYmplY3QiIHR5"
"cGU9InRuczpFeHRlbnNpb25PYmplY3QiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KDQogIDx4czpjb21w"
"bGV4VHlwZSBuYW1lPSJMaXN0T2ZFeHRlbnNpb25PYmplY3QiPg0KICAgIDx4czpzZXF1ZW5jZT4N"
"CiAgICAgIDx4czplbGVtZW50IG5hbWU9IkV4dGVuc2lvbk9iamVjdCIgdHlwZT0idG5zOkV4dGVu"
"c2lvbk9iamVjdCIgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRlZCIgbmlsbGFibGU9"
"InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhz"
"OmVsZW1lbnQgbmFtZT0iTGlzdE9mRXh0ZW5zaW9uT2JqZWN0IiB0eXBlPSJ0bnM6TGlzdE9mRXh0"
"ZW5zaW9uT2JqZWN0IiBuaWxsYWJsZT0idHJ1ZSI+PC94czplbGVtZW50Pg0KDQogIDwhLS0NCiAg"
"ICBTb21lIFdTREwvWE1MIGNvbXBpbGVycyBoYXZlIGlzc3VlcyB3aXRoIHRoZSB4czpjaG9pY2Ug"
"Y29uc3RydWN0LiBGb3IgdGhhdCByZWFzb24NCiAgICB0aGUgZGVmYXVsdCBkZWNsYXJhdGlvbiBv"
"ZiBhIFZhcmlhbnQgdXNlcyB4czphbnkgY29uc3RydWN0LiBUaGUgc2NoZW1hIGFjdXR1YWxseQ0K"
"ICAgIGRlZmluZWQgYnkgdGhlIHNwZWNpZmljYXRpb24gaXMgcHJvdmlkZWQgYnkgdGhlIE1hdHJp"
"eCBhbmQgVmFyaWFudFZhbHVlIGNvbXBsZXggdHlwZXMNCiAgICBzaG93biBpbiBjb21tZW50cyBi"
"ZWxvdy4gQXBwbGljYXRpb24gZGV2ZWxvcGVycyBjYW4gcmVwbGFjZSB0aGUgVmFyaWFudFZhbHVl"
"IGRlY2xhcmF0aW9uDQogICAgd2l0aCB0aGUgc3BlY2lmaWMgZGVjbGFyYXRpb24gaWYgdGhleSBo"
"YXZlIGEgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnQgdGhhdCBjYW4gaGFuZGxlDQogICAgdGhlIHhz"
"OmNob2ljZSBjb25zdHJ1Y3QgaW4gYSByZWFzb25hYmxlIHdheS4NCiAgICAtLT4NCg0KICA8IS0t"
"DQogICAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ik1hdHJpeCI+DQogICAgICA8eHM6c2VxdWVuY2U+"
"DQogICAgICAgIDx4czplbGVtZW50IG5hbWU9IkRpbWVuc2lvbnMiIHR5cGU9InRuczpMaXN0T2ZV"
"SW50MzIiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICAgIDx4czplbGVt"
"ZW50IG5hbWU9IlZhbHVlIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIj4NCiAgICAgICAg"
"ICA8eHM6Y29tcGxleFR5cGUgbWl4ZWQ9ImZhbHNlIj4NCiAgICAgICAgICAgIDx4czpjaG9pY2Ug"
"bWF4T2NjdXJzPSJ1bmJvdW5kZWQiPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJC"
"b29sZWFuIiB0eXBlPSJ4czpib29sZWFuIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgICAg"
"IDx4czplbGVtZW50IG5hbWU9IlNCeXRlIiB0eXBlPSJ4czpieXRlIiBtaW5PY2N1cnM9IjAiIC8+"
"DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IkJ5dGUiIHR5cGU9InhzOnVuc2lnbmVk"
"Qnl0ZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJJ"
"bnQxNiIgdHlwZT0ieHM6c2hvcnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iVUludDE2IiB0eXBlPSJ4czp1bnNpZ25lZFNob3J0IiBtaW5PY2N1cnM9"
"IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IkludDMyIiB0eXBlPSJ4czpp"
"bnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iVUlu"
"dDMyIiB0eXBlPSJ4czp1bnNpZ25lZEludCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAg"
"ICA8eHM6ZWxlbWVudCBuYW1lPSJJbnQ2NCIgdHlwZT0ieHM6bG9uZyIgbWluT2NjdXJzPSIwIiAv"
"Pg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJVSW50NjQiIHR5cGU9InhzOnVuc2ln"
"bmVkTG9uZyIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1l"
"PSJGbG9hdCIgdHlwZT0ieHM6ZmxvYXQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iRG91YmxlIiB0eXBlPSJ4czpkb3VibGUiIG1pbk9jY3Vycz0iMCIg"
"Lz4NCiAgICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iU3RyaW5nIiB0eXBlPSJ4czpzdHJp"
"bmciIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRGF0"
"ZVRpbWUiIHR5cGU9InhzOmRhdGVUaW1lIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgICAg"
"IDx4czplbGVtZW50IG5hbWU9Ikd1aWQiIHR5cGU9InRuczpHdWlkIiBtaW5PY2N1cnM9IjAiIC8+"
"DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IkJ5dGVTdHJpbmciIHR5cGU9InhzOmJh"
"c2U2NEJpbmFyeSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBu"
"YW1lPSJYbWxFbGVtZW50IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIj4NCiAgICAgICAg"
"ICAgICAgICA8eHM6Y29tcGxleFR5cGU+DQogICAgICAgICAgICAgICAgICA8eHM6c2VxdWVuY2U+"
"DQogICAgICAgICAgICAgICAgICAgIDx4czphbnkgbWluT2NjdXJzPSIwIiBwcm9jZXNzQ29udGVu"
"dHM9ImxheCIgLz4NCiAgICAgICAgICAgICAgICAgIDwveHM6c2VxdWVuY2U+DQogICAgICAgICAg"
"ICAgICAgPC94czpjb21wbGV4VHlwZT4NCiAgICAgICAgICAgICAgPC94czplbGVtZW50Pg0KICAg"
"ICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTdGF0dXNDb2RlIiB0eXBlPSJ0bnM6U3RhdHVz"
"Q29kZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJO"
"b2RlSWQiIHR5cGU9InRuczpOb2RlSWQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iRXhwYW5kZWROb2RlSWQiIHR5cGU9InRuczpFeHBhbmRlZE5vZGVJ"
"ZCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJRdWFs"
"aWZpZWROYW1lIiB0eXBlPSJ0bnM6UXVhbGlmaWVkTmFtZSIgbWluT2NjdXJzPSIwIiAvPg0KICAg"
"ICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJMb2NhbGl6ZWRUZXh0IiB0eXBlPSJ0bnM6TG9j"
"YWxpemVkVGV4dCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBu"
"YW1lPSJFeHRlbnNpb25PYmplY3QiIHR5cGU9InRuczpFeHRlbnNpb25PYmplY3QiIG1pbk9jY3Vy"
"cz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iVmFyaWFudCIgdHlwZT0i"
"dG5zOlZhcmlhbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgIDwveHM6Y2hvaWNlPg0K"
"ICAgICAgICAgIDwveHM6Y29tcGxleFR5cGU+DQogICAgICAgIDwveHM6ZWxlbWVudD4NCiAgICAg"
"IDwveHM6c2VxdWVuY2U+DQogICAgPC94czpjb21wbGV4VHlwZT4NCiAgICA8eHM6ZWxlbWVudCBu"
"YW1lPSJNYXRyaXgiIHR5cGU9InRuczpNYXRyaXgiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KDQogICAg"
"PHhzOmNvbXBsZXhUeXBlIG5hbWU9IlZhcmlhbnRWYWx1ZSI+DQogICAgICA8eHM6Y2hvaWNlPg0K"
"ICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJCb29sZWFuIiB0eXBlPSJ4czpib29sZWFuIiBtaW5P"
"Y2N1cnM9IjAiIC8+DQogICAgICAgIDx4czplbGVtZW50IG5hbWU9IlNCeXRlIiB0eXBlPSJ4czpi"
"eXRlIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgIDx4czplbGVtZW50IG5hbWU9IkJ5dGUiIHR5"
"cGU9InhzOnVuc2lnbmVkQnl0ZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICA8eHM6ZWxlbWVu"
"dCBuYW1lPSJJbnQxNiIgdHlwZT0ieHM6c2hvcnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iVUludDE2IiB0eXBlPSJ4czp1bnNpZ25lZFNob3J0IiBtaW5PY2N1"
"cnM9IjAiIC8+DQogICAgICAgIDx4czplbGVtZW50IG5hbWU9IkludDMyIiB0eXBlPSJ4czppbnQi"
"IG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iVUludDMyIiB0eXBl"
"PSJ4czp1bnNpZ25lZEludCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICA8eHM6ZWxlbWVudCBu"
"YW1lPSJJbnQ2NCIgdHlwZT0ieHM6bG9uZyIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICA8eHM6"
"ZWxlbWVudCBuYW1lPSJVSW50NjQiIHR5cGU9InhzOnVuc2lnbmVkTG9uZyIgbWluT2NjdXJzPSIw"
"IiAvPg0KICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJGbG9hdCIgdHlwZT0ieHM6ZmxvYXQiIG1p"
"bk9jY3Vycz0iMCIgLz4NCiAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRG91YmxlIiB0eXBlPSJ4"
"czpkb3VibGUiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iU3Ry"
"aW5nIiB0eXBlPSJ4czpzdHJpbmciIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgPHhzOmVsZW1l"
"bnQgbmFtZT0iRGF0ZVRpbWUiIHR5cGU9InhzOmRhdGVUaW1lIiBtaW5PY2N1cnM9IjAiIC8+DQog"
"ICAgICAgIDx4czplbGVtZW50IG5hbWU9Ikd1aWQiIHR5cGU9InRuczpHdWlkIiBtaW5PY2N1cnM9"
"IjAiIC8+DQogICAgICAgIDx4czplbGVtZW50IG5hbWU9IkJ5dGVTdHJpbmciIHR5cGU9InhzOmJh"
"c2U2NEJpbmFyeSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJY"
"bWxFbGVtZW50IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIj4NCiAgICAgICAgICA8eHM6"
"Y29tcGxleFR5cGU+DQogICAgICAgICAgICA8eHM6c2VxdWVuY2U+DQogICAgICAgICAgICAgIDx4"
"czphbnkgbWluT2NjdXJzPSIwIiBwcm9jZXNzQ29udGVudHM9ImxheCIgLz4NCiAgICAgICAgICAg"
"IDwveHM6c2VxdWVuY2U+DQogICAgICAgICAgPC94czpjb21wbGV4VHlwZT4NCiAgICAgICAgPC94"
"czplbGVtZW50Pg0KICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTdGF0dXNDb2RlIiB0eXBlPSJ0"
"bnM6U3RhdHVzQ29kZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICA8eHM6ZWxlbWVudCBuYW1l"
"PSJOb2RlSWQiIHR5cGU9InRuczpOb2RlSWQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iRXhwYW5kZWROb2RlSWQiIHR5cGU9InRuczpFeHBhbmRlZE5vZGVJZCIg"
"bWluT2NjdXJzPSIwIiAvPg0KICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJRdWFsaWZpZWROYW1l"
"IiB0eXBlPSJ0bnM6UXVhbGlmaWVkTmFtZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICA8eHM6"
"ZWxlbWVudCBuYW1lPSJMb2NhbGl6ZWRUZXh0IiB0eXBlPSJ0bnM6TG9jYWxpemVkVGV4dCIgbWlu"
"T2NjdXJzPSIwIiAvPg0KICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJFeHRlbnNpb25PYmplY3Qi"
"IHR5cGU9InRuczpFeHRlbnNpb25PYmplY3QiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iTGlzdE9mQm9vbGVhbiIgdHlwZT0idG5zOkxpc3RPZkJvb2xlYW4iIG1p"
"bk9jY3Vycz0iMCIgLz4NCiAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iTGlzdE9mU0J5dGUiIHR5"
"cGU9InRuczpMaXN0T2ZTQnl0ZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICA8eHM6ZWxlbWVu"
"dCBuYW1lPSJMaXN0T2ZCeXRlIiB0eXBlPSJ0bnM6TGlzdE9mQnl0ZSIgbWluT2NjdXJzPSIwIiAv"
"Pg0KICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZJbnQxNiIgdHlwZT0idG5zOkxpc3RP"
"ZkludDE2IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgIDx4czplbGVtZW50IG5hbWU9Ikxpc3RP"
"ZlVJbnQxNiIgdHlwZT0idG5zOkxpc3RPZlVJbnQxNiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAg"
"ICA8eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZJbnQzMiIgdHlwZT0idG5zOkxpc3RPZkludDMyIiBt"
"aW5PY2N1cnM9IjAiIC8+DQogICAgICAgIDx4czplbGVtZW50IG5hbWU9Ikxpc3RPZlVJbnQzMiIg"
"dHlwZT0idG5zOkxpc3RPZlVJbnQzMiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICA8eHM6ZWxl"
"bWVudCBuYW1lPSJMaXN0T2ZJbnQ2NCIgdHlwZT0idG5zOkxpc3RPZkludDY0IiBtaW5PY2N1cnM9"
"IjAiIC8+DQogICAgICAgIDx4czplbGVtZW50IG5hbWU9Ikxpc3RPZlVJbnQ2NCIgdHlwZT0idG5z"
"Okxpc3RPZlVJbnQ2NCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICA8eHM6ZWxlbWVudCBuYW1l"
"PSJMaXN0T2ZGbG9hdCIgdHlwZT0idG5zOkxpc3RPZkZsb2F0IiBtaW5PY2N1cnM9IjAiIC8+DQog"
"ICAgICAgIDx4czplbGVtZW50IG5hbWU9Ikxpc3RPZkRvdWJsZSIgdHlwZT0idG5zOkxpc3RPZkRv"
"dWJsZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZT"
"dHJpbmciIHR5cGU9InRuczpMaXN0T2ZTdHJpbmciIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iTGlzdE9mRGF0ZVRpbWUiIHR5cGU9InRuczpMaXN0T2ZEYXRlVGlt"
"ZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZHdWlk"
"IiB0eXBlPSJ0bnM6TGlzdE9mR3VpZCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICA8eHM6ZWxl"
"bWVudCBuYW1lPSJMaXN0T2ZCeXRlU3RyaW5nIiB0eXBlPSJ0bnM6TGlzdE9mQnl0ZVN0cmluZyIg"
"bWluT2NjdXJzPSIwIiAvPg0KICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZYbWxFbGVt"
"ZW50IiB0eXBlPSJ0bnM6TGlzdE9mWG1sRWxlbWVudCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAg"
"ICA8eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZTdGF0dXNDb2RlIiB0eXBlPSJ0bnM6TGlzdE9mU3Rh"
"dHVzQ29kZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJMaXN0"
"T2ZOb2RlSWQiIHR5cGU9InRuczpMaXN0T2ZOb2RlSWQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAg"
"ICAgPHhzOmVsZW1lbnQgbmFtZT0iTGlzdE9mRXhwYW5kZWROb2RlSWQiIHR5cGU9InRuczpMaXN0"
"T2ZFeHBhbmRlZE5vZGVJZCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICA8eHM6ZWxlbWVudCBu"
"YW1lPSJMaXN0T2ZRdWFsaWZpZWROYW1lIiB0eXBlPSJ0bnM6TGlzdE9mUXVhbGlmaWVkTmFtZSIg"
"bWluT2NjdXJzPSIwIiAvPg0KICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZMb2NhbGl6"
"ZWRUZXh0IiB0eXBlPSJ0bnM6TGlzdE9mTG9jYWxpemVkVGV4dCIgbWluT2NjdXJzPSIwIiAvPg0K"
"ICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZFeHRlbnNpb25PYmplY3QiIHR5cGU9InRu"
"czpMaXN0T2ZFeHRlbnNpb25PYmplY3QiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgPHhzOmVs"
"ZW1lbnQgbmFtZT0iTGlzdE9mVmFyaWFudCIgdHlwZT0idG5zOkxpc3RPZlZhcmlhbnQiIG1pbk9j"
"Y3Vycz0iMCIgLz4NCiAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iTWF0cml4IiB0eXBlPSJ0bnM6"
"TWF0cml4IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8L3hzOmNob2ljZT4NCiAgICA8L3hzOmNv"
"bXBsZXhUeXBlPg0KDQogICAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IlZhcmlhbnQiPg0KICAgICAg"
"PHhzOnNlcXVlbmNlPg0KICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJWYWx1ZSIgdHlwZT0idG5z"
"OlZhcmlhbnRWYWx1ZSIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDwv"
"eHM6c2VxdWVuY2U+DQogICAgPC94czpjb21wbGV4VHlwZT4NCiAgICA8eHM6ZWxlbWVudCBuYW1l"
"PSJWYXJpYW50IiB0eXBlPSJ0bnM6VmFyaWFudCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgLS0+"
"DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IlZhcmlhbnQiPg0KICAgIDx4czphbm5vdGF0aW9u"
"Pg0KICAgICAgPHhzOmFwcGluZm8+DQogICAgICAgIDxJc1ZhbHVlVHlwZSB4bWxucz0iaHR0cDov"
"L3NjaGVtYXMubWljcm9zb2Z0LmNvbS8yMDAzLzEwL1NlcmlhbGl6YXRpb24vIj50cnVlPC9Jc1Zh"
"bHVlVHlwZT4NCiAgICAgIDwveHM6YXBwaW5mbz4NCiAgICA8L3hzOmFubm90YXRpb24+DQogICAg"
"PHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iVmFsdWUiIG1pbk9jY3Vycz0i"
"MCIgbmlsbGFibGU9InRydWUiPg0KICAgICAgICA8eHM6Y29tcGxleFR5cGU+DQogICAgICAgICAg"
"PHhzOnNlcXVlbmNlPg0KICAgICAgICAgICAgPHhzOmFueSBtaW5PY2N1cnM9IjAiIHByb2Nlc3ND"
"b250ZW50cz0ibGF4IiAvPg0KICAgICAgICAgIDwveHM6c2VxdWVuY2U+DQogICAgICAgIDwveHM6"
"Y29tcGxleFR5cGU+DQogICAgICA8L3hzOmVsZW1lbnQ+DQogICAgPC94czpzZXF1ZW5jZT4NCiAg"
"PC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iVmFyaWFudCIgdHlwZT0idG5z"
"OlZhcmlhbnQiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJM"
"aXN0T2ZWYXJpYW50Ij4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1l"
"PSJWYXJpYW50IiB0eXBlPSJ0bnM6VmFyaWFudCIgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVu"
"Ym91bmRlZCIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8"
"eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZWYXJpYW50IiB0eXBlPSJ0bnM6TGlzdE9mVmFyaWFudCIg"
"bmlsbGFibGU9InRydWUiPjwveHM6ZWxlbWVudD4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0i"
"RGF0YVZhbHVlIj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJW"
"YWx1ZSIgdHlwZT0idG5zOlZhcmlhbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVt"
"ZW50IG5hbWU9IlN0YXR1c0NvZGUiIHR5cGU9InRuczpTdGF0dXNDb2RlIiBtaW5PY2N1cnM9IjAi"
"IC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTb3VyY2VUaW1lc3RhbXAiIHR5cGU9InhzOmRh"
"dGVUaW1lIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTb3VyY2VQ"
"aWNvc2Vjb25kcyIgdHlwZT0ieHM6dW5zaWduZWRTaG9ydCIgbWluT2NjdXJzPSIwIiAvPg0KICAg"
"ICAgPHhzOmVsZW1lbnQgbmFtZT0iU2VydmVyVGltZXN0YW1wIiB0eXBlPSJ4czpkYXRlVGltZSIg"
"bWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iU2VydmVyUGljb3NlY29u"
"ZHMiIHR5cGU9InhzOnVuc2lnbmVkU2hvcnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICA8L3hzOnNl"
"cXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJEYXRhVmFs"
"dWUiIHR5cGU9InRuczpEYXRhVmFsdWUiIG5pbGxhYmxlPSJ0cnVlIi8+DQoNCiAgPHhzOmNvbXBs"
"ZXhUeXBlIG5hbWU9Ikxpc3RPZkRhdGFWYWx1ZSI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iRGF0YVZhbHVlIiB0eXBlPSJ0bnM6RGF0YVZhbHVlIiBtaW5PY2N1"
"cnM9IjAiIG1heE9jY3Vycz0idW5ib3VuZGVkIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hz"
"OnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJMaXN0"
"T2ZEYXRhVmFsdWUiIHR5cGU9InRuczpMaXN0T2ZEYXRhVmFsdWUiIG5pbGxhYmxlPSJ0cnVlIj48"
"L3hzOmVsZW1lbnQ+DQoNCiAgPHhzOmVsZW1lbnQgbmFtZT0iSW52b2tlU2VydmljZVJlcXVlc3Qi"
"IHR5cGU9InhzOmJhc2U2NEJpbmFyeSIgbmlsbGFibGU9InRydWUiIC8+DQogIDx4czplbGVtZW50"
"IG5hbWU9Ikludm9rZVNlcnZpY2VSZXNwb25zZSIgdHlwZT0ieHM6YmFzZTY0QmluYXJ5IiBuaWxs"
"YWJsZT0idHJ1ZSIgLz4NCg0KICA8eHM6ZWxlbWVudCBuYW1lPSJJbWFnZUJNUCIgdHlwZT0ieHM6"
"YmFzZTY0QmluYXJ5IiAvPg0KDQogIDx4czplbGVtZW50IG5hbWU9IkltYWdlR0lGIiB0eXBlPSJ4"
"czpiYXNlNjRCaW5hcnkiIC8+DQoNCiAgPHhzOmVsZW1lbnQgbmFtZT0iSW1hZ2VKUEciIHR5cGU9"
"InhzOmJhc2U2NEJpbmFyeSIgLz4NCg0KICA8eHM6ZWxlbWVudCBuYW1lPSJJbWFnZVBORyIgdHlw"
"ZT0ieHM6YmFzZTY0QmluYXJ5IiAvPg0KDQogIDx4czplbGVtZW50IG5hbWU9IkJpdEZpZWxkTWFz"
"a0RhdGFUeXBlIiB0eXBlPSJ4czp1bnNpZ25lZExvbmciIC8+DQoNCiAgPHhzOnNpbXBsZVR5cGUg"
"IG5hbWU9Ik9wZW5GaWxlTW9kZSI+DQogICAgPHhzOnJlc3RyaWN0aW9uIGJhc2U9InhzOnN0cmlu"
"ZyI+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IlJlYWRfMSIgLz4NCiAgICAgIDx4czpl"
"bnVtZXJhdGlvbiB2YWx1ZT0iV3JpdGVfMiIgLz4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1"
"ZT0iRXJhc2VFeGlzaXRpbmdfNCIgLz4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iQXBw"
"ZW5kXzgiIC8+DQogICAgPC94czpyZXN0cmljdGlvbj4NCiAgPC94czpzaW1wbGVUeXBlPg0KICA8"
"eHM6ZWxlbWVudCBuYW1lPSJPcGVuRmlsZU1vZGUiIHR5cGU9InRuczpPcGVuRmlsZU1vZGUiIC8+"
"DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxpc3RPZk9wZW5GaWxlTW9kZSI+DQogICAgPHhz"
"OnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iT3BlbkZpbGVNb2RlIiB0eXBlPSJ0"
"bnM6T3BlbkZpbGVNb2RlIiBtaW5PY2N1cnM9IjAiIG1heE9jY3Vycz0idW5ib3VuZGVkIiAvPg0K"
"ICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5h"
"bWU9Ikxpc3RPZk9wZW5GaWxlTW9kZSIgdHlwZT0idG5zOkxpc3RPZk9wZW5GaWxlTW9kZSIgbmls"
"bGFibGU9InRydWUiPjwveHM6ZWxlbWVudD4NCg0KICA8eHM6c2ltcGxlVHlwZSAgbmFtZT0iSWRU"
"eXBlIj4NCiAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czpkb2N1bWVudGF0aW9uPlRoZSB0"
"eXBlIG9mIGlkZW50aWZpZXIgdXNlZCBpbiBhIG5vZGUgaWQuPC94czpkb2N1bWVudGF0aW9uPg0K"
"ICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICA8eHM6cmVzdHJpY3Rpb24gYmFzZT0ieHM6c3RyaW5n"
"Ij4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iTnVtZXJpY18wIiAvPg0KICAgICAgPHhz"
"OmVudW1lcmF0aW9uIHZhbHVlPSJTdHJpbmdfMSIgLz4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2"
"YWx1ZT0iR3VpZF8yIiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJPcGFxdWVfMyIg"
"Lz4NCiAgICA8L3hzOnJlc3RyaWN0aW9uPg0KICA8L3hzOnNpbXBsZVR5cGU+DQogIDx4czplbGVt"
"ZW50IG5hbWU9IklkVHlwZSIgdHlwZT0idG5zOklkVHlwZSIgLz4NCg0KICA8eHM6Y29tcGxleFR5"
"cGUgbmFtZT0iTGlzdE9mSWRUeXBlIj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxl"
"bWVudCBuYW1lPSJJZFR5cGUiIHR5cGU9InRuczpJZFR5cGUiIG1pbk9jY3Vycz0iMCIgbWF4T2Nj"
"dXJzPSJ1bmJvdW5kZWQiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlw"
"ZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTGlzdE9mSWRUeXBlIiB0eXBlPSJ0bnM6TGlzdE9mSWRU"
"eXBlIiBuaWxsYWJsZT0idHJ1ZSI+PC94czplbGVtZW50Pg0KDQogIDx4czpzaW1wbGVUeXBlICBu"
"YW1lPSJOb2RlQ2xhc3MiPg0KICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmRvY3VtZW50"
"YXRpb24+QSBtYXNrIHNwZWNpZnlpbmcgdGhlIGNsYXNzIG9mIHRoZSBub2RlLjwveHM6ZG9jdW1l"
"bnRhdGlvbj4NCiAgICA8L3hzOmFubm90YXRpb24+DQogICAgPHhzOnJlc3RyaWN0aW9uIGJhc2U9"
"InhzOnN0cmluZyI+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IlVuc3BlY2lmaWVkXzAi"
"IC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9Ik9iamVjdF8xIiAvPg0KICAgICAgPHhz"
"OmVudW1lcmF0aW9uIHZhbHVlPSJWYXJpYWJsZV8yIiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9u"
"IHZhbHVlPSJNZXRob2RfNCIgLz4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iT2JqZWN0"
"VHlwZV84IiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJWYXJpYWJsZVR5cGVfMTYi"
"IC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IlJlZmVyZW5jZVR5cGVfMzIiIC8+DQog"
"ICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IkRhdGFUeXBlXzY0IiAvPg0KICAgICAgPHhzOmVu"
"dW1lcmF0aW9uIHZhbHVlPSJWaWV3XzEyOCIgLz4NCiAgICA8L3hzOnJlc3RyaWN0aW9uPg0KICA8"
"L3hzOnNpbXBsZVR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ik5vZGVDbGFzcyIgdHlwZT0idG5z"
"Ok5vZGVDbGFzcyIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTm9kZSI+DQogICAgPHhz"
"OmFubm90YXRpb24+DQogICAgICA8eHM6ZG9jdW1lbnRhdGlvbj5TcGVjaWZpZXMgdGhlIGF0dHJp"
"YnV0ZXMgd2hpY2ggYmVsb25nIHRvIGFsbCBub2Rlcy48L3hzOmRvY3VtZW50YXRpb24+DQogICAg"
"PC94czphbm5vdGF0aW9uPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5h"
"bWU9Ik5vZGVJZCIgdHlwZT0idWE6Tm9kZUlkIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVl"
"IiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iTm9kZUNsYXNzIiB0eXBlPSJ0bnM6Tm9kZUNs"
"YXNzIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJCcm93c2VOYW1l"
"IiB0eXBlPSJ1YTpRdWFsaWZpZWROYW1lIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAv"
"Pg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRGlzcGxheU5hbWUiIHR5cGU9InVhOkxvY2FsaXpl"
"ZFRleHQiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVu"
"dCBuYW1lPSJEZXNjcmlwdGlvbiIgdHlwZT0idWE6TG9jYWxpemVkVGV4dCIgbWluT2NjdXJzPSIw"
"IiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IldyaXRlTWFzayIg"
"dHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50"
"IG5hbWU9IlVzZXJXcml0ZU1hc2siIHR5cGU9InhzOnVuc2lnbmVkSW50IiBtaW5PY2N1cnM9IjAi"
"IC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZWZlcmVuY2VzIiB0eXBlPSJ0bnM6TGlzdE9m"
"UmVmZXJlbmNlTm9kZSIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hz"
"OnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJOb2Rl"
"IiB0eXBlPSJ0bnM6Tm9kZSIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTGlzdE9mTm9k"
"ZSI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iTm9kZSIgdHlw"
"ZT0idG5zOk5vZGUiIG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIG5pbGxhYmxl"
"PSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4"
"czplbGVtZW50IG5hbWU9Ikxpc3RPZk5vZGUiIHR5cGU9InRuczpMaXN0T2ZOb2RlIiBuaWxsYWJs"
"ZT0idHJ1ZSI+PC94czplbGVtZW50Pg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJJbnN0YW5j"
"ZU5vZGUiPg0KICAgIDx4czpjb21wbGV4Q29udGVudCBtaXhlZD0iZmFsc2UiPg0KICAgICAgPHhz"
"OmV4dGVuc2lvbiBiYXNlPSJ0bnM6Tm9kZSI+DQogICAgICAgIDx4czpzZXF1ZW5jZT4NCiAgICAg"
"ICAgPC94czpzZXF1ZW5jZT4NCiAgICAgIDwveHM6ZXh0ZW5zaW9uPg0KICAgIDwveHM6Y29tcGxl"
"eENvbnRlbnQ+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ikluc3Rh"
"bmNlTm9kZSIgdHlwZT0idG5zOkluc3RhbmNlTm9kZSIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUg"
"bmFtZT0iVHlwZU5vZGUiPg0KICAgIDx4czpjb21wbGV4Q29udGVudCBtaXhlZD0iZmFsc2UiPg0K"
"ICAgICAgPHhzOmV4dGVuc2lvbiBiYXNlPSJ0bnM6Tm9kZSI+DQogICAgICAgIDx4czpzZXF1ZW5j"
"ZT4NCiAgICAgICAgPC94czpzZXF1ZW5jZT4NCiAgICAgIDwveHM6ZXh0ZW5zaW9uPg0KICAgIDwv"
"eHM6Y29tcGxleENvbnRlbnQ+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5h"
"bWU9IlR5cGVOb2RlIiB0eXBlPSJ0bnM6VHlwZU5vZGUiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBl"
"IG5hbWU9Ik9iamVjdE5vZGUiPg0KICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmRvY3Vt"
"ZW50YXRpb24+U3BlY2lmaWVzIHRoZSBhdHRyaWJ1dGVzIHdoaWNoIGJlbG9uZyB0byBvYmplY3Qg"
"bm9kZXMuPC94czpkb2N1bWVudGF0aW9uPg0KICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICA8eHM6"
"Y29tcGxleENvbnRlbnQgbWl4ZWQ9ImZhbHNlIj4NCiAgICAgIDx4czpleHRlbnNpb24gYmFzZT0i"
"dG5zOkluc3RhbmNlTm9kZSI+DQogICAgICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgICAgICA8eHM6"
"ZWxlbWVudCBuYW1lPSJFdmVudE5vdGlmaWVyIiB0eXBlPSJ4czp1bnNpZ25lZEJ5dGUiIG1pbk9j"
"Y3Vycz0iMCIgLz4NCiAgICAgICAgPC94czpzZXF1ZW5jZT4NCiAgICAgIDwveHM6ZXh0ZW5zaW9u"
"Pg0KICAgIDwveHM6Y29tcGxleENvbnRlbnQ+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czpl"
"bGVtZW50IG5hbWU9Ik9iamVjdE5vZGUiIHR5cGU9InRuczpPYmplY3ROb2RlIiAvPg0KDQogIDx4"
"czpjb21wbGV4VHlwZSBuYW1lPSJPYmplY3RUeXBlTm9kZSI+DQogICAgPHhzOmFubm90YXRpb24+"
"DQogICAgICA8eHM6ZG9jdW1lbnRhdGlvbj5TcGVjaWZpZXMgdGhlIGF0dHJpYnV0ZXMgd2hpY2gg"
"YmVsb25nIHRvIG9iamVjdCB0eXBlIG5vZGVzLjwveHM6ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hz"
"OmFubm90YXRpb24+DQogICAgPHhzOmNvbXBsZXhDb250ZW50IG1peGVkPSJmYWxzZSI+DQogICAg"
"ICA8eHM6ZXh0ZW5zaW9uIGJhc2U9InRuczpUeXBlTm9kZSI+DQogICAgICAgIDx4czpzZXF1ZW5j"
"ZT4NCiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJJc0Fic3RyYWN0IiB0eXBlPSJ4czpib29s"
"ZWFuIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgIDwveHM6c2VxdWVuY2U+DQogICAgICA8L3hz"
"OmV4dGVuc2lvbj4NCiAgICA8L3hzOmNvbXBsZXhDb250ZW50Pg0KICA8L3hzOmNvbXBsZXhUeXBl"
"Pg0KICA8eHM6ZWxlbWVudCBuYW1lPSJPYmplY3RUeXBlTm9kZSIgdHlwZT0idG5zOk9iamVjdFR5"
"cGVOb2RlIiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJWYXJpYWJsZU5vZGUiPg0KICAg"
"IDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmRvY3VtZW50YXRpb24+U3BlY2lmaWVzIHRoZSBh"
"dHRyaWJ1dGVzIHdoaWNoIGJlbG9uZyB0byB2YXJpYWJsZSBub2Rlcy48L3hzOmRvY3VtZW50YXRp"
"b24+DQogICAgPC94czphbm5vdGF0aW9uPg0KICAgIDx4czpjb21wbGV4Q29udGVudCBtaXhlZD0i"
"ZmFsc2UiPg0KICAgICAgPHhzOmV4dGVuc2lvbiBiYXNlPSJ0bnM6SW5zdGFuY2VOb2RlIj4NCiAg"
"ICAgICAgPHhzOnNlcXVlbmNlPg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IlZhbHVlIiB0"
"eXBlPSJ1YTpWYXJpYW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgPHhzOmVsZW1lbnQg"
"bmFtZT0iRGF0YVR5cGUiIHR5cGU9InVhOk5vZGVJZCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0i"
"dHJ1ZSIgLz4NCiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJWYWx1ZVJhbmsiIHR5cGU9Inhz"
"OmludCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IkFycmF5"
"RGltZW5zaW9ucyIgdHlwZT0idWE6TGlzdE9mVUludDMyIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxl"
"PSJ0cnVlIiAvPg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IkFjY2Vzc0xldmVsIiB0eXBl"
"PSJ4czp1bnNpZ25lZEJ5dGUiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICA8eHM6ZWxlbWVu"
"dCBuYW1lPSJVc2VyQWNjZXNzTGV2ZWwiIHR5cGU9InhzOnVuc2lnbmVkQnl0ZSIgbWluT2NjdXJz"
"PSIwIiAvPg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9Ik1pbmltdW1TYW1wbGluZ0ludGVy"
"dmFsIiB0eXBlPSJ4czpkb3VibGUiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICA8eHM6ZWxl"
"bWVudCBuYW1lPSJIaXN0b3JpemluZyIgdHlwZT0ieHM6Ym9vbGVhbiIgbWluT2NjdXJzPSIwIiAv"
"Pg0KICAgICAgICA8L3hzOnNlcXVlbmNlPg0KICAgICAgPC94czpleHRlbnNpb24+DQogICAgPC94"
"czpjb21wbGV4Q29udGVudD4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFt"
"ZT0iVmFyaWFibGVOb2RlIiB0eXBlPSJ0bnM6VmFyaWFibGVOb2RlIiAvPg0KDQogIDx4czpjb21w"
"bGV4VHlwZSBuYW1lPSJWYXJpYWJsZVR5cGVOb2RlIj4NCiAgICA8eHM6YW5ub3RhdGlvbj4NCiAg"
"ICAgIDx4czpkb2N1bWVudGF0aW9uPlNwZWNpZmllcyB0aGUgYXR0cmlidXRlcyB3aGljaCBiZWxv"
"bmcgdG8gdmFyaWFibGUgdHlwZSBub2Rlcy48L3hzOmRvY3VtZW50YXRpb24+DQogICAgPC94czph"
"bm5vdGF0aW9uPg0KICAgIDx4czpjb21wbGV4Q29udGVudCBtaXhlZD0iZmFsc2UiPg0KICAgICAg"
"PHhzOmV4dGVuc2lvbiBiYXNlPSJ0bnM6VHlwZU5vZGUiPg0KICAgICAgICA8eHM6c2VxdWVuY2U+"
"DQogICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iVmFsdWUiIHR5cGU9InVhOlZhcmlhbnQiIG1p"
"bk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJEYXRhVHlwZSIgdHlw"
"ZT0idWE6Tm9kZUlkIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgICAg"
"IDx4czplbGVtZW50IG5hbWU9IlZhbHVlUmFuayIgdHlwZT0ieHM6aW50IiBtaW5PY2N1cnM9IjAi"
"IC8+DQogICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iQXJyYXlEaW1lbnNpb25zIiB0eXBlPSJ1"
"YTpMaXN0T2ZVSW50MzIiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICAg"
"ICAgPHhzOmVsZW1lbnQgbmFtZT0iSXNBYnN0cmFjdCIgdHlwZT0ieHM6Ym9vbGVhbiIgbWluT2Nj"
"dXJzPSIwIiAvPg0KICAgICAgICA8L3hzOnNlcXVlbmNlPg0KICAgICAgPC94czpleHRlbnNpb24+"
"DQogICAgPC94czpjb21wbGV4Q29udGVudD4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVs"
"ZW1lbnQgbmFtZT0iVmFyaWFibGVUeXBlTm9kZSIgdHlwZT0idG5zOlZhcmlhYmxlVHlwZU5vZGUi"
"IC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IlJlZmVyZW5jZVR5cGVOb2RlIj4NCiAgICA8"
"eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czpkb2N1bWVudGF0aW9uPlNwZWNpZmllcyB0aGUgYXR0"
"cmlidXRlcyB3aGljaCBiZWxvbmcgdG8gcmVmZXJlbmNlIHR5cGUgbm9kZXMuPC94czpkb2N1bWVu"
"dGF0aW9uPg0KICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICA8eHM6Y29tcGxleENvbnRlbnQgbWl4"
"ZWQ9ImZhbHNlIj4NCiAgICAgIDx4czpleHRlbnNpb24gYmFzZT0idG5zOlR5cGVOb2RlIj4NCiAg"
"ICAgICAgPHhzOnNlcXVlbmNlPg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IklzQWJzdHJh"
"Y3QiIHR5cGU9InhzOmJvb2xlYW4iIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICA8eHM6ZWxl"
"bWVudCBuYW1lPSJTeW1tZXRyaWMiIHR5cGU9InhzOmJvb2xlYW4iIG1pbk9jY3Vycz0iMCIgLz4N"
"CiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJJbnZlcnNlTmFtZSIgdHlwZT0idWE6TG9jYWxp"
"emVkVGV4dCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgICAgPC94czpz"
"ZXF1ZW5jZT4NCiAgICAgIDwveHM6ZXh0ZW5zaW9uPg0KICAgIDwveHM6Y29tcGxleENvbnRlbnQ+"
"DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IlJlZmVyZW5jZVR5cGVO"
"b2RlIiB0eXBlPSJ0bnM6UmVmZXJlbmNlVHlwZU5vZGUiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBl"
"IG5hbWU9Ik1ldGhvZE5vZGUiPg0KICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmRvY3Vt"
"ZW50YXRpb24+U3BlY2lmaWVzIHRoZSBhdHRyaWJ1dGVzIHdoaWNoIGJlbG9uZyB0byBtZXRob2Qg"
"bm9kZXMuPC94czpkb2N1bWVudGF0aW9uPg0KICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICA8eHM6"
"Y29tcGxleENvbnRlbnQgbWl4ZWQ9ImZhbHNlIj4NCiAgICAgIDx4czpleHRlbnNpb24gYmFzZT0i"
"dG5zOkluc3RhbmNlTm9kZSI+DQogICAgICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgICAgICA8eHM6"
"ZWxlbWVudCBuYW1lPSJFeGVjdXRhYmxlIiB0eXBlPSJ4czpib29sZWFuIiBtaW5PY2N1cnM9IjAi"
"IC8+DQogICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iVXNlckV4ZWN1dGFibGUiIHR5cGU9Inhz"
"OmJvb2xlYW4iIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgPC94czpzZXF1ZW5jZT4NCiAgICAg"
"IDwveHM6ZXh0ZW5zaW9uPg0KICAgIDwveHM6Y29tcGxleENvbnRlbnQ+DQogIDwveHM6Y29tcGxl"
"eFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ik1ldGhvZE5vZGUiIHR5cGU9InRuczpNZXRob2RO"
"b2RlIiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJWaWV3Tm9kZSI+DQogICAgPHhzOmNv"
"bXBsZXhDb250ZW50IG1peGVkPSJmYWxzZSI+DQogICAgICA8eHM6ZXh0ZW5zaW9uIGJhc2U9InRu"
"czpJbnN0YW5jZU5vZGUiPg0KICAgICAgICA8eHM6c2VxdWVuY2U+DQogICAgICAgICAgPHhzOmVs"
"ZW1lbnQgbmFtZT0iQ29udGFpbnNOb0xvb3BzIiB0eXBlPSJ4czpib29sZWFuIiBtaW5PY2N1cnM9"
"IjAiIC8+DQogICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRXZlbnROb3RpZmllciIgdHlwZT0i"
"eHM6dW5zaWduZWRCeXRlIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgIDwveHM6c2VxdWVuY2U+"
"DQogICAgICA8L3hzOmV4dGVuc2lvbj4NCiAgICA8L3hzOmNvbXBsZXhDb250ZW50Pg0KICA8L3hz"
"OmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJWaWV3Tm9kZSIgdHlwZT0idG5zOlZp"
"ZXdOb2RlIiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJEYXRhVHlwZU5vZGUiPg0KICAg"
"IDx4czpjb21wbGV4Q29udGVudCBtaXhlZD0iZmFsc2UiPg0KICAgICAgPHhzOmV4dGVuc2lvbiBi"
"YXNlPSJ0bnM6VHlwZU5vZGUiPg0KICAgICAgICA8eHM6c2VxdWVuY2U+DQogICAgICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iSXNBYnN0cmFjdCIgdHlwZT0ieHM6Ym9vbGVhbiIgbWluT2NjdXJzPSIw"
"IiAvPg0KICAgICAgICA8L3hzOnNlcXVlbmNlPg0KICAgICAgPC94czpleHRlbnNpb24+DQogICAg"
"PC94czpjb21wbGV4Q29udGVudD4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQg"
"bmFtZT0iRGF0YVR5cGVOb2RlIiB0eXBlPSJ0bnM6RGF0YVR5cGVOb2RlIiAvPg0KDQogIDx4czpj"
"b21wbGV4VHlwZSBuYW1lPSJSZWZlcmVuY2VOb2RlIj4NCiAgICA8eHM6YW5ub3RhdGlvbj4NCiAg"
"ICAgIDx4czpkb2N1bWVudGF0aW9uPlNwZWNpZmllcyBhIHJlZmVyZW5jZSB3aGljaCBiZWxvbmdz"
"IHRvIGEgbm9kZS48L3hzOmRvY3VtZW50YXRpb24+DQogICAgPC94czphbm5vdGF0aW9uPg0KICAg"
"IDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJlZmVyZW5jZVR5cGVJZCIg"
"dHlwZT0idWE6Tm9kZUlkIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iSXNJbnZlcnNlIiB0eXBlPSJ4czpib29sZWFuIiBtaW5PY2N1cnM9"
"IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJUYXJnZXRJZCIgdHlwZT0idWE6RXhwYW5k"
"ZWROb2RlSWQiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1"
"ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iUmVmZXJlbmNl"
"Tm9kZSIgdHlwZT0idG5zOlJlZmVyZW5jZU5vZGUiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5h"
"bWU9Ikxpc3RPZlJlZmVyZW5jZU5vZGUiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czpl"
"bGVtZW50IG5hbWU9IlJlZmVyZW5jZU5vZGUiIHR5cGU9InRuczpSZWZlcmVuY2VOb2RlIiBtaW5P"
"Y2N1cnM9IjAiIG1heE9jY3Vycz0idW5ib3VuZGVkIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8"
"L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJM"
"aXN0T2ZSZWZlcmVuY2VOb2RlIiB0eXBlPSJ0bnM6TGlzdE9mUmVmZXJlbmNlTm9kZSIgbmlsbGFi"
"bGU9InRydWUiPjwveHM6ZWxlbWVudD4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iQXJndW1l"
"bnQiPg0KICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmRvY3VtZW50YXRpb24+QW4gYXJn"
"dW1lbnQgZm9yIGEgbWV0aG9kLjwveHM6ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hzOmFubm90YXRp"
"b24+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iTmFtZSIgdHlw"
"ZT0ieHM6c3RyaW5nIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iRGF0YVR5cGUiIHR5cGU9InVhOk5vZGVJZCIgbWluT2NjdXJzPSIwIiBu"
"aWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlZhbHVlUmFuayIgdHlw"
"ZT0ieHM6aW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJBcnJh"
"eURpbWVuc2lvbnMiIHR5cGU9InVhOkxpc3RPZlVJbnQzMiIgbWluT2NjdXJzPSIwIiBuaWxsYWJs"
"ZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkRlc2NyaXB0aW9uIiB0eXBlPSJ1"
"YTpMb2NhbGl6ZWRUZXh0IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwv"
"eHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IkFy"
"Z3VtZW50IiB0eXBlPSJ0bnM6QXJndW1lbnQiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9"
"Ikxpc3RPZkFyZ3VtZW50Ij4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBu"
"YW1lPSJBcmd1bWVudCIgdHlwZT0idG5zOkFyZ3VtZW50IiBtaW5PY2N1cnM9IjAiIG1heE9jY3Vy"
"cz0idW5ib3VuZGVkIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8"
"L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZBcmd1bWVudCIgdHlw"
"ZT0idG5zOkxpc3RPZkFyZ3VtZW50IiBuaWxsYWJsZT0idHJ1ZSI+PC94czplbGVtZW50Pg0KDQog"
"IDx4czpjb21wbGV4VHlwZSBuYW1lPSJFbnVtVmFsdWVUeXBlIj4NCiAgICA8eHM6YW5ub3RhdGlv"
"bj4NCiAgICAgIDx4czpkb2N1bWVudGF0aW9uPkEgbWFwcGluZyBiZXR3ZWVuIGEgdmFsdWUgb2Yg"
"YW4gZW51bWVyYXRlZCB0eXBlIGFuZCBhIG5hbWUgYW5kIGRlc2NyaXB0aW9uLjwveHM6ZG9jdW1l"
"bnRhdGlvbj4NCiAgICA8L3hzOmFubm90YXRpb24+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iVmFsdWUiIHR5cGU9InhzOmxvbmciIG1pbk9jY3Vycz0iMCIgLz4N"
"CiAgICAgIDx4czplbGVtZW50IG5hbWU9IkRpc3BsYXlOYW1lIiB0eXBlPSJ1YTpMb2NhbGl6ZWRU"
"ZXh0IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQg"
"bmFtZT0iRGVzY3JpcHRpb24iIHR5cGU9InVhOkxvY2FsaXplZFRleHQiIG1pbk9jY3Vycz0iMCIg"
"bmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlw"
"ZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iRW51bVZhbHVlVHlwZSIgdHlwZT0idG5zOkVudW1WYWx1"
"ZVR5cGUiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxpc3RPZkVudW1WYWx1ZVR5cGUi"
"Pg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkVudW1WYWx1ZVR5"
"cGUiIHR5cGU9InRuczpFbnVtVmFsdWVUeXBlIiBtaW5PY2N1cnM9IjAiIG1heE9jY3Vycz0idW5i"
"b3VuZGVkIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNv"
"bXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZFbnVtVmFsdWVUeXBlIiB0eXBl"
"PSJ0bnM6TGlzdE9mRW51bVZhbHVlVHlwZSIgbmlsbGFibGU9InRydWUiPjwveHM6ZWxlbWVudD4N"
"Cg0KICA8eHM6ZWxlbWVudCBuYW1lPSJEdXJhdGlvbiIgdHlwZT0ieHM6ZG91YmxlIiAvPg0KDQog"
"IDx4czplbGVtZW50IG5hbWU9IlV0Y1RpbWUiIHR5cGU9InhzOmRhdGVUaW1lIiAvPg0KDQogIDx4"
"czplbGVtZW50IG5hbWU9IkxvY2FsZUlkIiB0eXBlPSJ4czpzdHJpbmciIC8+DQoNCiAgPHhzOmNv"
"bXBsZXhUeXBlIG5hbWU9IlRpbWVab25lRGF0YVR5cGUiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAg"
"ICAgIDx4czplbGVtZW50IG5hbWU9Ik9mZnNldCIgdHlwZT0ieHM6c2hvcnQiIG1pbk9jY3Vycz0i"
"MCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkRheWxpZ2h0U2F2aW5nSW5PZmZzZXQiIHR5"
"cGU9InhzOmJvb2xlYW4iIG1pbk9jY3Vycz0iMCIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8"
"L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJUaW1lWm9uZURhdGFUeXBlIiB0"
"eXBlPSJ0bnM6VGltZVpvbmVEYXRhVHlwZSIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0i"
"TGlzdE9mVGltZVpvbmVEYXRhVHlwZSI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVs"
"ZW1lbnQgbmFtZT0iVGltZVpvbmVEYXRhVHlwZSIgdHlwZT0idG5zOlRpbWVab25lRGF0YVR5cGUi"
"IG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIG5pbGxhYmxlPSJ0cnVlIiAvPg0K"
"ICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5h"
"bWU9Ikxpc3RPZlRpbWVab25lRGF0YVR5cGUiIHR5cGU9InRuczpMaXN0T2ZUaW1lWm9uZURhdGFU"
"eXBlIiBuaWxsYWJsZT0idHJ1ZSI+PC94czplbGVtZW50Pg0KDQogIDx4czplbGVtZW50IG5hbWU9"
"IkludGVnZXJJZCIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIC8+DQoNCiAgPHhzOnNpbXBsZVR5cGUg"
"IG5hbWU9IkFwcGxpY2F0aW9uVHlwZSI+DQogICAgPHhzOmFubm90YXRpb24+DQogICAgICA8eHM6"
"ZG9jdW1lbnRhdGlvbj5UaGUgdHlwZXMgb2YgYXBwbGljYXRpb25zLjwveHM6ZG9jdW1lbnRhdGlv"
"bj4NCiAgICA8L3hzOmFubm90YXRpb24+DQogICAgPHhzOnJlc3RyaWN0aW9uIGJhc2U9InhzOnN0"
"cmluZyI+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IlNlcnZlcl8wIiAvPg0KICAgICAg"
"PHhzOmVudW1lcmF0aW9uIHZhbHVlPSJDbGllbnRfMSIgLz4NCiAgICAgIDx4czplbnVtZXJhdGlv"
"biB2YWx1ZT0iQ2xpZW50QW5kU2VydmVyXzIiIC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFs"
"dWU9IkRpc2NvdmVyeVNlcnZlcl8zIiAvPg0KICAgIDwveHM6cmVzdHJpY3Rpb24+DQogIDwveHM6"
"c2ltcGxlVHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iQXBwbGljYXRpb25UeXBlIiB0eXBlPSJ0"
"bnM6QXBwbGljYXRpb25UeXBlIiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJBcHBsaWNh"
"dGlvbkRlc2NyaXB0aW9uIj4NCiAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czpkb2N1bWVu"
"dGF0aW9uPkRlc2NyaWJlcyBhbiBhcHBsaWNhdGlvbiBhbmQgaG93IHRvIGZpbmQgaXQuPC94czpk"
"b2N1bWVudGF0aW9uPg0KICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICA8eHM6c2VxdWVuY2U+DQog"
"ICAgICA8eHM6ZWxlbWVudCBuYW1lPSJBcHBsaWNhdGlvblVyaSIgdHlwZT0ieHM6c3RyaW5nIiBt"
"aW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0i"
"UHJvZHVjdFVyaSIgdHlwZT0ieHM6c3RyaW5nIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVl"
"IiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iQXBwbGljYXRpb25OYW1lIiB0eXBlPSJ1YTpM"
"b2NhbGl6ZWRUZXh0IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iQXBwbGljYXRpb25UeXBlIiB0eXBlPSJ0bnM6QXBwbGljYXRpb25UeXBl"
"IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJHYXRld2F5U2VydmVy"
"VXJpIiB0eXBlPSJ4czpzdHJpbmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQog"
"ICAgICA8eHM6ZWxlbWVudCBuYW1lPSJEaXNjb3ZlcnlQcm9maWxlVXJpIiB0eXBlPSJ4czpzdHJp"
"bmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBu"
"YW1lPSJEaXNjb3ZlcnlVcmxzIiB0eXBlPSJ1YTpMaXN0T2ZTdHJpbmciIG1pbk9jY3Vycz0iMCIg"
"bmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlw"
"ZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iQXBwbGljYXRpb25EZXNjcmlwdGlvbiIgdHlwZT0idG5z"
"OkFwcGxpY2F0aW9uRGVzY3JpcHRpb24iIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxp"
"c3RPZkFwcGxpY2F0aW9uRGVzY3JpcHRpb24iPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4"
"czplbGVtZW50IG5hbWU9IkFwcGxpY2F0aW9uRGVzY3JpcHRpb24iIHR5cGU9InRuczpBcHBsaWNh"
"dGlvbkRlc2NyaXB0aW9uIiBtaW5PY2N1cnM9IjAiIG1heE9jY3Vycz0idW5ib3VuZGVkIiBuaWxs"
"YWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0K"
"ICA8eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZBcHBsaWNhdGlvbkRlc2NyaXB0aW9uIiB0eXBlPSJ0"
"bnM6TGlzdE9mQXBwbGljYXRpb25EZXNjcmlwdGlvbiIgbmlsbGFibGU9InRydWUiPjwveHM6ZWxl"
"bWVudD4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iUmVxdWVzdEhlYWRlciI+DQogICAgPHhz"
"OmFubm90YXRpb24+DQogICAgICA8eHM6ZG9jdW1lbnRhdGlvbj5UaGUgaGVhZGVyIHBhc3NlZCB3"
"aXRoIGV2ZXJ5IHNlcnZlciByZXF1ZXN0LjwveHM6ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hzOmFu"
"bm90YXRpb24+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iQXV0"
"aGVudGljYXRpb25Ub2tlbiIgdHlwZT0idWE6Tm9kZUlkIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxl"
"PSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iVGltZXN0YW1wIiB0eXBlPSJ4czpk"
"YXRlVGltZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVxdWVz"
"dEhhbmRsZSIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4"
"czplbGVtZW50IG5hbWU9IlJldHVybkRpYWdub3N0aWNzIiB0eXBlPSJ4czp1bnNpZ25lZEludCIg"
"bWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iQXVkaXRFbnRyeUlkIiB0"
"eXBlPSJ4czpzdHJpbmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8"
"eHM6ZWxlbWVudCBuYW1lPSJUaW1lb3V0SGludCIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9j"
"Y3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkFkZGl0aW9uYWxIZWFkZXIiIHR5"
"cGU9InVhOkV4dGVuc2lvbk9iamVjdCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4N"
"CiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBu"
"YW1lPSJSZXF1ZXN0SGVhZGVyIiB0eXBlPSJ0bnM6UmVxdWVzdEhlYWRlciIgLz4NCg0KICA8eHM6"
"Y29tcGxleFR5cGUgbmFtZT0iUmVzcG9uc2VIZWFkZXIiPg0KICAgIDx4czphbm5vdGF0aW9uPg0K"
"ICAgICAgPHhzOmRvY3VtZW50YXRpb24+VGhlIGhlYWRlciBwYXNzZWQgd2l0aCBldmVyeSBzZXJ2"
"ZXIgcmVzcG9uc2UuPC94czpkb2N1bWVudGF0aW9uPg0KICAgIDwveHM6YW5ub3RhdGlvbj4NCiAg"
"ICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJUaW1lc3RhbXAiIHR5cGU9"
"InhzOmRhdGVUaW1lIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJS"
"ZXF1ZXN0SGFuZGxlIiB0eXBlPSJ4czp1bnNpZ25lZEludCIgbWluT2NjdXJzPSIwIiAvPg0KICAg"
"ICAgPHhzOmVsZW1lbnQgbmFtZT0iU2VydmljZVJlc3VsdCIgdHlwZT0idWE6U3RhdHVzQ29kZSIg"
"bWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iU2VydmljZURpYWdub3N0"
"aWNzIiB0eXBlPSJ1YTpEaWFnbm9zdGljSW5mbyIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1"
"ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlN0cmluZ1RhYmxlIiB0eXBlPSJ1YTpMaXN0"
"T2ZTdHJpbmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxl"
"bWVudCBuYW1lPSJBZGRpdGlvbmFsSGVhZGVyIiB0eXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiIG1p"
"bk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94"
"czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iUmVzcG9uc2VIZWFkZXIiIHR5cGU9"
"InRuczpSZXNwb25zZUhlYWRlciIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iU2Vydmlj"
"ZUZhdWx0Ij4NCiAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czpkb2N1bWVudGF0aW9uPlRo"
"ZSByZXNwb25zZSByZXR1cm5lZCBieSBhbGwgc2VydmljZXMgd2hlbiB0aGVyZSBpcyBhIHNlcnZp"
"Y2UgbGV2ZWwgZXJyb3IuPC94czpkb2N1bWVudGF0aW9uPg0KICAgIDwveHM6YW5ub3RhdGlvbj4N"
"CiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZXNwb25zZUhlYWRl"
"ciIgdHlwZT0idG5zOlJlc3BvbnNlSGVhZGVyIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVl"
"IiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVt"
"ZW50IG5hbWU9IlNlcnZpY2VGYXVsdCIgdHlwZT0idG5zOlNlcnZpY2VGYXVsdCIgLz4NCg0KICA8"
"eHM6Y29tcGxleFR5cGUgbmFtZT0iRmluZFNlcnZlcnNSZXF1ZXN0Ij4NCiAgICA8eHM6YW5ub3Rh"
"dGlvbj4NCiAgICAgIDx4czpkb2N1bWVudGF0aW9uPkZpbmRzIHRoZSBzZXJ2ZXJzIGtub3duIHRv"
"IHRoZSBkaXNjb3Zlcnkgc2VydmVyLjwveHM6ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hzOmFubm90"
"YXRpb24+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVxdWVz"
"dEhlYWRlciIgdHlwZT0idG5zOlJlcXVlc3RIZWFkZXIiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9"
"InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJFbmRwb2ludFVybCIgdHlwZT0ieHM6"
"c3RyaW5nIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1l"
"bnQgbmFtZT0iTG9jYWxlSWRzIiB0eXBlPSJ1YTpMaXN0T2ZTdHJpbmciIG1pbk9jY3Vycz0iMCIg"
"bmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTZXJ2ZXJVcmlzIiB0"
"eXBlPSJ1YTpMaXN0T2ZTdHJpbmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQog"
"ICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFt"
"ZT0iRmluZFNlcnZlcnNSZXF1ZXN0IiB0eXBlPSJ0bnM6RmluZFNlcnZlcnNSZXF1ZXN0IiAvPg0K"
"DQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJGaW5kU2VydmVyc1Jlc3BvbnNlIj4NCiAgICA8eHM6"
"YW5ub3RhdGlvbj4NCiAgICAgIDx4czpkb2N1bWVudGF0aW9uPkZpbmRzIHRoZSBzZXJ2ZXJzIGtu"
"b3duIHRvIHRoZSBkaXNjb3Zlcnkgc2VydmVyLjwveHM6ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hz"
"OmFubm90YXRpb24+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0i"
"UmVzcG9uc2VIZWFkZXIiIHR5cGU9InRuczpSZXNwb25zZUhlYWRlciIgbWluT2NjdXJzPSIwIiBu"
"aWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlNlcnZlcnMiIHR5cGU9"
"InRuczpMaXN0T2ZBcHBsaWNhdGlvbkRlc2NyaXB0aW9uIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxl"
"PSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4"
"czplbGVtZW50IG5hbWU9IkZpbmRTZXJ2ZXJzUmVzcG9uc2UiIHR5cGU9InRuczpGaW5kU2VydmVy"
"c1Jlc3BvbnNlIiAvPg0KDQogIDx4czplbGVtZW50IG5hbWU9IkFwcGxpY2F0aW9uSW5zdGFuY2VD"
"ZXJ0aWZpY2F0ZSIgdHlwZT0ieHM6YmFzZTY0QmluYXJ5IiAvPg0KDQogIDx4czpzaW1wbGVUeXBl"
"ICBuYW1lPSJNZXNzYWdlU2VjdXJpdHlNb2RlIj4NCiAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAg"
"IDx4czpkb2N1bWVudGF0aW9uPlRoZSB0eXBlIG9mIHNlY3VyaXR5IHRvIHVzZSBvbiBhIG1lc3Nh"
"Z2UuPC94czpkb2N1bWVudGF0aW9uPg0KICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICA8eHM6cmVz"
"dHJpY3Rpb24gYmFzZT0ieHM6c3RyaW5nIj4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0i"
"SW52YWxpZF8wIiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJOb25lXzEiIC8+DQog"
"ICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IlNpZ25fMiIgLz4NCiAgICAgIDx4czplbnVtZXJh"
"dGlvbiB2YWx1ZT0iU2lnbkFuZEVuY3J5cHRfMyIgLz4NCiAgICA8L3hzOnJlc3RyaWN0aW9uPg0K"
"ICA8L3hzOnNpbXBsZVR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ik1lc3NhZ2VTZWN1cml0eU1v"
"ZGUiIHR5cGU9InRuczpNZXNzYWdlU2VjdXJpdHlNb2RlIiAvPg0KDQogIDx4czpzaW1wbGVUeXBl"
"ICBuYW1lPSJVc2VyVG9rZW5UeXBlIj4NCiAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czpk"
"b2N1bWVudGF0aW9uPlRoZSBwb3NzaWJsZSB1c2VyIHRva2VuIHR5cGVzLjwveHM6ZG9jdW1lbnRh"
"dGlvbj4NCiAgICA8L3hzOmFubm90YXRpb24+DQogICAgPHhzOnJlc3RyaWN0aW9uIGJhc2U9Inhz"
"OnN0cmluZyI+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IkFub255bW91c18wIiAvPg0K"
"ICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJVc2VyTmFtZV8xIiAvPg0KICAgICAgPHhzOmVu"
"dW1lcmF0aW9uIHZhbHVlPSJDZXJ0aWZpY2F0ZV8yIiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9u"
"IHZhbHVlPSJJc3N1ZWRUb2tlbl8zIiAvPg0KICAgIDwveHM6cmVzdHJpY3Rpb24+DQogIDwveHM6"
"c2ltcGxlVHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iVXNlclRva2VuVHlwZSIgdHlwZT0idG5z"
"OlVzZXJUb2tlblR5cGUiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IlVzZXJUb2tlblBv"
"bGljeSI+DQogICAgPHhzOmFubm90YXRpb24+DQogICAgICA8eHM6ZG9jdW1lbnRhdGlvbj5EZXNj"
"cmliZXMgYSB1c2VyIHRva2VuIHRoYXQgY2FuIGJlIHVzZWQgd2l0aCBhIHNlcnZlci48L3hzOmRv"
"Y3VtZW50YXRpb24+DQogICAgPC94czphbm5vdGF0aW9uPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAg"
"ICAgIDx4czplbGVtZW50IG5hbWU9IlBvbGljeUlkIiB0eXBlPSJ4czpzdHJpbmciIG1pbk9jY3Vy"
"cz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJUb2tlblR5"
"cGUiIHR5cGU9InRuczpVc2VyVG9rZW5UeXBlIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6"
"ZWxlbWVudCBuYW1lPSJJc3N1ZWRUb2tlblR5cGUiIHR5cGU9InhzOnN0cmluZyIgbWluT2NjdXJz"
"PSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Iklzc3VlckVu"
"ZHBvaW50VXJsIiB0eXBlPSJ4czpzdHJpbmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUi"
"IC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTZWN1cml0eVBvbGljeVVyaSIgdHlwZT0ieHM6"
"c3RyaW5nIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVu"
"Y2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IlVzZXJUb2tlblBv"
"bGljeSIgdHlwZT0idG5zOlVzZXJUb2tlblBvbGljeSIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUg"
"bmFtZT0iTGlzdE9mVXNlclRva2VuUG9saWN5Ij4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8"
"eHM6ZWxlbWVudCBuYW1lPSJVc2VyVG9rZW5Qb2xpY3kiIHR5cGU9InRuczpVc2VyVG9rZW5Qb2xp"
"Y3kiIG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIG5pbGxhYmxlPSJ0cnVlIiAv"
"Pg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50"
"IG5hbWU9Ikxpc3RPZlVzZXJUb2tlblBvbGljeSIgdHlwZT0idG5zOkxpc3RPZlVzZXJUb2tlblBv"
"bGljeSIgbmlsbGFibGU9InRydWUiPjwveHM6ZWxlbWVudD4NCg0KICA8eHM6Y29tcGxleFR5cGUg"
"bmFtZT0iRW5kcG9pbnREZXNjcmlwdGlvbiI+DQogICAgPHhzOmFubm90YXRpb24+DQogICAgICA8"
"eHM6ZG9jdW1lbnRhdGlvbj5UaGUgZGVzY3JpcHRpb24gb2YgYSBlbmRwb2ludCB0aGF0IGNhbiBi"
"ZSB1c2VkIHRvIGFjY2VzcyBhIHNlcnZlci48L3hzOmRvY3VtZW50YXRpb24+DQogICAgPC94czph"
"bm5vdGF0aW9uPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkVu"
"ZHBvaW50VXJsIiB0eXBlPSJ4czpzdHJpbmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUi"
"IC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTZXJ2ZXIiIHR5cGU9InRuczpBcHBsaWNhdGlv"
"bkRlc2NyaXB0aW9uIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iU2VydmVyQ2VydGlmaWNhdGUiIHR5cGU9InhzOmJhc2U2NEJpbmFyeSIg"
"bWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9"
"IlNlY3VyaXR5TW9kZSIgdHlwZT0idG5zOk1lc3NhZ2VTZWN1cml0eU1vZGUiIG1pbk9jY3Vycz0i"
"MCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlNlY3VyaXR5UG9saWN5VXJpIiB0eXBlPSJ4"
"czpzdHJpbmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxl"
"bWVudCBuYW1lPSJVc2VySWRlbnRpdHlUb2tlbnMiIHR5cGU9InRuczpMaXN0T2ZVc2VyVG9rZW5Q"
"b2xpY3kiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVu"
"dCBuYW1lPSJUcmFuc3BvcnRQcm9maWxlVXJpIiB0eXBlPSJ4czpzdHJpbmciIG1pbk9jY3Vycz0i"
"MCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTZWN1cml0eUxl"
"dmVsIiB0eXBlPSJ4czp1bnNpZ25lZEJ5dGUiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICA8L3hzOnNl"
"cXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJFbmRwb2lu"
"dERlc2NyaXB0aW9uIiB0eXBlPSJ0bnM6RW5kcG9pbnREZXNjcmlwdGlvbiIgLz4NCg0KICA8eHM6"
"Y29tcGxleFR5cGUgbmFtZT0iTGlzdE9mRW5kcG9pbnREZXNjcmlwdGlvbiI+DQogICAgPHhzOnNl"
"cXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRW5kcG9pbnREZXNjcmlwdGlvbiIgdHlw"
"ZT0idG5zOkVuZHBvaW50RGVzY3JpcHRpb24iIG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJv"
"dW5kZWQiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29t"
"cGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ikxpc3RPZkVuZHBvaW50RGVzY3JpcHRpb24i"
"IHR5cGU9InRuczpMaXN0T2ZFbmRwb2ludERlc2NyaXB0aW9uIiBuaWxsYWJsZT0idHJ1ZSI+PC94"
"czplbGVtZW50Pg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJHZXRFbmRwb2ludHNSZXF1ZXN0"
"Ij4NCiAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czpkb2N1bWVudGF0aW9uPkdldHMgdGhl"
"IGVuZHBvaW50cyB1c2VkIGJ5IHRoZSBzZXJ2ZXIuPC94czpkb2N1bWVudGF0aW9uPg0KICAgIDwv"
"eHM6YW5ub3RhdGlvbj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1l"
"PSJSZXF1ZXN0SGVhZGVyIiB0eXBlPSJ0bnM6UmVxdWVzdEhlYWRlciIgbWluT2NjdXJzPSIwIiBu"
"aWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkVuZHBvaW50VXJsIiB0"
"eXBlPSJ4czpzdHJpbmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8"
"eHM6ZWxlbWVudCBuYW1lPSJMb2NhbGVJZHMiIHR5cGU9InVhOkxpc3RPZlN0cmluZyIgbWluT2Nj"
"dXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlByb2Zp"
"bGVVcmlzIiB0eXBlPSJ1YTpMaXN0T2ZTdHJpbmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRy"
"dWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVs"
"ZW1lbnQgbmFtZT0iR2V0RW5kcG9pbnRzUmVxdWVzdCIgdHlwZT0idG5zOkdldEVuZHBvaW50c1Jl"
"cXVlc3QiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IkdldEVuZHBvaW50c1Jlc3BvbnNl"
"Ij4NCiAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czpkb2N1bWVudGF0aW9uPkdldHMgdGhl"
"IGVuZHBvaW50cyB1c2VkIGJ5IHRoZSBzZXJ2ZXIuPC94czpkb2N1bWVudGF0aW9uPg0KICAgIDwv"
"eHM6YW5ub3RhdGlvbj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1l"
"PSJSZXNwb25zZUhlYWRlciIgdHlwZT0idG5zOlJlc3BvbnNlSGVhZGVyIiBtaW5PY2N1cnM9IjAi"
"IG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRW5kcG9pbnRzIiB0"
"eXBlPSJ0bnM6TGlzdE9mRW5kcG9pbnREZXNjcmlwdGlvbiIgbWluT2NjdXJzPSIwIiBuaWxsYWJs"
"ZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8"
"eHM6ZWxlbWVudCBuYW1lPSJHZXRFbmRwb2ludHNSZXNwb25zZSIgdHlwZT0idG5zOkdldEVuZHBv"
"aW50c1Jlc3BvbnNlIiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJSZWdpc3RlcmVkU2Vy"
"dmVyIj4NCiAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czpkb2N1bWVudGF0aW9uPlRoZSBp"
"bmZvcm1hdGlvbiByZXF1aXJlZCB0byByZWdpc3RlciBhIHNlcnZlciB3aXRoIGEgZGlzY292ZXJ5"
"IHNlcnZlci48L3hzOmRvY3VtZW50YXRpb24+DQogICAgPC94czphbm5vdGF0aW9uPg0KICAgIDx4"
"czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlNlcnZlclVyaSIgdHlwZT0ieHM6"
"c3RyaW5nIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1l"
"bnQgbmFtZT0iUHJvZHVjdFVyaSIgdHlwZT0ieHM6c3RyaW5nIiBtaW5PY2N1cnM9IjAiIG5pbGxh"
"YmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iU2VydmVyTmFtZXMiIHR5cGU9"
"InVhOkxpc3RPZkxvY2FsaXplZFRleHQiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+"
"DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTZXJ2ZXJUeXBlIiB0eXBlPSJ0bnM6QXBwbGljYXRp"
"b25UeXBlIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJHYXRld2F5"
"U2VydmVyVXJpIiB0eXBlPSJ4czpzdHJpbmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUi"
"IC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJEaXNjb3ZlcnlVcmxzIiB0eXBlPSJ1YTpMaXN0"
"T2ZTdHJpbmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxl"
"bWVudCBuYW1lPSJTZW1hcGhvcmVGaWxlUGF0aCIgdHlwZT0ieHM6c3RyaW5nIiBtaW5PY2N1cnM9"
"IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iSXNPbmxpbmUi"
"IHR5cGU9InhzOmJvb2xlYW4iIG1pbk9jY3Vycz0iMCIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0K"
"ICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJSZWdpc3RlcmVkU2VydmVy"
"IiB0eXBlPSJ0bnM6UmVnaXN0ZXJlZFNlcnZlciIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFt"
"ZT0iTGlzdE9mUmVnaXN0ZXJlZFNlcnZlciI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iUmVnaXN0ZXJlZFNlcnZlciIgdHlwZT0idG5zOlJlZ2lzdGVyZWRTZXJ2"
"ZXIiIG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIG5pbGxhYmxlPSJ0cnVlIiAv"
"Pg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50"
"IG5hbWU9Ikxpc3RPZlJlZ2lzdGVyZWRTZXJ2ZXIiIHR5cGU9InRuczpMaXN0T2ZSZWdpc3RlcmVk"
"U2VydmVyIiBuaWxsYWJsZT0idHJ1ZSI+PC94czplbGVtZW50Pg0KDQogIDx4czpjb21wbGV4VHlw"
"ZSBuYW1lPSJSZWdpc3RlclNlcnZlclJlcXVlc3QiPg0KICAgIDx4czphbm5vdGF0aW9uPg0KICAg"
"ICAgPHhzOmRvY3VtZW50YXRpb24+UmVnaXN0ZXJzIGEgc2VydmVyIHdpdGggdGhlIGRpc2NvdmVy"
"eSBzZXJ2ZXIuPC94czpkb2N1bWVudGF0aW9uPg0KICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICA8"
"eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZXF1ZXN0SGVhZGVyIiB0eXBl"
"PSJ0bnM6UmVxdWVzdEhlYWRlciIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAg"
"ICAgIDx4czplbGVtZW50IG5hbWU9IlNlcnZlciIgdHlwZT0idG5zOlJlZ2lzdGVyZWRTZXJ2ZXIi"
"IG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAg"
"PC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iUmVnaXN0ZXJTZXJ2ZXJSZXF1"
"ZXN0IiB0eXBlPSJ0bnM6UmVnaXN0ZXJTZXJ2ZXJSZXF1ZXN0IiAvPg0KDQogIDx4czpjb21wbGV4"
"VHlwZSBuYW1lPSJSZWdpc3RlclNlcnZlclJlc3BvbnNlIj4NCiAgICA8eHM6YW5ub3RhdGlvbj4N"
"CiAgICAgIDx4czpkb2N1bWVudGF0aW9uPlJlZ2lzdGVycyBhIHNlcnZlciB3aXRoIHRoZSBkaXNj"
"b3Zlcnkgc2VydmVyLjwveHM6ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hzOmFubm90YXRpb24+DQog"
"ICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVzcG9uc2VIZWFkZXIi"
"IHR5cGU9InRuczpSZXNwb25zZUhlYWRlciIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIg"
"Lz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVu"
"dCBuYW1lPSJSZWdpc3RlclNlcnZlclJlc3BvbnNlIiB0eXBlPSJ0bnM6UmVnaXN0ZXJTZXJ2ZXJS"
"ZXNwb25zZSIgLz4NCg0KICA8eHM6c2ltcGxlVHlwZSAgbmFtZT0iU2VjdXJpdHlUb2tlblJlcXVl"
"c3RUeXBlIj4NCiAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czpkb2N1bWVudGF0aW9uPklu"
"ZGljYXRlcyB3aGV0aGVyIGEgdG9rZW4gaWYgYmVpbmcgY3JlYXRlZCBvciByZW5ld2VkLjwveHM6"
"ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hzOmFubm90YXRpb24+DQogICAgPHhzOnJlc3RyaWN0aW9u"
"IGJhc2U9InhzOnN0cmluZyI+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9Iklzc3VlXzAi"
"IC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IlJlbmV3XzEiIC8+DQogICAgPC94czpy"
"ZXN0cmljdGlvbj4NCiAgPC94czpzaW1wbGVUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJTZWN1"
"cml0eVRva2VuUmVxdWVzdFR5cGUiIHR5cGU9InRuczpTZWN1cml0eVRva2VuUmVxdWVzdFR5cGUi"
"IC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IkNoYW5uZWxTZWN1cml0eVRva2VuIj4NCiAg"
"ICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czpkb2N1bWVudGF0aW9uPlRoZSB0b2tlbiB0aGF0"
"IGlkZW50aWZpZXMgYSBzZXQgb2Yga2V5cyBmb3IgYW4gYWN0aXZlIHNlY3VyZSBjaGFubmVsLjwv"
"eHM6ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hzOmFubm90YXRpb24+DQogICAgPHhzOnNlcXVlbmNl"
"Pg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iQ2hhbm5lbElkIiB0eXBlPSJ4czp1bnNpZ25lZElu"
"dCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iVG9rZW5JZCIgdHlw"
"ZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5h"
"bWU9IkNyZWF0ZWRBdCIgdHlwZT0ieHM6ZGF0ZVRpbWUiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAg"
"IDx4czplbGVtZW50IG5hbWU9IlJldmlzZWRMaWZldGltZSIgdHlwZT0ieHM6dW5zaWduZWRJbnQi"
"IG1pbk9jY3Vycz0iMCIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBl"
"Pg0KICA8eHM6ZWxlbWVudCBuYW1lPSJDaGFubmVsU2VjdXJpdHlUb2tlbiIgdHlwZT0idG5zOkNo"
"YW5uZWxTZWN1cml0eVRva2VuIiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJPcGVuU2Vj"
"dXJlQ2hhbm5lbFJlcXVlc3QiPg0KICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmRvY3Vt"
"ZW50YXRpb24+Q3JlYXRlcyBhIHNlY3VyZSBjaGFubmVsIHdpdGggYSBzZXJ2ZXIuPC94czpkb2N1"
"bWVudGF0aW9uPg0KICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAg"
"ICA8eHM6ZWxlbWVudCBuYW1lPSJSZXF1ZXN0SGVhZGVyIiB0eXBlPSJ0bnM6UmVxdWVzdEhlYWRl"
"ciIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5h"
"bWU9IkNsaWVudFByb3RvY29sVmVyc2lvbiIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vy"
"cz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJlcXVlc3RUeXBlIiB0eXBlPSJ0bnM6"
"U2VjdXJpdHlUb2tlblJlcXVlc3RUeXBlIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxl"
"bWVudCBuYW1lPSJTZWN1cml0eU1vZGUiIHR5cGU9InRuczpNZXNzYWdlU2VjdXJpdHlNb2RlIiBt"
"aW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJDbGllbnROb25jZSIgdHlw"
"ZT0ieHM6YmFzZTY0QmluYXJ5IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAg"
"ICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVxdWVzdGVkTGlmZXRpbWUiIHR5cGU9InhzOnVuc2lnbmVk"
"SW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4"
"VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iT3BlblNlY3VyZUNoYW5uZWxSZXF1ZXN0IiB0eXBl"
"PSJ0bnM6T3BlblNlY3VyZUNoYW5uZWxSZXF1ZXN0IiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBu"
"YW1lPSJPcGVuU2VjdXJlQ2hhbm5lbFJlc3BvbnNlIj4NCiAgICA8eHM6YW5ub3RhdGlvbj4NCiAg"
"ICAgIDx4czpkb2N1bWVudGF0aW9uPkNyZWF0ZXMgYSBzZWN1cmUgY2hhbm5lbCB3aXRoIGEgc2Vy"
"dmVyLjwveHM6ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hzOmFubm90YXRpb24+DQogICAgPHhzOnNl"
"cXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVzcG9uc2VIZWFkZXIiIHR5cGU9InRu"
"czpSZXNwb25zZUhlYWRlciIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAg"
"IDx4czplbGVtZW50IG5hbWU9IlNlcnZlclByb3RvY29sVmVyc2lvbiIgdHlwZT0ieHM6dW5zaWdu"
"ZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlNlY3VyaXR5"
"VG9rZW4iIHR5cGU9InRuczpDaGFubmVsU2VjdXJpdHlUb2tlbiIgbWluT2NjdXJzPSIwIiBuaWxs"
"YWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlNlcnZlck5vbmNlIiB0eXBl"
"PSJ4czpiYXNlNjRCaW5hcnkiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAg"
"PC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0i"
"T3BlblNlY3VyZUNoYW5uZWxSZXNwb25zZSIgdHlwZT0idG5zOk9wZW5TZWN1cmVDaGFubmVsUmVz"
"cG9uc2UiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IkNsb3NlU2VjdXJlQ2hhbm5lbFJl"
"cXVlc3QiPg0KICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmRvY3VtZW50YXRpb24+Q2xv"
"c2VzIGEgc2VjdXJlIGNoYW5uZWwuPC94czpkb2N1bWVudGF0aW9uPg0KICAgIDwveHM6YW5ub3Rh"
"dGlvbj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZXF1ZXN0"
"SGVhZGVyIiB0eXBlPSJ0bnM6UmVxdWVzdEhlYWRlciIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0i"
"dHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6"
"ZWxlbWVudCBuYW1lPSJDbG9zZVNlY3VyZUNoYW5uZWxSZXF1ZXN0IiB0eXBlPSJ0bnM6Q2xvc2VT"
"ZWN1cmVDaGFubmVsUmVxdWVzdCIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iQ2xvc2VT"
"ZWN1cmVDaGFubmVsUmVzcG9uc2UiPg0KICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmRv"
"Y3VtZW50YXRpb24+Q2xvc2VzIGEgc2VjdXJlIGNoYW5uZWwuPC94czpkb2N1bWVudGF0aW9uPg0K"
"ICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVu"
"dCBuYW1lPSJSZXNwb25zZUhlYWRlciIgdHlwZT0idG5zOlJlc3BvbnNlSGVhZGVyIiBtaW5PY2N1"
"cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29t"
"cGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IkNsb3NlU2VjdXJlQ2hhbm5lbFJlc3BvbnNl"
"IiB0eXBlPSJ0bnM6Q2xvc2VTZWN1cmVDaGFubmVsUmVzcG9uc2UiIC8+DQoNCiAgPHhzOmNvbXBs"
"ZXhUeXBlIG5hbWU9IlNpZ25lZFNvZnR3YXJlQ2VydGlmaWNhdGUiPg0KICAgIDx4czphbm5vdGF0"
"aW9uPg0KICAgICAgPHhzOmRvY3VtZW50YXRpb24+QSBzb2Z0d2FyZSBjZXJ0aWZpY2F0ZSB3aXRo"
"IGEgZGlnaXRhbCBzaWduYXR1cmUuPC94czpkb2N1bWVudGF0aW9uPg0KICAgIDwveHM6YW5ub3Rh"
"dGlvbj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJDZXJ0aWZp"
"Y2F0ZURhdGEiIHR5cGU9InhzOmJhc2U2NEJpbmFyeSIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0i"
"dHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlNpZ25hdHVyZSIgdHlwZT0ieHM6YmFz"
"ZTY0QmluYXJ5IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2Vx"
"dWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IlNpZ25lZFNv"
"ZnR3YXJlQ2VydGlmaWNhdGUiIHR5cGU9InRuczpTaWduZWRTb2Z0d2FyZUNlcnRpZmljYXRlIiAv"
"Pg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJMaXN0T2ZTaWduZWRTb2Z0d2FyZUNlcnRpZmlj"
"YXRlIj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTaWduZWRT"
"b2Z0d2FyZUNlcnRpZmljYXRlIiB0eXBlPSJ0bnM6U2lnbmVkU29mdHdhcmVDZXJ0aWZpY2F0ZSIg"
"bWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRlZCIgbmlsbGFibGU9InRydWUiIC8+DQog"
"ICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFt"
"ZT0iTGlzdE9mU2lnbmVkU29mdHdhcmVDZXJ0aWZpY2F0ZSIgdHlwZT0idG5zOkxpc3RPZlNpZ25l"
"ZFNvZnR3YXJlQ2VydGlmaWNhdGUiIG5pbGxhYmxlPSJ0cnVlIj48L3hzOmVsZW1lbnQ+DQoNCiAg"
"PHhzOmVsZW1lbnQgbmFtZT0iU2Vzc2lvbkF1dGhlbnRpY2F0aW9uVG9rZW4iIHR5cGU9InVhOk5v"
"ZGVJZCIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iU2lnbmF0dXJlRGF0YSI+DQogICAg"
"PHhzOmFubm90YXRpb24+DQogICAgICA8eHM6ZG9jdW1lbnRhdGlvbj5BIGRpZ2l0YWwgc2lnbmF0"
"dXJlLjwveHM6ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hzOmFubm90YXRpb24+DQogICAgPHhzOnNl"
"cXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iQWxnb3JpdGhtIiB0eXBlPSJ4czpzdHJp"
"bmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBu"
"YW1lPSJTaWduYXR1cmUiIHR5cGU9InhzOmJhc2U2NEJpbmFyeSIgbWluT2NjdXJzPSIwIiBuaWxs"
"YWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0K"
"ICA8eHM6ZWxlbWVudCBuYW1lPSJTaWduYXR1cmVEYXRhIiB0eXBlPSJ0bnM6U2lnbmF0dXJlRGF0"
"YSIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iQ3JlYXRlU2Vzc2lvblJlcXVlc3QiPg0K"
"ICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmRvY3VtZW50YXRpb24+Q3JlYXRlcyBhIG5l"
"dyBzZXNzaW9uIHdpdGggdGhlIHNlcnZlci48L3hzOmRvY3VtZW50YXRpb24+DQogICAgPC94czph"
"bm5vdGF0aW9uPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJl"
"cXVlc3RIZWFkZXIiIHR5cGU9InRuczpSZXF1ZXN0SGVhZGVyIiBtaW5PY2N1cnM9IjAiIG5pbGxh"
"YmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iQ2xpZW50RGVzY3JpcHRpb24i"
"IHR5cGU9InRuczpBcHBsaWNhdGlvbkRlc2NyaXB0aW9uIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxl"
"PSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iU2VydmVyVXJpIiB0eXBlPSJ4czpz"
"dHJpbmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVu"
"dCBuYW1lPSJFbmRwb2ludFVybCIgdHlwZT0ieHM6c3RyaW5nIiBtaW5PY2N1cnM9IjAiIG5pbGxh"
"YmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iU2Vzc2lvbk5hbWUiIHR5cGU9"
"InhzOnN0cmluZyIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czpl"
"bGVtZW50IG5hbWU9IkNsaWVudE5vbmNlIiB0eXBlPSJ4czpiYXNlNjRCaW5hcnkiIG1pbk9jY3Vy"
"cz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJDbGllbnRD"
"ZXJ0aWZpY2F0ZSIgdHlwZT0ieHM6YmFzZTY0QmluYXJ5IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxl"
"PSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVxdWVzdGVkU2Vzc2lvblRpbWVv"
"dXQiIHR5cGU9InhzOmRvdWJsZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQg"
"bmFtZT0iTWF4UmVzcG9uc2VNZXNzYWdlU2l6ZSIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9j"
"Y3Vycz0iMCIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8"
"eHM6ZWxlbWVudCBuYW1lPSJDcmVhdGVTZXNzaW9uUmVxdWVzdCIgdHlwZT0idG5zOkNyZWF0ZVNl"
"c3Npb25SZXF1ZXN0IiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJDcmVhdGVTZXNzaW9u"
"UmVzcG9uc2UiPg0KICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmRvY3VtZW50YXRpb24+"
"Q3JlYXRlcyBhIG5ldyBzZXNzaW9uIHdpdGggdGhlIHNlcnZlci48L3hzOmRvY3VtZW50YXRpb24+"
"DQogICAgPC94czphbm5vdGF0aW9uPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVt"
"ZW50IG5hbWU9IlJlc3BvbnNlSGVhZGVyIiB0eXBlPSJ0bnM6UmVzcG9uc2VIZWFkZXIiIG1pbk9j"
"Y3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTZXNz"
"aW9uSWQiIHR5cGU9InVhOk5vZGVJZCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4N"
"CiAgICAgIDx4czplbGVtZW50IG5hbWU9IkF1dGhlbnRpY2F0aW9uVG9rZW4iIHR5cGU9InVhOk5v"
"ZGVJZCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50"
"IG5hbWU9IlJldmlzZWRTZXNzaW9uVGltZW91dCIgdHlwZT0ieHM6ZG91YmxlIiBtaW5PY2N1cnM9"
"IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTZXJ2ZXJOb25jZSIgdHlwZT0ieHM6YmFz"
"ZTY0QmluYXJ5IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVs"
"ZW1lbnQgbmFtZT0iU2VydmVyQ2VydGlmaWNhdGUiIHR5cGU9InhzOmJhc2U2NEJpbmFyeSIgbWlu"
"T2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlNl"
"cnZlckVuZHBvaW50cyIgdHlwZT0idG5zOkxpc3RPZkVuZHBvaW50RGVzY3JpcHRpb24iIG1pbk9j"
"Y3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTZXJ2"
"ZXJTb2Z0d2FyZUNlcnRpZmljYXRlcyIgdHlwZT0idG5zOkxpc3RPZlNpZ25lZFNvZnR3YXJlQ2Vy"
"dGlmaWNhdGUiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxl"
"bWVudCBuYW1lPSJTZXJ2ZXJTaWduYXR1cmUiIHR5cGU9InRuczpTaWduYXR1cmVEYXRhIiBtaW5P"
"Y2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iTWF4"
"UmVxdWVzdE1lc3NhZ2VTaXplIiB0eXBlPSJ4czp1bnNpZ25lZEludCIgbWluT2NjdXJzPSIwIiAv"
"Pg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50"
"IG5hbWU9IkNyZWF0ZVNlc3Npb25SZXNwb25zZSIgdHlwZT0idG5zOkNyZWF0ZVNlc3Npb25SZXNw"
"b25zZSIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iVXNlcklkZW50aXR5VG9rZW4iPg0K"
"ICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmRvY3VtZW50YXRpb24+QSBiYXNlIHR5cGUg"
"Zm9yIGEgdXNlciBpZGVudGl0eSB0b2tlbi48L3hzOmRvY3VtZW50YXRpb24+DQogICAgPC94czph"
"bm5vdGF0aW9uPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlBv"
"bGljeUlkIiB0eXBlPSJ4czpzdHJpbmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+"
"DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQg"
"bmFtZT0iVXNlcklkZW50aXR5VG9rZW4iIHR5cGU9InRuczpVc2VySWRlbnRpdHlUb2tlbiIgLz4N"
"Cg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iQW5vbnltb3VzSWRlbnRpdHlUb2tlbiI+DQogICAg"
"PHhzOmFubm90YXRpb24+DQogICAgICA8eHM6ZG9jdW1lbnRhdGlvbj5BIHRva2VuIHJlcHJlc2Vu"
"dGluZyBhbiBhbm9ueW1vdXMgdXNlci48L3hzOmRvY3VtZW50YXRpb24+DQogICAgPC94czphbm5v"
"dGF0aW9uPg0KICAgIDx4czpjb21wbGV4Q29udGVudCBtaXhlZD0iZmFsc2UiPg0KICAgICAgPHhz"
"OmV4dGVuc2lvbiBiYXNlPSJ0bnM6VXNlcklkZW50aXR5VG9rZW4iPg0KICAgICAgICA8eHM6c2Vx"
"dWVuY2U+DQogICAgICAgIDwveHM6c2VxdWVuY2U+DQogICAgICA8L3hzOmV4dGVuc2lvbj4NCiAg"
"ICA8L3hzOmNvbXBsZXhDb250ZW50Pg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVu"
"dCBuYW1lPSJBbm9ueW1vdXNJZGVudGl0eVRva2VuIiB0eXBlPSJ0bnM6QW5vbnltb3VzSWRlbnRp"
"dHlUb2tlbiIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iVXNlck5hbWVJZGVudGl0eVRv"
"a2VuIj4NCiAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czpkb2N1bWVudGF0aW9uPkEgdG9r"
"ZW4gcmVwcmVzZW50aW5nIGEgdXNlciBpZGVudGlmaWVkIGJ5IGEgdXNlciBuYW1lIGFuZCBwYXNz"
"d29yZC48L3hzOmRvY3VtZW50YXRpb24+DQogICAgPC94czphbm5vdGF0aW9uPg0KICAgIDx4czpj"
"b21wbGV4Q29udGVudCBtaXhlZD0iZmFsc2UiPg0KICAgICAgPHhzOmV4dGVuc2lvbiBiYXNlPSJ0"
"bnM6VXNlcklkZW50aXR5VG9rZW4iPg0KICAgICAgICA8eHM6c2VxdWVuY2U+DQogICAgICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iVXNlck5hbWUiIHR5cGU9InhzOnN0cmluZyIgbWluT2NjdXJzPSIw"
"IiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJQYXNzd29y"
"ZCIgdHlwZT0ieHM6YmFzZTY0QmluYXJ5IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAv"
"Pg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IkVuY3J5cHRpb25BbGdvcml0aG0iIHR5cGU9"
"InhzOnN0cmluZyIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgICAgPC94"
"czpzZXF1ZW5jZT4NCiAgICAgIDwveHM6ZXh0ZW5zaW9uPg0KICAgIDwveHM6Y29tcGxleENvbnRl"
"bnQ+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IlVzZXJOYW1lSWRl"
"bnRpdHlUb2tlbiIgdHlwZT0idG5zOlVzZXJOYW1lSWRlbnRpdHlUb2tlbiIgLz4NCg0KICA8eHM6"
"Y29tcGxleFR5cGUgbmFtZT0iWDUwOUlkZW50aXR5VG9rZW4iPg0KICAgIDx4czphbm5vdGF0aW9u"
"Pg0KICAgICAgPHhzOmRvY3VtZW50YXRpb24+QSB0b2tlbiByZXByZXNlbnRpbmcgYSB1c2VyIGlk"
"ZW50aWZpZWQgYnkgYW4gWDUwOSBjZXJ0aWZpY2F0ZS48L3hzOmRvY3VtZW50YXRpb24+DQogICAg"
"PC94czphbm5vdGF0aW9uPg0KICAgIDx4czpjb21wbGV4Q29udGVudCBtaXhlZD0iZmFsc2UiPg0K"
"ICAgICAgPHhzOmV4dGVuc2lvbiBiYXNlPSJ0bnM6VXNlcklkZW50aXR5VG9rZW4iPg0KICAgICAg"
"ICA8eHM6c2VxdWVuY2U+DQogICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iQ2VydGlmaWNhdGVE"
"YXRhIiB0eXBlPSJ4czpiYXNlNjRCaW5hcnkiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUi"
"IC8+DQogICAgICAgIDwveHM6c2VxdWVuY2U+DQogICAgICA8L3hzOmV4dGVuc2lvbj4NCiAgICA8"
"L3hzOmNvbXBsZXhDb250ZW50Pg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBu"
"YW1lPSJYNTA5SWRlbnRpdHlUb2tlbiIgdHlwZT0idG5zOlg1MDlJZGVudGl0eVRva2VuIiAvPg0K"
"DQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJJc3N1ZWRJZGVudGl0eVRva2VuIj4NCiAgICA8eHM6"
"YW5ub3RhdGlvbj4NCiAgICAgIDx4czpkb2N1bWVudGF0aW9uPkEgdG9rZW4gcmVwcmVzZW50aW5n"
"IGEgdXNlciBpZGVudGlmaWVkIGJ5IGEgV1MtU2VjdXJpdHkgWE1MIHRva2VuLjwveHM6ZG9jdW1l"
"bnRhdGlvbj4NCiAgICA8L3hzOmFubm90YXRpb24+DQogICAgPHhzOmNvbXBsZXhDb250ZW50IG1p"
"eGVkPSJmYWxzZSI+DQogICAgICA8eHM6ZXh0ZW5zaW9uIGJhc2U9InRuczpVc2VySWRlbnRpdHlU"
"b2tlbiI+DQogICAgICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1l"
"PSJUb2tlbkRhdGEiIHR5cGU9InhzOmJhc2U2NEJpbmFyeSIgbWluT2NjdXJzPSIwIiBuaWxsYWJs"
"ZT0idHJ1ZSIgLz4NCiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJFbmNyeXB0aW9uQWxnb3Jp"
"dGhtIiB0eXBlPSJ4czpzdHJpbmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQog"
"ICAgICAgIDwveHM6c2VxdWVuY2U+DQogICAgICA8L3hzOmV4dGVuc2lvbj4NCiAgICA8L3hzOmNv"
"bXBsZXhDb250ZW50Pg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJJ"
"c3N1ZWRJZGVudGl0eVRva2VuIiB0eXBlPSJ0bnM6SXNzdWVkSWRlbnRpdHlUb2tlbiIgLz4NCg0K"
"ICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iQWN0aXZhdGVTZXNzaW9uUmVxdWVzdCI+DQogICAgPHhz"
"OmFubm90YXRpb24+DQogICAgICA8eHM6ZG9jdW1lbnRhdGlvbj5BY3RpdmF0ZXMgYSBzZXNzaW9u"
"IHdpdGggdGhlIHNlcnZlci48L3hzOmRvY3VtZW50YXRpb24+DQogICAgPC94czphbm5vdGF0aW9u"
"Pg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJlcXVlc3RIZWFk"
"ZXIiIHR5cGU9InRuczpSZXF1ZXN0SGVhZGVyIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVl"
"IiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iQ2xpZW50U2lnbmF0dXJlIiB0eXBlPSJ0bnM6"
"U2lnbmF0dXJlRGF0YSIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4"
"czplbGVtZW50IG5hbWU9IkNsaWVudFNvZnR3YXJlQ2VydGlmaWNhdGVzIiB0eXBlPSJ0bnM6TGlz"
"dE9mU2lnbmVkU29mdHdhcmVDZXJ0aWZpY2F0ZSIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1"
"ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkxvY2FsZUlkcyIgdHlwZT0idWE6TGlzdE9m"
"U3RyaW5nIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1l"
"bnQgbmFtZT0iVXNlcklkZW50aXR5VG9rZW4iIHR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCIgbWlu"
"T2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlVz"
"ZXJUb2tlblNpZ25hdHVyZSIgdHlwZT0idG5zOlNpZ25hdHVyZURhdGEiIG1pbk9jY3Vycz0iMCIg"
"bmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlw"
"ZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iQWN0aXZhdGVTZXNzaW9uUmVxdWVzdCIgdHlwZT0idG5z"
"OkFjdGl2YXRlU2Vzc2lvblJlcXVlc3QiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IkFj"
"dGl2YXRlU2Vzc2lvblJlc3BvbnNlIj4NCiAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czpk"
"b2N1bWVudGF0aW9uPkFjdGl2YXRlcyBhIHNlc3Npb24gd2l0aCB0aGUgc2VydmVyLjwveHM6ZG9j"
"dW1lbnRhdGlvbj4NCiAgICA8L3hzOmFubm90YXRpb24+DQogICAgPHhzOnNlcXVlbmNlPg0KICAg"
"ICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVzcG9uc2VIZWFkZXIiIHR5cGU9InRuczpSZXNwb25zZUhl"
"YWRlciIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50"
"IG5hbWU9IlNlcnZlck5vbmNlIiB0eXBlPSJ4czpiYXNlNjRCaW5hcnkiIG1pbk9jY3Vycz0iMCIg"
"bmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZXN1bHRzIiB0eXBl"
"PSJ1YTpMaXN0T2ZTdGF0dXNDb2RlIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0K"
"ICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRGlhZ25vc3RpY0luZm9zIiB0eXBlPSJ1YTpMaXN0T2ZE"
"aWFnbm9zdGljSW5mbyIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hz"
"OnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJBY3Rp"
"dmF0ZVNlc3Npb25SZXNwb25zZSIgdHlwZT0idG5zOkFjdGl2YXRlU2Vzc2lvblJlc3BvbnNlIiAv"
"Pg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJDbG9zZVNlc3Npb25SZXF1ZXN0Ij4NCiAgICA8"
"eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czpkb2N1bWVudGF0aW9uPkNsb3NlcyBhIHNlc3Npb24g"
"d2l0aCB0aGUgc2VydmVyLjwveHM6ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hzOmFubm90YXRpb24+"
"DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVxdWVzdEhlYWRl"
"ciIgdHlwZT0idG5zOlJlcXVlc3RIZWFkZXIiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUi"
"IC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJEZWxldGVTdWJzY3JpcHRpb25zIiB0eXBlPSJ4"
"czpib29sZWFuIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpj"
"b21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iQ2xvc2VTZXNzaW9uUmVxdWVzdCIgdHlw"
"ZT0idG5zOkNsb3NlU2Vzc2lvblJlcXVlc3QiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9"
"IkNsb3NlU2Vzc2lvblJlc3BvbnNlIj4NCiAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czpk"
"b2N1bWVudGF0aW9uPkNsb3NlcyBhIHNlc3Npb24gd2l0aCB0aGUgc2VydmVyLjwveHM6ZG9jdW1l"
"bnRhdGlvbj4NCiAgICA8L3hzOmFubm90YXRpb24+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iUmVzcG9uc2VIZWFkZXIiIHR5cGU9InRuczpSZXNwb25zZUhlYWRl"
"ciIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0K"
"ICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJDbG9zZVNlc3Npb25SZXNw"
"b25zZSIgdHlwZT0idG5zOkNsb3NlU2Vzc2lvblJlc3BvbnNlIiAvPg0KDQogIDx4czpjb21wbGV4"
"VHlwZSBuYW1lPSJDYW5jZWxSZXF1ZXN0Ij4NCiAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4"
"czpkb2N1bWVudGF0aW9uPkNhbmNlbHMgYW4gb3V0c3RhbmRpbmcgcmVxdWVzdC48L3hzOmRvY3Vt"
"ZW50YXRpb24+DQogICAgPC94czphbm5vdGF0aW9uPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAg"
"IDx4czplbGVtZW50IG5hbWU9IlJlcXVlc3RIZWFkZXIiIHR5cGU9InRuczpSZXF1ZXN0SGVhZGVy"
"IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFt"
"ZT0iUmVxdWVzdEhhbmRsZSIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4N"
"CiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBu"
"YW1lPSJDYW5jZWxSZXF1ZXN0IiB0eXBlPSJ0bnM6Q2FuY2VsUmVxdWVzdCIgLz4NCg0KICA8eHM6"
"Y29tcGxleFR5cGUgbmFtZT0iQ2FuY2VsUmVzcG9uc2UiPg0KICAgIDx4czphbm5vdGF0aW9uPg0K"
"ICAgICAgPHhzOmRvY3VtZW50YXRpb24+Q2FuY2VscyBhbiBvdXRzdGFuZGluZyByZXF1ZXN0Ljwv"
"eHM6ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hzOmFubm90YXRpb24+DQogICAgPHhzOnNlcXVlbmNl"
"Pg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVzcG9uc2VIZWFkZXIiIHR5cGU9InRuczpSZXNw"
"b25zZUhlYWRlciIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czpl"
"bGVtZW50IG5hbWU9IkNhbmNlbENvdW50IiB0eXBlPSJ4czp1bnNpZ25lZEludCIgbWluT2NjdXJz"
"PSIwIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czpl"
"bGVtZW50IG5hbWU9IkNhbmNlbFJlc3BvbnNlIiB0eXBlPSJ0bnM6Q2FuY2VsUmVzcG9uc2UiIC8+"
"DQoNCiAgPHhzOnNpbXBsZVR5cGUgIG5hbWU9Ik5vZGVBdHRyaWJ1dGVzTWFzayI+DQogICAgPHhz"
"OmFubm90YXRpb24+DQogICAgICA8eHM6ZG9jdW1lbnRhdGlvbj5UaGUgYml0cyB1c2VkIHRvIHNw"
"ZWNpZnkgZGVmYXVsdCBhdHRyaWJ1dGVzIGZvciBhIG5ldyBub2RlLjwveHM6ZG9jdW1lbnRhdGlv"
"bj4NCiAgICA8L3hzOmFubm90YXRpb24+DQogICAgPHhzOnJlc3RyaWN0aW9uIGJhc2U9InhzOnN0"
"cmluZyI+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9Ik5vbmVfMCIgLz4NCiAgICAgIDx4"
"czplbnVtZXJhdGlvbiB2YWx1ZT0iQWNjZXNzTGV2ZWxfMSIgLz4NCiAgICAgIDx4czplbnVtZXJh"
"dGlvbiB2YWx1ZT0iQXJyYXlEaW1lbnNpb25zXzIiIC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24g"
"dmFsdWU9IkJyb3dzZU5hbWVfNCIgLz4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iQ29u"
"dGFpbnNOb0xvb3BzXzgiIC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IkRhdGFUeXBl"
"XzE2IiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJEZXNjcmlwdGlvbl8zMiIgLz4N"
"CiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iRGlzcGxheU5hbWVfNjQiIC8+DQogICAgICA8"
"eHM6ZW51bWVyYXRpb24gdmFsdWU9IkV2ZW50Tm90aWZpZXJfMTI4IiAvPg0KICAgICAgPHhzOmVu"
"dW1lcmF0aW9uIHZhbHVlPSJFeGVjdXRhYmxlXzI1NiIgLz4NCiAgICAgIDx4czplbnVtZXJhdGlv"
"biB2YWx1ZT0iSGlzdG9yaXppbmdfNTEyIiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVl"
"PSJJbnZlcnNlTmFtZV8xMDI0IiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJJc0Fi"
"c3RyYWN0XzIwNDgiIC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9Ik1pbmltdW1TYW1w"
"bGluZ0ludGVydmFsXzQwOTYiIC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9Ik5vZGVD"
"bGFzc184MTkyIiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJOb2RlSWRfMTYzODQi"
"IC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IlN5bW1ldHJpY18zMjc2OCIgLz4NCiAg"
"ICAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iVXNlckFjY2Vzc0xldmVsXzY1NTM2IiAvPg0KICAg"
"ICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJVc2VyRXhlY3V0YWJsZV8xMzEwNzIiIC8+DQogICAg"
"ICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IlVzZXJXcml0ZU1hc2tfMjYyMTQ0IiAvPg0KICAgICAg"
"PHhzOmVudW1lcmF0aW9uIHZhbHVlPSJWYWx1ZVJhbmtfNTI0Mjg4IiAvPg0KICAgICAgPHhzOmVu"
"dW1lcmF0aW9uIHZhbHVlPSJXcml0ZU1hc2tfMTA0ODU3NiIgLz4NCiAgICAgIDx4czplbnVtZXJh"
"dGlvbiB2YWx1ZT0iVmFsdWVfMjA5NzE1MiIgLz4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1"
"ZT0iQWxsXzQxOTQzMDMiIC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IkJhc2VOb2Rl"
"XzEzMzUzOTYiIC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9Ik9iamVjdF8xMzM1NTI0"
"IiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJPYmplY3RUeXBlT3JEYXRhVHlwZV8x"
"MzM3NDQ0IiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJWYXJpYWJsZV80MDI2OTk5"
"IiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJWYXJpYWJsZVR5cGVfMzk1ODkwMiIg"
"Lz4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iTWV0aG9kXzE0NjY3MjQiIC8+DQogICAg"
"ICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IlJlZmVyZW5jZVR5cGVfMTM3MTIzNiIgLz4NCiAgICAg"
"IDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iVmlld18xMzM1NTMyIiAvPg0KICAgIDwveHM6cmVzdHJp"
"Y3Rpb24+DQogIDwveHM6c2ltcGxlVHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTm9kZUF0dHJp"
"YnV0ZXNNYXNrIiB0eXBlPSJ0bnM6Tm9kZUF0dHJpYnV0ZXNNYXNrIiAvPg0KDQogIDx4czpjb21w"
"bGV4VHlwZSBuYW1lPSJOb2RlQXR0cmlidXRlcyI+DQogICAgPHhzOmFubm90YXRpb24+DQogICAg"
"ICA8eHM6ZG9jdW1lbnRhdGlvbj5UaGUgYmFzZSBhdHRyaWJ1dGVzIGZvciBhbGwgbm9kZXMuPC94"
"czpkb2N1bWVudGF0aW9uPg0KICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICA8eHM6c2VxdWVuY2U+"
"DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTcGVjaWZpZWRBdHRyaWJ1dGVzIiB0eXBlPSJ4czp1"
"bnNpZ25lZEludCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRGlz"
"cGxheU5hbWUiIHR5cGU9InVhOkxvY2FsaXplZFRleHQiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9"
"InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJEZXNjcmlwdGlvbiIgdHlwZT0idWE6"
"TG9jYWxpemVkVGV4dCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4"
"czplbGVtZW50IG5hbWU9IldyaXRlTWFzayIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vy"
"cz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlVzZXJXcml0ZU1hc2siIHR5cGU9Inhz"
"OnVuc2lnbmVkSW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94"
"czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTm9kZUF0dHJpYnV0ZXMiIHR5cGU9"
"InRuczpOb2RlQXR0cmlidXRlcyIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iT2JqZWN0"
"QXR0cmlidXRlcyI+DQogICAgPHhzOmFubm90YXRpb24+DQogICAgICA8eHM6ZG9jdW1lbnRhdGlv"
"bj5UaGUgYXR0cmlidXRlcyBmb3IgYW4gb2JqZWN0IG5vZGUuPC94czpkb2N1bWVudGF0aW9uPg0K"
"ICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICA8eHM6Y29tcGxleENvbnRlbnQgbWl4ZWQ9ImZhbHNl"
"Ij4NCiAgICAgIDx4czpleHRlbnNpb24gYmFzZT0idG5zOk5vZGVBdHRyaWJ1dGVzIj4NCiAgICAg"
"ICAgPHhzOnNlcXVlbmNlPg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IkV2ZW50Tm90aWZp"
"ZXIiIHR5cGU9InhzOnVuc2lnbmVkQnl0ZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICA8L3hz"
"OnNlcXVlbmNlPg0KICAgICAgPC94czpleHRlbnNpb24+DQogICAgPC94czpjb21wbGV4Q29udGVu"
"dD4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iT2JqZWN0QXR0cmli"
"dXRlcyIgdHlwZT0idG5zOk9iamVjdEF0dHJpYnV0ZXMiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBl"
"IG5hbWU9IlZhcmlhYmxlQXR0cmlidXRlcyI+DQogICAgPHhzOmFubm90YXRpb24+DQogICAgICA8"
"eHM6ZG9jdW1lbnRhdGlvbj5UaGUgYXR0cmlidXRlcyBmb3IgYSB2YXJpYWJsZSBub2RlLjwveHM6"
"ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hzOmFubm90YXRpb24+DQogICAgPHhzOmNvbXBsZXhDb250"
"ZW50IG1peGVkPSJmYWxzZSI+DQogICAgICA8eHM6ZXh0ZW5zaW9uIGJhc2U9InRuczpOb2RlQXR0"
"cmlidXRlcyI+DQogICAgICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgICAgICA8eHM6ZWxlbWVudCBu"
"YW1lPSJWYWx1ZSIgdHlwZT0idWE6VmFyaWFudCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAg"
"IDx4czplbGVtZW50IG5hbWU9IkRhdGFUeXBlIiB0eXBlPSJ1YTpOb2RlSWQiIG1pbk9jY3Vycz0i"
"MCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iVmFsdWVS"
"YW5rIiB0eXBlPSJ4czppbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICA8eHM6ZWxlbWVu"
"dCBuYW1lPSJBcnJheURpbWVuc2lvbnMiIHR5cGU9InVhOkxpc3RPZlVJbnQzMiIgbWluT2NjdXJz"
"PSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJBY2Nl"
"c3NMZXZlbCIgdHlwZT0ieHM6dW5zaWduZWRCeXRlIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAg"
"ICAgPHhzOmVsZW1lbnQgbmFtZT0iVXNlckFjY2Vzc0xldmVsIiB0eXBlPSJ4czp1bnNpZ25lZEJ5"
"dGUiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJNaW5pbXVt"
"U2FtcGxpbmdJbnRlcnZhbCIgdHlwZT0ieHM6ZG91YmxlIiBtaW5PY2N1cnM9IjAiIC8+DQogICAg"
"ICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iSGlzdG9yaXppbmciIHR5cGU9InhzOmJvb2xlYW4iIG1p"
"bk9jY3Vycz0iMCIgLz4NCiAgICAgICAgPC94czpzZXF1ZW5jZT4NCiAgICAgIDwveHM6ZXh0ZW5z"
"aW9uPg0KICAgIDwveHM6Y29tcGxleENvbnRlbnQ+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4"
"czplbGVtZW50IG5hbWU9IlZhcmlhYmxlQXR0cmlidXRlcyIgdHlwZT0idG5zOlZhcmlhYmxlQXR0"
"cmlidXRlcyIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTWV0aG9kQXR0cmlidXRlcyI+"
"DQogICAgPHhzOmFubm90YXRpb24+DQogICAgICA8eHM6ZG9jdW1lbnRhdGlvbj5UaGUgYXR0cmli"
"dXRlcyBmb3IgYSBtZXRob2Qgbm9kZS48L3hzOmRvY3VtZW50YXRpb24+DQogICAgPC94czphbm5v"
"dGF0aW9uPg0KICAgIDx4czpjb21wbGV4Q29udGVudCBtaXhlZD0iZmFsc2UiPg0KICAgICAgPHhz"
"OmV4dGVuc2lvbiBiYXNlPSJ0bnM6Tm9kZUF0dHJpYnV0ZXMiPg0KICAgICAgICA8eHM6c2VxdWVu"
"Y2U+DQogICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRXhlY3V0YWJsZSIgdHlwZT0ieHM6Ym9v"
"bGVhbiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IlVzZXJF"
"eGVjdXRhYmxlIiB0eXBlPSJ4czpib29sZWFuIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgIDwv"
"eHM6c2VxdWVuY2U+DQogICAgICA8L3hzOmV4dGVuc2lvbj4NCiAgICA8L3hzOmNvbXBsZXhDb250"
"ZW50Pg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJNZXRob2RBdHRy"
"aWJ1dGVzIiB0eXBlPSJ0bnM6TWV0aG9kQXR0cmlidXRlcyIgLz4NCg0KICA8eHM6Y29tcGxleFR5"
"cGUgbmFtZT0iT2JqZWN0VHlwZUF0dHJpYnV0ZXMiPg0KICAgIDx4czphbm5vdGF0aW9uPg0KICAg"
"ICAgPHhzOmRvY3VtZW50YXRpb24+VGhlIGF0dHJpYnV0ZXMgZm9yIGFuIG9iamVjdCB0eXBlIG5v"
"ZGUuPC94czpkb2N1bWVudGF0aW9uPg0KICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICA8eHM6Y29t"
"cGxleENvbnRlbnQgbWl4ZWQ9ImZhbHNlIj4NCiAgICAgIDx4czpleHRlbnNpb24gYmFzZT0idG5z"
"Ok5vZGVBdHRyaWJ1dGVzIj4NCiAgICAgICAgPHhzOnNlcXVlbmNlPg0KICAgICAgICAgIDx4czpl"
"bGVtZW50IG5hbWU9IklzQWJzdHJhY3QiIHR5cGU9InhzOmJvb2xlYW4iIG1pbk9jY3Vycz0iMCIg"
"Lz4NCiAgICAgICAgPC94czpzZXF1ZW5jZT4NCiAgICAgIDwveHM6ZXh0ZW5zaW9uPg0KICAgIDwv"
"eHM6Y29tcGxleENvbnRlbnQ+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5h"
"bWU9Ik9iamVjdFR5cGVBdHRyaWJ1dGVzIiB0eXBlPSJ0bnM6T2JqZWN0VHlwZUF0dHJpYnV0ZXMi"
"IC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IlZhcmlhYmxlVHlwZUF0dHJpYnV0ZXMiPg0K"
"ICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmRvY3VtZW50YXRpb24+VGhlIGF0dHJpYnV0"
"ZXMgZm9yIGEgdmFyaWFibGUgdHlwZSBub2RlLjwveHM6ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hz"
"OmFubm90YXRpb24+DQogICAgPHhzOmNvbXBsZXhDb250ZW50IG1peGVkPSJmYWxzZSI+DQogICAg"
"ICA8eHM6ZXh0ZW5zaW9uIGJhc2U9InRuczpOb2RlQXR0cmlidXRlcyI+DQogICAgICAgIDx4czpz"
"ZXF1ZW5jZT4NCiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJWYWx1ZSIgdHlwZT0idWE6VmFy"
"aWFudCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IkRhdGFU"
"eXBlIiB0eXBlPSJ1YTpOb2RlSWQiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQog"
"ICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iVmFsdWVSYW5rIiB0eXBlPSJ4czppbnQiIG1pbk9j"
"Y3Vycz0iMCIgLz4NCiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJBcnJheURpbWVuc2lvbnMi"
"IHR5cGU9InVhOkxpc3RPZlVJbnQzMiIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4N"
"CiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJJc0Fic3RyYWN0IiB0eXBlPSJ4czpib29sZWFu"
"IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgIDwveHM6c2VxdWVuY2U+DQogICAgICA8L3hzOmV4"
"dGVuc2lvbj4NCiAgICA8L3hzOmNvbXBsZXhDb250ZW50Pg0KICA8L3hzOmNvbXBsZXhUeXBlPg0K"
"ICA8eHM6ZWxlbWVudCBuYW1lPSJWYXJpYWJsZVR5cGVBdHRyaWJ1dGVzIiB0eXBlPSJ0bnM6VmFy"
"aWFibGVUeXBlQXR0cmlidXRlcyIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iUmVmZXJl"
"bmNlVHlwZUF0dHJpYnV0ZXMiPg0KICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmRvY3Vt"
"ZW50YXRpb24+VGhlIGF0dHJpYnV0ZXMgZm9yIGEgcmVmZXJlbmNlIHR5cGUgbm9kZS48L3hzOmRv"
"Y3VtZW50YXRpb24+DQogICAgPC94czphbm5vdGF0aW9uPg0KICAgIDx4czpjb21wbGV4Q29udGVu"
"dCBtaXhlZD0iZmFsc2UiPg0KICAgICAgPHhzOmV4dGVuc2lvbiBiYXNlPSJ0bnM6Tm9kZUF0dHJp"
"YnV0ZXMiPg0KICAgICAgICA8eHM6c2VxdWVuY2U+DQogICAgICAgICAgPHhzOmVsZW1lbnQgbmFt"
"ZT0iSXNBYnN0cmFjdCIgdHlwZT0ieHM6Ym9vbGVhbiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAg"
"ICAgIDx4czplbGVtZW50IG5hbWU9IlN5bW1ldHJpYyIgdHlwZT0ieHM6Ym9vbGVhbiIgbWluT2Nj"
"dXJzPSIwIiAvPg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IkludmVyc2VOYW1lIiB0eXBl"
"PSJ1YTpMb2NhbGl6ZWRUZXh0IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAg"
"ICAgICA8L3hzOnNlcXVlbmNlPg0KICAgICAgPC94czpleHRlbnNpb24+DQogICAgPC94czpjb21w"
"bGV4Q29udGVudD4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iUmVm"
"ZXJlbmNlVHlwZUF0dHJpYnV0ZXMiIHR5cGU9InRuczpSZWZlcmVuY2VUeXBlQXR0cmlidXRlcyIg"
"Lz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iRGF0YVR5cGVBdHRyaWJ1dGVzIj4NCiAgICA8"
"eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czpkb2N1bWVudGF0aW9uPlRoZSBhdHRyaWJ1dGVzIGZv"
"ciBhIGRhdGEgdHlwZSBub2RlLjwveHM6ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hzOmFubm90YXRp"
"b24+DQogICAgPHhzOmNvbXBsZXhDb250ZW50IG1peGVkPSJmYWxzZSI+DQogICAgICA8eHM6ZXh0"
"ZW5zaW9uIGJhc2U9InRuczpOb2RlQXR0cmlidXRlcyI+DQogICAgICAgIDx4czpzZXF1ZW5jZT4N"
"CiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJJc0Fic3RyYWN0IiB0eXBlPSJ4czpib29sZWFu"
"IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgIDwveHM6c2VxdWVuY2U+DQogICAgICA8L3hzOmV4"
"dGVuc2lvbj4NCiAgICA8L3hzOmNvbXBsZXhDb250ZW50Pg0KICA8L3hzOmNvbXBsZXhUeXBlPg0K"
"ICA8eHM6ZWxlbWVudCBuYW1lPSJEYXRhVHlwZUF0dHJpYnV0ZXMiIHR5cGU9InRuczpEYXRhVHlw"
"ZUF0dHJpYnV0ZXMiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IlZpZXdBdHRyaWJ1dGVz"
"Ij4NCiAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czpkb2N1bWVudGF0aW9uPlRoZSBhdHRy"
"aWJ1dGVzIGZvciBhIHZpZXcgbm9kZS48L3hzOmRvY3VtZW50YXRpb24+DQogICAgPC94czphbm5v"
"dGF0aW9uPg0KICAgIDx4czpjb21wbGV4Q29udGVudCBtaXhlZD0iZmFsc2UiPg0KICAgICAgPHhz"
"OmV4dGVuc2lvbiBiYXNlPSJ0bnM6Tm9kZUF0dHJpYnV0ZXMiPg0KICAgICAgICA8eHM6c2VxdWVu"
"Y2U+DQogICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iQ29udGFpbnNOb0xvb3BzIiB0eXBlPSJ4"
"czpib29sZWFuIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0i"
"RXZlbnROb3RpZmllciIgdHlwZT0ieHM6dW5zaWduZWRCeXRlIiBtaW5PY2N1cnM9IjAiIC8+DQog"
"ICAgICAgIDwveHM6c2VxdWVuY2U+DQogICAgICA8L3hzOmV4dGVuc2lvbj4NCiAgICA8L3hzOmNv"
"bXBsZXhDb250ZW50Pg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJW"
"aWV3QXR0cmlidXRlcyIgdHlwZT0idG5zOlZpZXdBdHRyaWJ1dGVzIiAvPg0KDQogIDx4czpjb21w"
"bGV4VHlwZSBuYW1lPSJBZGROb2Rlc0l0ZW0iPg0KICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAg"
"PHhzOmRvY3VtZW50YXRpb24+QSByZXF1ZXN0IHRvIGFkZCBhIG5vZGUgdG8gdGhlIHNlcnZlciBh"
"ZGRyZXNzIHNwYWNlLjwveHM6ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hzOmFubm90YXRpb24+DQog"
"ICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUGFyZW50Tm9kZUlkIiB0"
"eXBlPSJ1YTpFeHBhbmRlZE5vZGVJZCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4N"
"CiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJlZmVyZW5jZVR5cGVJZCIgdHlwZT0idWE6Tm9kZUlk"
"IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFt"
"ZT0iUmVxdWVzdGVkTmV3Tm9kZUlkIiB0eXBlPSJ1YTpFeHBhbmRlZE5vZGVJZCIgbWluT2NjdXJz"
"PSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkJyb3dzZU5h"
"bWUiIHR5cGU9InVhOlF1YWxpZmllZE5hbWUiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUi"
"IC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJOb2RlQ2xhc3MiIHR5cGU9InRuczpOb2RlQ2xh"
"c3MiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik5vZGVBdHRyaWJ1"
"dGVzIiB0eXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRy"
"dWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJUeXBlRGVmaW5pdGlvbiIgdHlwZT0idWE6"
"RXhwYW5kZWROb2RlSWQiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94"
"czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iQWRk"
"Tm9kZXNJdGVtIiB0eXBlPSJ0bnM6QWRkTm9kZXNJdGVtIiAvPg0KDQogIDx4czpjb21wbGV4VHlw"
"ZSBuYW1lPSJMaXN0T2ZBZGROb2Rlc0l0ZW0iPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4"
"czplbGVtZW50IG5hbWU9IkFkZE5vZGVzSXRlbSIgdHlwZT0idG5zOkFkZE5vZGVzSXRlbSIgbWlu"
"T2NjdXJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRlZCIgbmlsbGFibGU9InRydWUiIC8+DQogICAg"
"PC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0i"
"TGlzdE9mQWRkTm9kZXNJdGVtIiB0eXBlPSJ0bnM6TGlzdE9mQWRkTm9kZXNJdGVtIiBuaWxsYWJs"
"ZT0idHJ1ZSI+PC94czplbGVtZW50Pg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJBZGROb2Rl"
"c1Jlc3VsdCI+DQogICAgPHhzOmFubm90YXRpb24+DQogICAgICA8eHM6ZG9jdW1lbnRhdGlvbj5B"
"IHJlc3VsdCBvZiBhbiBhZGQgbm9kZSBvcGVyYXRpb24uPC94czpkb2N1bWVudGF0aW9uPg0KICAg"
"IDwveHM6YW5ub3RhdGlvbj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBu"
"YW1lPSJTdGF0dXNDb2RlIiB0eXBlPSJ1YTpTdGF0dXNDb2RlIiBtaW5PY2N1cnM9IjAiIC8+DQog"
"ICAgICA8eHM6ZWxlbWVudCBuYW1lPSJBZGRlZE5vZGVJZCIgdHlwZT0idWE6Tm9kZUlkIiBtaW5P"
"Y2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6"
"Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IkFkZE5vZGVzUmVzdWx0IiB0eXBlPSJ0"
"bnM6QWRkTm9kZXNSZXN1bHQiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxpc3RPZkFk"
"ZE5vZGVzUmVzdWx0Ij4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1l"
"PSJBZGROb2Rlc1Jlc3VsdCIgdHlwZT0idG5zOkFkZE5vZGVzUmVzdWx0IiBtaW5PY2N1cnM9IjAi"
"IG1heE9jY3Vycz0idW5ib3VuZGVkIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVl"
"bmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZBZGRO"
"b2Rlc1Jlc3VsdCIgdHlwZT0idG5zOkxpc3RPZkFkZE5vZGVzUmVzdWx0IiBuaWxsYWJsZT0idHJ1"
"ZSI+PC94czplbGVtZW50Pg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJBZGROb2Rlc1JlcXVl"
"c3QiPg0KICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmRvY3VtZW50YXRpb24+QWRkcyBv"
"bmUgb3IgbW9yZSBub2RlcyB0byB0aGUgc2VydmVyIGFkZHJlc3Mgc3BhY2UuPC94czpkb2N1bWVu"
"dGF0aW9uPg0KICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8"
"eHM6ZWxlbWVudCBuYW1lPSJSZXF1ZXN0SGVhZGVyIiB0eXBlPSJ0bnM6UmVxdWVzdEhlYWRlciIg"
"bWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9"
"Ik5vZGVzVG9BZGQiIHR5cGU9InRuczpMaXN0T2ZBZGROb2Rlc0l0ZW0iIG1pbk9jY3Vycz0iMCIg"
"bmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlw"
"ZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iQWRkTm9kZXNSZXF1ZXN0IiB0eXBlPSJ0bnM6QWRkTm9k"
"ZXNSZXF1ZXN0IiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJBZGROb2Rlc1Jlc3BvbnNl"
"Ij4NCiAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czpkb2N1bWVudGF0aW9uPkFkZHMgb25l"
"IG9yIG1vcmUgbm9kZXMgdG8gdGhlIHNlcnZlciBhZGRyZXNzIHNwYWNlLjwveHM6ZG9jdW1lbnRh"
"dGlvbj4NCiAgICA8L3hzOmFubm90YXRpb24+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iUmVzcG9uc2VIZWFkZXIiIHR5cGU9InRuczpSZXNwb25zZUhlYWRlciIg"
"bWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9"
"IlJlc3VsdHMiIHR5cGU9InRuczpMaXN0T2ZBZGROb2Rlc1Jlc3VsdCIgbWluT2NjdXJzPSIwIiBu"
"aWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkRpYWdub3N0aWNJbmZv"
"cyIgdHlwZT0idWE6TGlzdE9mRGlhZ25vc3RpY0luZm8iIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9"
"InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhz"
"OmVsZW1lbnQgbmFtZT0iQWRkTm9kZXNSZXNwb25zZSIgdHlwZT0idG5zOkFkZE5vZGVzUmVzcG9u"
"c2UiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IkFkZFJlZmVyZW5jZXNJdGVtIj4NCiAg"
"ICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czpkb2N1bWVudGF0aW9uPkEgcmVxdWVzdCB0byBh"
"ZGQgYSByZWZlcmVuY2UgdG8gdGhlIHNlcnZlciBhZGRyZXNzIHNwYWNlLjwveHM6ZG9jdW1lbnRh"
"dGlvbj4NCiAgICA8L3hzOmFubm90YXRpb24+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iU291cmNlTm9kZUlkIiB0eXBlPSJ1YTpOb2RlSWQiIG1pbk9jY3Vycz0i"
"MCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZWZlcmVuY2VU"
"eXBlSWQiIHR5cGU9InVhOk5vZGVJZCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4N"
"CiAgICAgIDx4czplbGVtZW50IG5hbWU9IklzRm9yd2FyZCIgdHlwZT0ieHM6Ym9vbGVhbiIgbWlu"
"T2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iVGFyZ2V0U2VydmVyVXJpIiB0"
"eXBlPSJ4czpzdHJpbmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8"
"eHM6ZWxlbWVudCBuYW1lPSJUYXJnZXROb2RlSWQiIHR5cGU9InVhOkV4cGFuZGVkTm9kZUlkIiBt"
"aW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0i"
"VGFyZ2V0Tm9kZUNsYXNzIiB0eXBlPSJ0bnM6Tm9kZUNsYXNzIiBtaW5PY2N1cnM9IjAiIC8+DQog"
"ICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFt"
"ZT0iQWRkUmVmZXJlbmNlc0l0ZW0iIHR5cGU9InRuczpBZGRSZWZlcmVuY2VzSXRlbSIgLz4NCg0K"
"ICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTGlzdE9mQWRkUmVmZXJlbmNlc0l0ZW0iPg0KICAgIDx4"
"czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkFkZFJlZmVyZW5jZXNJdGVtIiB0"
"eXBlPSJ0bnM6QWRkUmVmZXJlbmNlc0l0ZW0iIG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJv"
"dW5kZWQiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29t"
"cGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ikxpc3RPZkFkZFJlZmVyZW5jZXNJdGVtIiB0"
"eXBlPSJ0bnM6TGlzdE9mQWRkUmVmZXJlbmNlc0l0ZW0iIG5pbGxhYmxlPSJ0cnVlIj48L3hzOmVs"
"ZW1lbnQ+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IkFkZFJlZmVyZW5jZXNSZXF1ZXN0Ij4N"
"CiAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czpkb2N1bWVudGF0aW9uPkFkZHMgb25lIG9y"
"IG1vcmUgcmVmZXJlbmNlcyB0byB0aGUgc2VydmVyIGFkZHJlc3Mgc3BhY2UuPC94czpkb2N1bWVu"
"dGF0aW9uPg0KICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8"
"eHM6ZWxlbWVudCBuYW1lPSJSZXF1ZXN0SGVhZGVyIiB0eXBlPSJ0bnM6UmVxdWVzdEhlYWRlciIg"
"bWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9"
"IlJlZmVyZW5jZXNUb0FkZCIgdHlwZT0idG5zOkxpc3RPZkFkZFJlZmVyZW5jZXNJdGVtIiBtaW5P"
"Y2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6"
"Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IkFkZFJlZmVyZW5jZXNSZXF1ZXN0IiB0"
"eXBlPSJ0bnM6QWRkUmVmZXJlbmNlc1JlcXVlc3QiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5h"
"bWU9IkFkZFJlZmVyZW5jZXNSZXNwb25zZSI+DQogICAgPHhzOmFubm90YXRpb24+DQogICAgICA8"
"eHM6ZG9jdW1lbnRhdGlvbj5BZGRzIG9uZSBvciBtb3JlIHJlZmVyZW5jZXMgdG8gdGhlIHNlcnZl"
"ciBhZGRyZXNzIHNwYWNlLjwveHM6ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hzOmFubm90YXRpb24+"
"DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVzcG9uc2VIZWFk"
"ZXIiIHR5cGU9InRuczpSZXNwb25zZUhlYWRlciIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1"
"ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJlc3VsdHMiIHR5cGU9InVhOkxpc3RPZlN0"
"YXR1c0NvZGUiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxl"
"bWVudCBuYW1lPSJEaWFnbm9zdGljSW5mb3MiIHR5cGU9InVhOkxpc3RPZkRpYWdub3N0aWNJbmZv"
"IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQog"
"IDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IkFkZFJlZmVyZW5jZXNSZXNw"
"b25zZSIgdHlwZT0idG5zOkFkZFJlZmVyZW5jZXNSZXNwb25zZSIgLz4NCg0KICA8eHM6Y29tcGxl"
"eFR5cGUgbmFtZT0iRGVsZXRlTm9kZXNJdGVtIj4NCiAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAg"
"IDx4czpkb2N1bWVudGF0aW9uPkEgcmVxdWVzdCB0byBkZWxldGUgYSBub2RlIHRvIHRoZSBzZXJ2"
"ZXIgYWRkcmVzcyBzcGFjZS48L3hzOmRvY3VtZW50YXRpb24+DQogICAgPC94czphbm5vdGF0aW9u"
"Pg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik5vZGVJZCIgdHlw"
"ZT0idWE6Tm9kZUlkIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iRGVsZXRlVGFyZ2V0UmVmZXJlbmNlcyIgdHlwZT0ieHM6Ym9vbGVhbiIg"
"bWluT2NjdXJzPSIwIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+"
"DQogIDx4czplbGVtZW50IG5hbWU9IkRlbGV0ZU5vZGVzSXRlbSIgdHlwZT0idG5zOkRlbGV0ZU5v"
"ZGVzSXRlbSIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTGlzdE9mRGVsZXRlTm9kZXNJ"
"dGVtIj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJEZWxldGVO"
"b2Rlc0l0ZW0iIHR5cGU9InRuczpEZWxldGVOb2Rlc0l0ZW0iIG1pbk9jY3Vycz0iMCIgbWF4T2Nj"
"dXJzPSJ1bmJvdW5kZWQiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQog"
"IDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ikxpc3RPZkRlbGV0ZU5vZGVz"
"SXRlbSIgdHlwZT0idG5zOkxpc3RPZkRlbGV0ZU5vZGVzSXRlbSIgbmlsbGFibGU9InRydWUiPjwv"
"eHM6ZWxlbWVudD4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iRGVsZXRlTm9kZXNSZXF1ZXN0"
"Ij4NCiAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czpkb2N1bWVudGF0aW9uPkRlbGV0ZSBv"
"bmUgb3IgbW9yZSBub2RlcyBmcm9tIHRoZSBzZXJ2ZXIgYWRkcmVzcyBzcGFjZS48L3hzOmRvY3Vt"
"ZW50YXRpb24+DQogICAgPC94czphbm5vdGF0aW9uPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAg"
"IDx4czplbGVtZW50IG5hbWU9IlJlcXVlc3RIZWFkZXIiIHR5cGU9InRuczpSZXF1ZXN0SGVhZGVy"
"IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFt"
"ZT0iTm9kZXNUb0RlbGV0ZSIgdHlwZT0idG5zOkxpc3RPZkRlbGV0ZU5vZGVzSXRlbSIgbWluT2Nj"
"dXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNv"
"bXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJEZWxldGVOb2Rlc1JlcXVlc3QiIHR5cGU9"
"InRuczpEZWxldGVOb2Rlc1JlcXVlc3QiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IkRl"
"bGV0ZU5vZGVzUmVzcG9uc2UiPg0KICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmRvY3Vt"
"ZW50YXRpb24+RGVsZXRlIG9uZSBvciBtb3JlIG5vZGVzIGZyb20gdGhlIHNlcnZlciBhZGRyZXNz"
"IHNwYWNlLjwveHM6ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hzOmFubm90YXRpb24+DQogICAgPHhz"
"OnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVzcG9uc2VIZWFkZXIiIHR5cGU9"
"InRuczpSZXNwb25zZUhlYWRlciIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAg"
"ICAgIDx4czplbGVtZW50IG5hbWU9IlJlc3VsdHMiIHR5cGU9InVhOkxpc3RPZlN0YXR1c0NvZGUi"
"IG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1l"
"PSJEaWFnbm9zdGljSW5mb3MiIHR5cGU9InVhOkxpc3RPZkRpYWdub3N0aWNJbmZvIiBtaW5PY2N1"
"cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29t"
"cGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IkRlbGV0ZU5vZGVzUmVzcG9uc2UiIHR5cGU9"
"InRuczpEZWxldGVOb2Rlc1Jlc3BvbnNlIiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJE"
"ZWxldGVSZWZlcmVuY2VzSXRlbSI+DQogICAgPHhzOmFubm90YXRpb24+DQogICAgICA8eHM6ZG9j"
"dW1lbnRhdGlvbj5BIHJlcXVlc3QgdG8gZGVsZXRlIGEgbm9kZSBmcm9tIHRoZSBzZXJ2ZXIgYWRk"
"cmVzcyBzcGFjZS48L3hzOmRvY3VtZW50YXRpb24+DQogICAgPC94czphbm5vdGF0aW9uPg0KICAg"
"IDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlNvdXJjZU5vZGVJZCIgdHlw"
"ZT0idWE6Tm9kZUlkIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iUmVmZXJlbmNlVHlwZUlkIiB0eXBlPSJ1YTpOb2RlSWQiIG1pbk9jY3Vy"
"cz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJJc0Zvcndh"
"cmQiIHR5cGU9InhzOmJvb2xlYW4iIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50"
"IG5hbWU9IlRhcmdldE5vZGVJZCIgdHlwZT0idWE6RXhwYW5kZWROb2RlSWQiIG1pbk9jY3Vycz0i"
"MCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJEZWxldGVCaWRp"
"cmVjdGlvbmFsIiB0eXBlPSJ4czpib29sZWFuIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgPC94czpz"
"ZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iRGVsZXRl"
"UmVmZXJlbmNlc0l0ZW0iIHR5cGU9InRuczpEZWxldGVSZWZlcmVuY2VzSXRlbSIgLz4NCg0KICA8"
"eHM6Y29tcGxleFR5cGUgbmFtZT0iTGlzdE9mRGVsZXRlUmVmZXJlbmNlc0l0ZW0iPg0KICAgIDx4"
"czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkRlbGV0ZVJlZmVyZW5jZXNJdGVt"
"IiB0eXBlPSJ0bnM6RGVsZXRlUmVmZXJlbmNlc0l0ZW0iIG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJz"
"PSJ1bmJvdW5kZWQiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwv"
"eHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ikxpc3RPZkRlbGV0ZVJlZmVyZW5j"
"ZXNJdGVtIiB0eXBlPSJ0bnM6TGlzdE9mRGVsZXRlUmVmZXJlbmNlc0l0ZW0iIG5pbGxhYmxlPSJ0"
"cnVlIj48L3hzOmVsZW1lbnQ+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IkRlbGV0ZVJlZmVy"
"ZW5jZXNSZXF1ZXN0Ij4NCiAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czpkb2N1bWVudGF0"
"aW9uPkRlbGV0ZSBvbmUgb3IgbW9yZSByZWZlcmVuY2VzIGZyb20gdGhlIHNlcnZlciBhZGRyZXNz"
"IHNwYWNlLjwveHM6ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hzOmFubm90YXRpb24+DQogICAgPHhz"
"OnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVxdWVzdEhlYWRlciIgdHlwZT0i"
"dG5zOlJlcXVlc3RIZWFkZXIiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAg"
"ICA8eHM6ZWxlbWVudCBuYW1lPSJSZWZlcmVuY2VzVG9EZWxldGUiIHR5cGU9InRuczpMaXN0T2ZE"
"ZWxldGVSZWZlcmVuY2VzSXRlbSIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAg"
"ICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1l"
"PSJEZWxldGVSZWZlcmVuY2VzUmVxdWVzdCIgdHlwZT0idG5zOkRlbGV0ZVJlZmVyZW5jZXNSZXF1"
"ZXN0IiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJEZWxldGVSZWZlcmVuY2VzUmVzcG9u"
"c2UiPg0KICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmRvY3VtZW50YXRpb24+RGVsZXRl"
"IG9uZSBvciBtb3JlIHJlZmVyZW5jZXMgZnJvbSB0aGUgc2VydmVyIGFkZHJlc3Mgc3BhY2UuPC94"
"czpkb2N1bWVudGF0aW9uPg0KICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICA8eHM6c2VxdWVuY2U+"
"DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZXNwb25zZUhlYWRlciIgdHlwZT0idG5zOlJlc3Bv"
"bnNlSGVhZGVyIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVs"
"ZW1lbnQgbmFtZT0iUmVzdWx0cyIgdHlwZT0idWE6TGlzdE9mU3RhdHVzQ29kZSIgbWluT2NjdXJz"
"PSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkRpYWdub3N0"
"aWNJbmZvcyIgdHlwZT0idWE6TGlzdE9mRGlhZ25vc3RpY0luZm8iIG1pbk9jY3Vycz0iMCIgbmls"
"bGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4N"
"CiAgPHhzOmVsZW1lbnQgbmFtZT0iRGVsZXRlUmVmZXJlbmNlc1Jlc3BvbnNlIiB0eXBlPSJ0bnM6"
"RGVsZXRlUmVmZXJlbmNlc1Jlc3BvbnNlIiAvPg0KDQogIDx4czpzaW1wbGVUeXBlICBuYW1lPSJB"
"dHRyaWJ1dGVXcml0ZU1hc2siPg0KICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmRvY3Vt"
"ZW50YXRpb24+RGVmaW5lIGJpdHMgdXNlZCB0byBpbmRpY2F0ZSB3aGljaCBhdHRyaWJ1dGVzIGFy"
"ZSB3cml0ZWFibGUuPC94czpkb2N1bWVudGF0aW9uPg0KICAgIDwveHM6YW5ub3RhdGlvbj4NCiAg"
"ICA8eHM6cmVzdHJpY3Rpb24gYmFzZT0ieHM6c3RyaW5nIj4NCiAgICAgIDx4czplbnVtZXJhdGlv"
"biB2YWx1ZT0iTm9uZV8wIiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJBY2Nlc3NM"
"ZXZlbF8xIiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJBcnJheURpbWVuc2lvbnNf"
"MiIgLz4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iQnJvd3NlTmFtZV80IiAvPg0KICAg"
"ICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJDb250YWluc05vTG9vcHNfOCIgLz4NCiAgICAgIDx4"
"czplbnVtZXJhdGlvbiB2YWx1ZT0iRGF0YVR5cGVfMTYiIC8+DQogICAgICA8eHM6ZW51bWVyYXRp"
"b24gdmFsdWU9IkRlc2NyaXB0aW9uXzMyIiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVl"
"PSJEaXNwbGF5TmFtZV82NCIgLz4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iRXZlbnRO"
"b3RpZmllcl8xMjgiIC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IkV4ZWN1dGFibGVf"
"MjU2IiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJIaXN0b3JpemluZ181MTIiIC8+"
"DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IkludmVyc2VOYW1lXzEwMjQiIC8+DQogICAg"
"ICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IklzQWJzdHJhY3RfMjA0OCIgLz4NCiAgICAgIDx4czpl"
"bnVtZXJhdGlvbiB2YWx1ZT0iTWluaW11bVNhbXBsaW5nSW50ZXJ2YWxfNDA5NiIgLz4NCiAgICAg"
"IDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iTm9kZUNsYXNzXzgxOTIiIC8+DQogICAgICA8eHM6ZW51"
"bWVyYXRpb24gdmFsdWU9Ik5vZGVJZF8xNjM4NCIgLz4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2"
"YWx1ZT0iU3ltbWV0cmljXzMyNzY4IiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJV"
"c2VyQWNjZXNzTGV2ZWxfNjU1MzYiIC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IlVz"
"ZXJFeGVjdXRhYmxlXzEzMTA3MiIgLz4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iVXNl"
"cldyaXRlTWFza18yNjIxNDQiIC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IlZhbHVl"
"UmFua181MjQyODgiIC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IldyaXRlTWFza18x"
"MDQ4NTc2IiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJWYWx1ZUZvclZhcmlhYmxl"
"VHlwZV8yMDk3MTUyIiAvPg0KICAgIDwveHM6cmVzdHJpY3Rpb24+DQogIDwveHM6c2ltcGxlVHlw"
"ZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iQXR0cmlidXRlV3JpdGVNYXNrIiB0eXBlPSJ0bnM6QXR0"
"cmlidXRlV3JpdGVNYXNrIiAvPg0KDQogIDx4czpzaW1wbGVUeXBlICBuYW1lPSJCcm93c2VEaXJl"
"Y3Rpb24iPg0KICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmRvY3VtZW50YXRpb24+VGhl"
"IGRpcmVjdGlvbnMgb2YgdGhlIHJlZmVyZW5jZXMgdG8gcmV0dXJuLjwveHM6ZG9jdW1lbnRhdGlv"
"bj4NCiAgICA8L3hzOmFubm90YXRpb24+DQogICAgPHhzOnJlc3RyaWN0aW9uIGJhc2U9InhzOnN0"
"cmluZyI+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IkZvcndhcmRfMCIgLz4NCiAgICAg"
"IDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iSW52ZXJzZV8xIiAvPg0KICAgICAgPHhzOmVudW1lcmF0"
"aW9uIHZhbHVlPSJCb3RoXzIiIC8+DQogICAgPC94czpyZXN0cmljdGlvbj4NCiAgPC94czpzaW1w"
"bGVUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJCcm93c2VEaXJlY3Rpb24iIHR5cGU9InRuczpC"
"cm93c2VEaXJlY3Rpb24iIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IlZpZXdEZXNjcmlw"
"dGlvbiI+DQogICAgPHhzOmFubm90YXRpb24+DQogICAgICA8eHM6ZG9jdW1lbnRhdGlvbj5UaGUg"
"dmlldyB0byBicm93c2UuPC94czpkb2N1bWVudGF0aW9uPg0KICAgIDwveHM6YW5ub3RhdGlvbj4N"
"CiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJWaWV3SWQiIHR5cGU9"
"InVhOk5vZGVJZCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czpl"
"bGVtZW50IG5hbWU9IlRpbWVzdGFtcCIgdHlwZT0ieHM6ZGF0ZVRpbWUiIG1pbk9jY3Vycz0iMCIg"
"Lz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlZpZXdWZXJzaW9uIiB0eXBlPSJ4czp1bnNpZ25l"
"ZEludCIgbWluT2NjdXJzPSIwIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxl"
"eFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IlZpZXdEZXNjcmlwdGlvbiIgdHlwZT0idG5zOlZp"
"ZXdEZXNjcmlwdGlvbiIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iQnJvd3NlRGVzY3Jp"
"cHRpb24iPg0KICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmRvY3VtZW50YXRpb24+QSBy"
"ZXF1ZXN0IHRvIGJyb3dzZSB0aGUgdGhlIHJlZmVyZW5jZXMgZnJvbSBhIG5vZGUuPC94czpkb2N1"
"bWVudGF0aW9uPg0KICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAg"
"ICA8eHM6ZWxlbWVudCBuYW1lPSJOb2RlSWQiIHR5cGU9InVhOk5vZGVJZCIgbWluT2NjdXJzPSIw"
"IiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkJyb3dzZURpcmVj"
"dGlvbiIgdHlwZT0idG5zOkJyb3dzZURpcmVjdGlvbiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iUmVmZXJlbmNlVHlwZUlkIiB0eXBlPSJ1YTpOb2RlSWQiIG1pbk9j"
"Y3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJJbmNs"
"dWRlU3VidHlwZXMiIHR5cGU9InhzOmJvb2xlYW4iIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4"
"czplbGVtZW50IG5hbWU9Ik5vZGVDbGFzc01hc2siIHR5cGU9InhzOnVuc2lnbmVkSW50IiBtaW5P"
"Y2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZXN1bHRNYXNrIiB0eXBlPSJ4"
"czp1bnNpZ25lZEludCIgbWluT2NjdXJzPSIwIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwv"
"eHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IkJyb3dzZURlc2NyaXB0aW9uIiB0"
"eXBlPSJ0bnM6QnJvd3NlRGVzY3JpcHRpb24iIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9"
"Ikxpc3RPZkJyb3dzZURlc2NyaXB0aW9uIj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6"
"ZWxlbWVudCBuYW1lPSJCcm93c2VEZXNjcmlwdGlvbiIgdHlwZT0idG5zOkJyb3dzZURlc2NyaXB0"
"aW9uIiBtaW5PY2N1cnM9IjAiIG1heE9jY3Vycz0idW5ib3VuZGVkIiBuaWxsYWJsZT0idHJ1ZSIg"
"Lz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVu"
"dCBuYW1lPSJMaXN0T2ZCcm93c2VEZXNjcmlwdGlvbiIgdHlwZT0idG5zOkxpc3RPZkJyb3dzZURl"
"c2NyaXB0aW9uIiBuaWxsYWJsZT0idHJ1ZSI+PC94czplbGVtZW50Pg0KDQogIDx4czpzaW1wbGVU"
"eXBlICBuYW1lPSJCcm93c2VSZXN1bHRNYXNrIj4NCiAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAg"
"IDx4czpkb2N1bWVudGF0aW9uPkEgYml0IG1hc2sgd2hpY2ggc3BlY2lmaWVzIHdoYXQgc2hvdWxk"
"IGJlIHJldHVybmVkIGluIGEgYnJvd3NlIHJlc3BvbnNlLjwveHM6ZG9jdW1lbnRhdGlvbj4NCiAg"
"ICA8L3hzOmFubm90YXRpb24+DQogICAgPHhzOnJlc3RyaWN0aW9uIGJhc2U9InhzOnN0cmluZyI+"
"DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9Ik5vbmVfMCIgLz4NCiAgICAgIDx4czplbnVt"
"ZXJhdGlvbiB2YWx1ZT0iUmVmZXJlbmNlVHlwZUlkXzEiIC8+DQogICAgICA8eHM6ZW51bWVyYXRp"
"b24gdmFsdWU9IklzRm9yd2FyZF8yIiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJO"
"b2RlQ2xhc3NfNCIgLz4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iQnJvd3NlTmFtZV84"
"IiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJEaXNwbGF5TmFtZV8xNiIgLz4NCiAg"
"ICAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iVHlwZURlZmluaXRpb25fMzIiIC8+DQogICAgICA8"
"eHM6ZW51bWVyYXRpb24gdmFsdWU9IkFsbF82MyIgLz4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2"
"YWx1ZT0iUmVmZXJlbmNlVHlwZUluZm9fMyIgLz4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1"
"ZT0iVGFyZ2V0SW5mb182MCIgLz4NCiAgICA8L3hzOnJlc3RyaWN0aW9uPg0KICA8L3hzOnNpbXBs"
"ZVR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IkJyb3dzZVJlc3VsdE1hc2siIHR5cGU9InRuczpC"
"cm93c2VSZXN1bHRNYXNrIiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJSZWZlcmVuY2VE"
"ZXNjcmlwdGlvbiI+DQogICAgPHhzOmFubm90YXRpb24+DQogICAgICA8eHM6ZG9jdW1lbnRhdGlv"
"bj5UaGUgZGVzY3JpcHRpb24gb2YgYSByZWZlcmVuY2UuPC94czpkb2N1bWVudGF0aW9uPg0KICAg"
"IDwveHM6YW5ub3RhdGlvbj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBu"
"YW1lPSJSZWZlcmVuY2VUeXBlSWQiIHR5cGU9InVhOk5vZGVJZCIgbWluT2NjdXJzPSIwIiBuaWxs"
"YWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IklzRm9yd2FyZCIgdHlwZT0i"
"eHM6Ym9vbGVhbiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iTm9k"
"ZUlkIiB0eXBlPSJ1YTpFeHBhbmRlZE5vZGVJZCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1"
"ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkJyb3dzZU5hbWUiIHR5cGU9InVhOlF1YWxp"
"ZmllZE5hbWUiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxl"
"bWVudCBuYW1lPSJEaXNwbGF5TmFtZSIgdHlwZT0idWE6TG9jYWxpemVkVGV4dCIgbWluT2NjdXJz"
"PSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik5vZGVDbGFz"
"cyIgdHlwZT0idG5zOk5vZGVDbGFzcyIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1l"
"bnQgbmFtZT0iVHlwZURlZmluaXRpb24iIHR5cGU9InVhOkV4cGFuZGVkTm9kZUlkIiBtaW5PY2N1"
"cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29t"
"cGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IlJlZmVyZW5jZURlc2NyaXB0aW9uIiB0eXBl"
"PSJ0bnM6UmVmZXJlbmNlRGVzY3JpcHRpb24iIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9"
"Ikxpc3RPZlJlZmVyZW5jZURlc2NyaXB0aW9uIj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8"
"eHM6ZWxlbWVudCBuYW1lPSJSZWZlcmVuY2VEZXNjcmlwdGlvbiIgdHlwZT0idG5zOlJlZmVyZW5j"
"ZURlc2NyaXB0aW9uIiBtaW5PY2N1cnM9IjAiIG1heE9jY3Vycz0idW5ib3VuZGVkIiBuaWxsYWJs"
"ZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8"
"eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZSZWZlcmVuY2VEZXNjcmlwdGlvbiIgdHlwZT0idG5zOkxp"
"c3RPZlJlZmVyZW5jZURlc2NyaXB0aW9uIiBuaWxsYWJsZT0idHJ1ZSI+PC94czplbGVtZW50Pg0K"
"DQogIDx4czplbGVtZW50IG5hbWU9IkNvbnRpbnVhdGlvblBvaW50IiB0eXBlPSJ4czpiYXNlNjRC"
"aW5hcnkiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IkJyb3dzZVJlc3VsdCI+DQogICAg"
"PHhzOmFubm90YXRpb24+DQogICAgICA8eHM6ZG9jdW1lbnRhdGlvbj5UaGUgcmVzdWx0IG9mIGEg"
"YnJvd3NlIG9wZXJhdGlvbi48L3hzOmRvY3VtZW50YXRpb24+DQogICAgPC94czphbm5vdGF0aW9u"
"Pg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlN0YXR1c0NvZGUi"
"IHR5cGU9InVhOlN0YXR1c0NvZGUiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50"
"IG5hbWU9IkNvbnRpbnVhdGlvblBvaW50IiB0eXBlPSJ4czpiYXNlNjRCaW5hcnkiIG1pbk9jY3Vy"
"cz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZWZlcmVu"
"Y2VzIiB0eXBlPSJ0bnM6TGlzdE9mUmVmZXJlbmNlRGVzY3JpcHRpb24iIG1pbk9jY3Vycz0iMCIg"
"bmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlw"
"ZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iQnJvd3NlUmVzdWx0IiB0eXBlPSJ0bnM6QnJvd3NlUmVz"
"dWx0IiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJMaXN0T2ZCcm93c2VSZXN1bHQiPg0K"
"ICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkJyb3dzZVJlc3VsdCIg"
"dHlwZT0idG5zOkJyb3dzZVJlc3VsdCIgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRl"
"ZCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4"
"VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTGlzdE9mQnJvd3NlUmVzdWx0IiB0eXBlPSJ0bnM6"
"TGlzdE9mQnJvd3NlUmVzdWx0IiBuaWxsYWJsZT0idHJ1ZSI+PC94czplbGVtZW50Pg0KDQogIDx4"
"czpjb21wbGV4VHlwZSBuYW1lPSJCcm93c2VSZXF1ZXN0Ij4NCiAgICA8eHM6YW5ub3RhdGlvbj4N"
"CiAgICAgIDx4czpkb2N1bWVudGF0aW9uPkJyb3dzZSB0aGUgcmVmZXJlbmNlcyBmb3Igb25lIG9y"
"IG1vcmUgbm9kZXMgZnJvbSB0aGUgc2VydmVyIGFkZHJlc3Mgc3BhY2UuPC94czpkb2N1bWVudGF0"
"aW9uPg0KICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6"
"ZWxlbWVudCBuYW1lPSJSZXF1ZXN0SGVhZGVyIiB0eXBlPSJ0bnM6UmVxdWVzdEhlYWRlciIgbWlu"
"T2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlZp"
"ZXciIHR5cGU9InRuczpWaWV3RGVzY3JpcHRpb24iIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRy"
"dWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZXF1ZXN0ZWRNYXhSZWZlcmVuY2VzUGVy"
"Tm9kZSIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czpl"
"bGVtZW50IG5hbWU9Ik5vZGVzVG9Ccm93c2UiIHR5cGU9InRuczpMaXN0T2ZCcm93c2VEZXNjcmlw"
"dGlvbiIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNl"
"Pg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJCcm93c2VSZXF1ZXN0"
"IiB0eXBlPSJ0bnM6QnJvd3NlUmVxdWVzdCIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0i"
"QnJvd3NlUmVzcG9uc2UiPg0KICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmRvY3VtZW50"
"YXRpb24+QnJvd3NlIHRoZSByZWZlcmVuY2VzIGZvciBvbmUgb3IgbW9yZSBub2RlcyBmcm9tIHRo"
"ZSBzZXJ2ZXIgYWRkcmVzcyBzcGFjZS48L3hzOmRvY3VtZW50YXRpb24+DQogICAgPC94czphbm5v"
"dGF0aW9uPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJlc3Bv"
"bnNlSGVhZGVyIiB0eXBlPSJ0bnM6UmVzcG9uc2VIZWFkZXIiIG1pbk9jY3Vycz0iMCIgbmlsbGFi"
"bGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZXN1bHRzIiB0eXBlPSJ0bnM6"
"TGlzdE9mQnJvd3NlUmVzdWx0IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAg"
"ICAgPHhzOmVsZW1lbnQgbmFtZT0iRGlhZ25vc3RpY0luZm9zIiB0eXBlPSJ1YTpMaXN0T2ZEaWFn"
"bm9zdGljSW5mbyIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNl"
"cXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJCcm93c2VS"
"ZXNwb25zZSIgdHlwZT0idG5zOkJyb3dzZVJlc3BvbnNlIiAvPg0KDQogIDx4czpjb21wbGV4VHlw"
"ZSBuYW1lPSJCcm93c2VOZXh0UmVxdWVzdCI+DQogICAgPHhzOmFubm90YXRpb24+DQogICAgICA8"
"eHM6ZG9jdW1lbnRhdGlvbj5Db250aW51ZXMgb25lIG9yIG1vcmUgYnJvd3NlIG9wZXJhdGlvbnMu"
"PC94czpkb2N1bWVudGF0aW9uPg0KICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICA8eHM6c2VxdWVu"
"Y2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZXF1ZXN0SGVhZGVyIiB0eXBlPSJ0bnM6UmVx"
"dWVzdEhlYWRlciIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czpl"
"bGVtZW50IG5hbWU9IlJlbGVhc2VDb250aW51YXRpb25Qb2ludHMiIHR5cGU9InhzOmJvb2xlYW4i"
"IG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkNvbnRpbnVhdGlvblBv"
"aW50cyIgdHlwZT0idWE6TGlzdE9mQnl0ZVN0cmluZyIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0i"
"dHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6"
"ZWxlbWVudCBuYW1lPSJCcm93c2VOZXh0UmVxdWVzdCIgdHlwZT0idG5zOkJyb3dzZU5leHRSZXF1"
"ZXN0IiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJCcm93c2VOZXh0UmVzcG9uc2UiPg0K"
"ICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmRvY3VtZW50YXRpb24+Q29udGludWVzIG9u"
"ZSBvciBtb3JlIGJyb3dzZSBvcGVyYXRpb25zLjwveHM6ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hz"
"OmFubm90YXRpb24+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0i"
"UmVzcG9uc2VIZWFkZXIiIHR5cGU9InRuczpSZXNwb25zZUhlYWRlciIgbWluT2NjdXJzPSIwIiBu"
"aWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJlc3VsdHMiIHR5cGU9"
"InRuczpMaXN0T2ZCcm93c2VSZXN1bHQiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+"
"DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJEaWFnbm9zdGljSW5mb3MiIHR5cGU9InVhOkxpc3RP"
"ZkRpYWdub3N0aWNJbmZvIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwv"
"eHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IkJy"
"b3dzZU5leHRSZXNwb25zZSIgdHlwZT0idG5zOkJyb3dzZU5leHRSZXNwb25zZSIgLz4NCg0KICA8"
"eHM6Y29tcGxleFR5cGUgbmFtZT0iUmVsYXRpdmVQYXRoRWxlbWVudCI+DQogICAgPHhzOmFubm90"
"YXRpb24+DQogICAgICA8eHM6ZG9jdW1lbnRhdGlvbj5BbiBlbGVtZW50IGluIGEgcmVsYXRpdmUg"
"cGF0aC48L3hzOmRvY3VtZW50YXRpb24+DQogICAgPC94czphbm5vdGF0aW9uPg0KICAgIDx4czpz"
"ZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJlZmVyZW5jZVR5cGVJZCIgdHlwZT0i"
"dWE6Tm9kZUlkIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVs"
"ZW1lbnQgbmFtZT0iSXNJbnZlcnNlIiB0eXBlPSJ4czpib29sZWFuIiBtaW5PY2N1cnM9IjAiIC8+"
"DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJJbmNsdWRlU3VidHlwZXMiIHR5cGU9InhzOmJvb2xl"
"YW4iIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlRhcmdldE5hbWUi"
"IHR5cGU9InVhOlF1YWxpZmllZE5hbWUiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+"
"DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQg"
"bmFtZT0iUmVsYXRpdmVQYXRoRWxlbWVudCIgdHlwZT0idG5zOlJlbGF0aXZlUGF0aEVsZW1lbnQi"
"IC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxpc3RPZlJlbGF0aXZlUGF0aEVsZW1lbnQi"
"Pg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJlbGF0aXZlUGF0"
"aEVsZW1lbnQiIHR5cGU9InRuczpSZWxhdGl2ZVBhdGhFbGVtZW50IiBtaW5PY2N1cnM9IjAiIG1h"
"eE9jY3Vycz0idW5ib3VuZGVkIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNl"
"Pg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZSZWxhdGl2"
"ZVBhdGhFbGVtZW50IiB0eXBlPSJ0bnM6TGlzdE9mUmVsYXRpdmVQYXRoRWxlbWVudCIgbmlsbGFi"
"bGU9InRydWUiPjwveHM6ZWxlbWVudD4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iUmVsYXRp"
"dmVQYXRoIj4NCiAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czpkb2N1bWVudGF0aW9uPkEg"
"cmVsYXRpdmUgcGF0aCBjb25zdHJ1Y3RlZCBmcm9tIHJlZmVyZW5jZSB0eXBlcyBhbmQgYnJvd3Nl"
"IG5hbWVzLjwveHM6ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hzOmFubm90YXRpb24+DQogICAgPHhz"
"OnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRWxlbWVudHMiIHR5cGU9InRuczpM"
"aXN0T2ZSZWxhdGl2ZVBhdGhFbGVtZW50IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAv"
"Pg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50"
"IG5hbWU9IlJlbGF0aXZlUGF0aCIgdHlwZT0idG5zOlJlbGF0aXZlUGF0aCIgLz4NCg0KICA8eHM6"
"Y29tcGxleFR5cGUgbmFtZT0iQnJvd3NlUGF0aCI+DQogICAgPHhzOmFubm90YXRpb24+DQogICAg"
"ICA8eHM6ZG9jdW1lbnRhdGlvbj5BIHJlcXVlc3QgdG8gdHJhbnNsYXRlIGEgcGF0aCBpbnRvIGEg"
"bm9kZSBpZC48L3hzOmRvY3VtZW50YXRpb24+DQogICAgPC94czphbm5vdGF0aW9uPg0KICAgIDx4"
"czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlN0YXJ0aW5nTm9kZSIgdHlwZT0i"
"dWE6Tm9kZUlkIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVs"
"ZW1lbnQgbmFtZT0iUmVsYXRpdmVQYXRoIiB0eXBlPSJ0bnM6UmVsYXRpdmVQYXRoIiBtaW5PY2N1"
"cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29t"
"cGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IkJyb3dzZVBhdGgiIHR5cGU9InRuczpCcm93"
"c2VQYXRoIiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJMaXN0T2ZCcm93c2VQYXRoIj4N"
"CiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJCcm93c2VQYXRoIiB0"
"eXBlPSJ0bnM6QnJvd3NlUGF0aCIgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRlZCIg"
"bmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlw"
"ZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTGlzdE9mQnJvd3NlUGF0aCIgdHlwZT0idG5zOkxpc3RP"
"ZkJyb3dzZVBhdGgiIG5pbGxhYmxlPSJ0cnVlIj48L3hzOmVsZW1lbnQ+DQoNCiAgPHhzOmNvbXBs"
"ZXhUeXBlIG5hbWU9IkJyb3dzZVBhdGhUYXJnZXQiPg0KICAgIDx4czphbm5vdGF0aW9uPg0KICAg"
"ICAgPHhzOmRvY3VtZW50YXRpb24+VGhlIHRhcmdldCBvZiB0aGUgdHJhbnNsYXRlZCBwYXRoLjwv"
"eHM6ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hzOmFubm90YXRpb24+DQogICAgPHhzOnNlcXVlbmNl"
"Pg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iVGFyZ2V0SWQiIHR5cGU9InVhOkV4cGFuZGVkTm9k"
"ZUlkIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQg"
"bmFtZT0iUmVtYWluaW5nUGF0aEluZGV4IiB0eXBlPSJ4czp1bnNpZ25lZEludCIgbWluT2NjdXJz"
"PSIwIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czpl"
"bGVtZW50IG5hbWU9IkJyb3dzZVBhdGhUYXJnZXQiIHR5cGU9InRuczpCcm93c2VQYXRoVGFyZ2V0"
"IiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJMaXN0T2ZCcm93c2VQYXRoVGFyZ2V0Ij4N"
"CiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJCcm93c2VQYXRoVGFy"
"Z2V0IiB0eXBlPSJ0bnM6QnJvd3NlUGF0aFRhcmdldCIgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9"
"InVuYm91bmRlZCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94"
"czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTGlzdE9mQnJvd3NlUGF0aFRhcmdl"
"dCIgdHlwZT0idG5zOkxpc3RPZkJyb3dzZVBhdGhUYXJnZXQiIG5pbGxhYmxlPSJ0cnVlIj48L3hz"
"OmVsZW1lbnQ+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IkJyb3dzZVBhdGhSZXN1bHQiPg0K"
"ICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmRvY3VtZW50YXRpb24+VGhlIHJlc3VsdCBv"
"ZiBhIHRyYW5zbGF0ZSBvcGVhcmF0aW9uLjwveHM6ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hzOmFu"
"bm90YXRpb24+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iU3Rh"
"dHVzQ29kZSIgdHlwZT0idWE6U3RhdHVzQ29kZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iVGFyZ2V0cyIgdHlwZT0idG5zOkxpc3RPZkJyb3dzZVBhdGhUYXJnZXQi"
"IG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAg"
"PC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iQnJvd3NlUGF0aFJlc3VsdCIg"
"dHlwZT0idG5zOkJyb3dzZVBhdGhSZXN1bHQiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9"
"Ikxpc3RPZkJyb3dzZVBhdGhSZXN1bHQiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czpl"
"bGVtZW50IG5hbWU9IkJyb3dzZVBhdGhSZXN1bHQiIHR5cGU9InRuczpCcm93c2VQYXRoUmVzdWx0"
"IiBtaW5PY2N1cnM9IjAiIG1heE9jY3Vycz0idW5ib3VuZGVkIiBuaWxsYWJsZT0idHJ1ZSIgLz4N"
"CiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBu"
"YW1lPSJMaXN0T2ZCcm93c2VQYXRoUmVzdWx0IiB0eXBlPSJ0bnM6TGlzdE9mQnJvd3NlUGF0aFJl"
"c3VsdCIgbmlsbGFibGU9InRydWUiPjwveHM6ZWxlbWVudD4NCg0KICA8eHM6Y29tcGxleFR5cGUg"
"bmFtZT0iVHJhbnNsYXRlQnJvd3NlUGF0aHNUb05vZGVJZHNSZXF1ZXN0Ij4NCiAgICA8eHM6YW5u"
"b3RhdGlvbj4NCiAgICAgIDx4czpkb2N1bWVudGF0aW9uPlRyYW5zbGF0ZXMgb25lIG9yIG1vcmUg"
"cGF0aHMgaW4gdGhlIHNlcnZlciBhZGRyZXNzIHNwYWNlLjwveHM6ZG9jdW1lbnRhdGlvbj4NCiAg"
"ICA8L3hzOmFubm90YXRpb24+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQg"
"bmFtZT0iUmVxdWVzdEhlYWRlciIgdHlwZT0idG5zOlJlcXVlc3RIZWFkZXIiIG1pbk9jY3Vycz0i"
"MCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJCcm93c2VQYXRo"
"cyIgdHlwZT0idG5zOkxpc3RPZkJyb3dzZVBhdGgiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRy"
"dWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVs"
"ZW1lbnQgbmFtZT0iVHJhbnNsYXRlQnJvd3NlUGF0aHNUb05vZGVJZHNSZXF1ZXN0IiB0eXBlPSJ0"
"bnM6VHJhbnNsYXRlQnJvd3NlUGF0aHNUb05vZGVJZHNSZXF1ZXN0IiAvPg0KDQogIDx4czpjb21w"
"bGV4VHlwZSBuYW1lPSJUcmFuc2xhdGVCcm93c2VQYXRoc1RvTm9kZUlkc1Jlc3BvbnNlIj4NCiAg"
"ICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czpkb2N1bWVudGF0aW9uPlRyYW5zbGF0ZXMgb25l"
"IG9yIG1vcmUgcGF0aHMgaW4gdGhlIHNlcnZlciBhZGRyZXNzIHNwYWNlLjwveHM6ZG9jdW1lbnRh"
"dGlvbj4NCiAgICA8L3hzOmFubm90YXRpb24+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iUmVzcG9uc2VIZWFkZXIiIHR5cGU9InRuczpSZXNwb25zZUhlYWRlciIg"
"bWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9"
"IlJlc3VsdHMiIHR5cGU9InRuczpMaXN0T2ZCcm93c2VQYXRoUmVzdWx0IiBtaW5PY2N1cnM9IjAi"
"IG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRGlhZ25vc3RpY0lu"
"Zm9zIiB0eXBlPSJ1YTpMaXN0T2ZEaWFnbm9zdGljSW5mbyIgbWluT2NjdXJzPSIwIiBuaWxsYWJs"
"ZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8"
"eHM6ZWxlbWVudCBuYW1lPSJUcmFuc2xhdGVCcm93c2VQYXRoc1RvTm9kZUlkc1Jlc3BvbnNlIiB0"
"eXBlPSJ0bnM6VHJhbnNsYXRlQnJvd3NlUGF0aHNUb05vZGVJZHNSZXNwb25zZSIgLz4NCg0KICA8"
"eHM6Y29tcGxleFR5cGUgbmFtZT0iUmVnaXN0ZXJOb2Rlc1JlcXVlc3QiPg0KICAgIDx4czphbm5v"
"dGF0aW9uPg0KICAgICAgPHhzOmRvY3VtZW50YXRpb24+UmVnaXN0ZXJzIG9uZSBvciBtb3JlIG5v"
"ZGVzIGZvciByZXBlYXRlZCB1c2Ugd2l0aGluIGEgc2Vzc2lvbi48L3hzOmRvY3VtZW50YXRpb24+"
"DQogICAgPC94czphbm5vdGF0aW9uPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVt"
"ZW50IG5hbWU9IlJlcXVlc3RIZWFkZXIiIHR5cGU9InRuczpSZXF1ZXN0SGVhZGVyIiBtaW5PY2N1"
"cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iTm9kZXNU"
"b1JlZ2lzdGVyIiB0eXBlPSJ1YTpMaXN0T2ZOb2RlSWQiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9"
"InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhz"
"OmVsZW1lbnQgbmFtZT0iUmVnaXN0ZXJOb2Rlc1JlcXVlc3QiIHR5cGU9InRuczpSZWdpc3Rlck5v"
"ZGVzUmVxdWVzdCIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iUmVnaXN0ZXJOb2Rlc1Jl"
"c3BvbnNlIj4NCiAgICA8eHM6YW5ub3RhdGlvbj4NCiAgICAgIDx4czpkb2N1bWVudGF0aW9uPlJl"
"Z2lzdGVycyBvbmUgb3IgbW9yZSBub2RlcyBmb3IgcmVwZWF0ZWQgdXNlIHdpdGhpbiBhIHNlc3Np"
"b24uPC94czpkb2N1bWVudGF0aW9uPg0KICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICA8eHM6c2Vx"
"dWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZXNwb25zZUhlYWRlciIgdHlwZT0idG5z"
"OlJlc3BvbnNlSGVhZGVyIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iUmVnaXN0ZXJlZE5vZGVJZHMiIHR5cGU9InVhOkxpc3RPZk5vZGVJ"
"ZCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0K"
"ICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJSZWdpc3Rlck5vZGVzUmVz"
"cG9uc2UiIHR5cGU9InRuczpSZWdpc3Rlck5vZGVzUmVzcG9uc2UiIC8+DQoNCiAgPHhzOmNvbXBs"
"ZXhUeXBlIG5hbWU9IlVucmVnaXN0ZXJOb2Rlc1JlcXVlc3QiPg0KICAgIDx4czphbm5vdGF0aW9u"
"Pg0KICAgICAgPHhzOmRvY3VtZW50YXRpb24+VW5yZWdpc3RlcnMgb25lIG9yIG1vcmUgcHJldmlv"
"dXNseSByZWdpc3RlcmVkIG5vZGVzLjwveHM6ZG9jdW1lbnRhdGlvbj4NCiAgICA8L3hzOmFubm90"
"YXRpb24+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVxdWVz"
"dEhlYWRlciIgdHlwZT0idG5zOlJlcXVlc3RIZWFkZXIiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9"
"InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJOb2Rlc1RvVW5yZWdpc3RlciIgdHlw"
"ZT0idWE6TGlzdE9mTm9kZUlkIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAg"
"IDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9"
"IlVucmVnaXN0ZXJOb2Rlc1JlcXVlc3QiIHR5cGU9InRuczpVbnJlZ2lzdGVyTm9kZXNSZXF1ZXN0"
"IiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJVbnJlZ2lzdGVyTm9kZXNSZXNwb25zZSI+"
"DQogICAgPHhzOmFubm90YXRpb24+DQogICAgICA8eHM6ZG9jdW1lbnRhdGlvbj5VbnJlZ2lzdGVy"
"cyBvbmUgb3IgbW9yZSBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgbm9kZXMuPC94czpkb2N1bWVudGF0"
"aW9uPg0KICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6"
"ZWxlbWVudCBuYW1lPSJSZXNwb25zZUhlYWRlciIgdHlwZT0idG5zOlJlc3BvbnNlSGVhZGVyIiBt"
"aW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwv"
"eHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IlVucmVnaXN0ZXJOb2Rlc1Jlc3Bv"
"bnNlIiB0eXBlPSJ0bnM6VW5yZWdpc3Rlck5vZGVzUmVzcG9uc2UiIC8+DQoNCiAgPHhzOmVsZW1l"
"bnQgbmFtZT0iQ291bnRlciIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIC8+DQoNCiAgPHhzOmVsZW1l"
"bnQgbmFtZT0iTnVtZXJpY1JhbmdlIiB0eXBlPSJ4czpzdHJpbmciIC8+DQoNCiAgPHhzOmVsZW1l"
"bnQgbmFtZT0iVGltZSIgdHlwZT0ieHM6c3RyaW5nIiAvPg0KDQogIDx4czplbGVtZW50IG5hbWU9"
"IkRhdGUiIHR5cGU9InhzOmRhdGVUaW1lIiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJF"
"bmRwb2ludENvbmZpZ3VyYXRpb24iPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVt"
"ZW50IG5hbWU9Ik9wZXJhdGlvblRpbWVvdXQiIHR5cGU9InhzOmludCIgbWluT2NjdXJzPSIwIiAv"
"Pg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iVXNlQmluYXJ5RW5jb2RpbmciIHR5cGU9InhzOmJv"
"b2xlYW4iIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik1heFN0cmlu"
"Z0xlbmd0aCIgdHlwZT0ieHM6aW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVu"
"dCBuYW1lPSJNYXhCeXRlU3RyaW5nTGVuZ3RoIiB0eXBlPSJ4czppbnQiIG1pbk9jY3Vycz0iMCIg"
"Lz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik1heEFycmF5TGVuZ3RoIiB0eXBlPSJ4czppbnQi"
"IG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik1heE1lc3NhZ2VTaXpl"
"IiB0eXBlPSJ4czppbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9"
"Ik1heEJ1ZmZlclNpemUiIHR5cGU9InhzOmludCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iQ2hhbm5lbExpZmV0aW1lIiB0eXBlPSJ4czppbnQiIG1pbk9jY3Vycz0i"
"MCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlNlY3VyaXR5VG9rZW5MaWZldGltZSIgdHlw"
"ZT0ieHM6aW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpj"
"b21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iRW5kcG9pbnRDb25maWd1cmF0aW9uIiB0"
"eXBlPSJ0bnM6RW5kcG9pbnRDb25maWd1cmF0aW9uIiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBu"
"YW1lPSJMaXN0T2ZFbmRwb2ludENvbmZpZ3VyYXRpb24iPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAg"
"ICAgIDx4czplbGVtZW50IG5hbWU9IkVuZHBvaW50Q29uZmlndXJhdGlvbiIgdHlwZT0idG5zOkVu"
"ZHBvaW50Q29uZmlndXJhdGlvbiIgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRlZCIg"
"bmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlw"
"ZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTGlzdE9mRW5kcG9pbnRDb25maWd1cmF0aW9uIiB0eXBl"
"PSJ0bnM6TGlzdE9mRW5kcG9pbnRDb25maWd1cmF0aW9uIiBuaWxsYWJsZT0idHJ1ZSI+PC94czpl"
"bGVtZW50Pg0KDQogIDx4czpzaW1wbGVUeXBlICBuYW1lPSJDb21wbGlhbmNlTGV2ZWwiPg0KICAg"
"IDx4czpyZXN0cmljdGlvbiBiYXNlPSJ4czpzdHJpbmciPg0KICAgICAgPHhzOmVudW1lcmF0aW9u"
"IHZhbHVlPSJVbnRlc3RlZF8wIiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJQYXJ0"
"aWFsXzEiIC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IlNlbGZUZXN0ZWRfMiIgLz4N"
"CiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iQ2VydGlmaWVkXzMiIC8+DQogICAgPC94czpy"
"ZXN0cmljdGlvbj4NCiAgPC94czpzaW1wbGVUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJDb21w"
"bGlhbmNlTGV2ZWwiIHR5cGU9InRuczpDb21wbGlhbmNlTGV2ZWwiIC8+DQoNCiAgPHhzOmNvbXBs"
"ZXhUeXBlIG5hbWU9IlN1cHBvcnRlZFByb2ZpbGUiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAg"
"IDx4czplbGVtZW50IG5hbWU9Ik9yZ2FuaXphdGlvblVyaSIgdHlwZT0ieHM6c3RyaW5nIiBtaW5P"
"Y2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUHJv"
"ZmlsZUlkIiB0eXBlPSJ4czpzdHJpbmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+"
"DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJDb21wbGlhbmNlVG9vbCIgdHlwZT0ieHM6c3RyaW5n"
"IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFt"
"ZT0iQ29tcGxpYW5jZURhdGUiIHR5cGU9InhzOmRhdGVUaW1lIiBtaW5PY2N1cnM9IjAiIC8+DQog"
"ICAgICA8eHM6ZWxlbWVudCBuYW1lPSJDb21wbGlhbmNlTGV2ZWwiIHR5cGU9InRuczpDb21wbGlh"
"bmNlTGV2ZWwiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlVuc3Vw"
"cG9ydGVkVW5pdElkcyIgdHlwZT0idWE6TGlzdE9mU3RyaW5nIiBtaW5PY2N1cnM9IjAiIG5pbGxh"
"YmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQog"
"IDx4czplbGVtZW50IG5hbWU9IlN1cHBvcnRlZFByb2ZpbGUiIHR5cGU9InRuczpTdXBwb3J0ZWRQ"
"cm9maWxlIiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJMaXN0T2ZTdXBwb3J0ZWRQcm9m"
"aWxlIj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTdXBwb3J0"
"ZWRQcm9maWxlIiB0eXBlPSJ0bnM6U3VwcG9ydGVkUHJvZmlsZSIgbWluT2NjdXJzPSIwIiBtYXhP"
"Y2N1cnM9InVuYm91bmRlZCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4N"
"CiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTGlzdE9mU3VwcG9ydGVk"
"UHJvZmlsZSIgdHlwZT0idG5zOkxpc3RPZlN1cHBvcnRlZFByb2ZpbGUiIG5pbGxhYmxlPSJ0cnVl"
"Ij48L3hzOmVsZW1lbnQ+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IlNvZnR3YXJlQ2VydGlm"
"aWNhdGUiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlByb2R1"
"Y3ROYW1lIiB0eXBlPSJ4czpzdHJpbmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+"
"DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJQcm9kdWN0VXJpIiB0eXBlPSJ4czpzdHJpbmciIG1p"
"bk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJW"
"ZW5kb3JOYW1lIiB0eXBlPSJ4czpzdHJpbmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUi"
"IC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJWZW5kb3JQcm9kdWN0Q2VydGlmaWNhdGUiIHR5"
"cGU9InhzOmJhc2U2NEJpbmFyeSIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAg"
"ICAgIDx4czplbGVtZW50IG5hbWU9IlNvZnR3YXJlVmVyc2lvbiIgdHlwZT0ieHM6c3RyaW5nIiBt"
"aW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0i"
"QnVpbGROdW1iZXIiIHR5cGU9InhzOnN0cmluZyIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1"
"ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkJ1aWxkRGF0ZSIgdHlwZT0ieHM6ZGF0ZVRp"
"bWUiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Iklzc3VlZEJ5IiB0"
"eXBlPSJ4czpzdHJpbmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8"
"eHM6ZWxlbWVudCBuYW1lPSJJc3N1ZURhdGUiIHR5cGU9InhzOmRhdGVUaW1lIiBtaW5PY2N1cnM9"
"IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTdXBwb3J0ZWRQcm9maWxlcyIgdHlwZT0i"
"dG5zOkxpc3RPZlN1cHBvcnRlZFByb2ZpbGUiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUi"
"IC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1l"
"bnQgbmFtZT0iU29mdHdhcmVDZXJ0aWZpY2F0ZSIgdHlwZT0idG5zOlNvZnR3YXJlQ2VydGlmaWNh"
"dGUiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IlF1ZXJ5RGF0YURlc2NyaXB0aW9uIj4N"
"CiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZWxhdGl2ZVBhdGgi"
"IHR5cGU9InRuczpSZWxhdGl2ZVBhdGgiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+"
"DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJBdHRyaWJ1dGVJZCIgdHlwZT0ieHM6dW5zaWduZWRJ"
"bnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkluZGV4UmFuZ2Ui"
"IHR5cGU9InhzOnN0cmluZyIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8"
"L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJR"
"dWVyeURhdGFEZXNjcmlwdGlvbiIgdHlwZT0idG5zOlF1ZXJ5RGF0YURlc2NyaXB0aW9uIiAvPg0K"
"DQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJMaXN0T2ZRdWVyeURhdGFEZXNjcmlwdGlvbiI+DQog"
"ICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUXVlcnlEYXRhRGVzY3Jp"
"cHRpb24iIHR5cGU9InRuczpRdWVyeURhdGFEZXNjcmlwdGlvbiIgbWluT2NjdXJzPSIwIiBtYXhP"
"Y2N1cnM9InVuYm91bmRlZCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4N"
"CiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTGlzdE9mUXVlcnlEYXRh"
"RGVzY3JpcHRpb24iIHR5cGU9InRuczpMaXN0T2ZRdWVyeURhdGFEZXNjcmlwdGlvbiIgbmlsbGFi"
"bGU9InRydWUiPjwveHM6ZWxlbWVudD4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTm9kZVR5"
"cGVEZXNjcmlwdGlvbiI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFt"
"ZT0iVHlwZURlZmluaXRpb25Ob2RlIiB0eXBlPSJ1YTpFeHBhbmRlZE5vZGVJZCIgbWluT2NjdXJz"
"PSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkluY2x1ZGVT"
"dWJUeXBlcyIgdHlwZT0ieHM6Ym9vbGVhbiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVs"
"ZW1lbnQgbmFtZT0iRGF0YVRvUmV0dXJuIiB0eXBlPSJ0bnM6TGlzdE9mUXVlcnlEYXRhRGVzY3Jp"
"cHRpb24iIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5j"
"ZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTm9kZVR5cGVEZXNj"
"cmlwdGlvbiIgdHlwZT0idG5zOk5vZGVUeXBlRGVzY3JpcHRpb24iIC8+DQoNCiAgPHhzOmNvbXBs"
"ZXhUeXBlIG5hbWU9Ikxpc3RPZk5vZGVUeXBlRGVzY3JpcHRpb24iPg0KICAgIDx4czpzZXF1ZW5j"
"ZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik5vZGVUeXBlRGVzY3JpcHRpb24iIHR5cGU9InRu"
"czpOb2RlVHlwZURlc2NyaXB0aW9uIiBtaW5PY2N1cnM9IjAiIG1heE9jY3Vycz0idW5ib3VuZGVk"
"IiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhU"
"eXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZOb2RlVHlwZURlc2NyaXB0aW9uIiB0eXBl"
"PSJ0bnM6TGlzdE9mTm9kZVR5cGVEZXNjcmlwdGlvbiIgbmlsbGFibGU9InRydWUiPjwveHM6ZWxl"
"bWVudD4NCg0KICA8eHM6c2ltcGxlVHlwZSAgbmFtZT0iRmlsdGVyT3BlcmF0b3IiPg0KICAgIDx4"
"czpyZXN0cmljdGlvbiBiYXNlPSJ4czpzdHJpbmciPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZh"
"bHVlPSJFcXVhbHNfMCIgLz4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iSXNOdWxsXzEi"
"IC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IkdyZWF0ZXJUaGFuXzIiIC8+DQogICAg"
"ICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9Ikxlc3NUaGFuXzMiIC8+DQogICAgICA8eHM6ZW51bWVy"
"YXRpb24gdmFsdWU9IkdyZWF0ZXJUaGFuT3JFcXVhbF80IiAvPg0KICAgICAgPHhzOmVudW1lcmF0"
"aW9uIHZhbHVlPSJMZXNzVGhhbk9yRXF1YWxfNSIgLz4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2"
"YWx1ZT0iTGlrZV82IiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJOb3RfNyIgLz4N"
"CiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iQmV0d2Vlbl84IiAvPg0KICAgICAgPHhzOmVu"
"dW1lcmF0aW9uIHZhbHVlPSJJbkxpc3RfOSIgLz4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1"
"ZT0iQW5kXzEwIiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJPcl8xMSIgLz4NCiAg"
"ICAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iQ2FzdF8xMiIgLz4NCiAgICAgIDx4czplbnVtZXJh"
"dGlvbiB2YWx1ZT0iSW5WaWV3XzEzIiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJP"
"ZlR5cGVfMTQiIC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IlJlbGF0ZWRUb18xNSIg"
"Lz4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iQml0d2lzZUFuZF8xNiIgLz4NCiAgICAg"
"IDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iQml0d2lzZU9yXzE3IiAvPg0KICAgIDwveHM6cmVzdHJp"
"Y3Rpb24+DQogIDwveHM6c2ltcGxlVHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iRmlsdGVyT3Bl"
"cmF0b3IiIHR5cGU9InRuczpGaWx0ZXJPcGVyYXRvciIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUg"
"bmFtZT0iUXVlcnlEYXRhU2V0Ij4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVu"
"dCBuYW1lPSJOb2RlSWQiIHR5cGU9InVhOkV4cGFuZGVkTm9kZUlkIiBtaW5PY2N1cnM9IjAiIG5p"
"bGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iVHlwZURlZmluaXRpb25O"
"b2RlIiB0eXBlPSJ1YTpFeHBhbmRlZE5vZGVJZCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1"
"ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlZhbHVlcyIgdHlwZT0idWE6TGlzdE9mVmFy"
"aWFudCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNl"
"Pg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJRdWVyeURhdGFTZXQi"
"IHR5cGU9InRuczpRdWVyeURhdGFTZXQiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxp"
"c3RPZlF1ZXJ5RGF0YVNldCI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQg"
"bmFtZT0iUXVlcnlEYXRhU2V0IiB0eXBlPSJ0bnM6UXVlcnlEYXRhU2V0IiBtaW5PY2N1cnM9IjAi"
"IG1heE9jY3Vycz0idW5ib3VuZGVkIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVl"
"bmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZRdWVy"
"eURhdGFTZXQiIHR5cGU9InRuczpMaXN0T2ZRdWVyeURhdGFTZXQiIG5pbGxhYmxlPSJ0cnVlIj48"
"L3hzOmVsZW1lbnQ+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ik5vZGVSZWZlcmVuY2UiPg0K"
"ICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik5vZGVJZCIgdHlwZT0i"
"dWE6Tm9kZUlkIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVs"
"ZW1lbnQgbmFtZT0iUmVmZXJlbmNlVHlwZUlkIiB0eXBlPSJ1YTpOb2RlSWQiIG1pbk9jY3Vycz0i"
"MCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJJc0ZvcndhcmQi"
"IHR5cGU9InhzOmJvb2xlYW4iIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5h"
"bWU9IlJlZmVyZW5jZWROb2RlSWRzIiB0eXBlPSJ1YTpMaXN0T2ZOb2RlSWQiIG1pbk9jY3Vycz0i"
"MCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4"
"VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTm9kZVJlZmVyZW5jZSIgdHlwZT0idG5zOk5vZGVS"
"ZWZlcmVuY2UiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxpc3RPZk5vZGVSZWZlcmVu"
"Y2UiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik5vZGVSZWZl"
"cmVuY2UiIHR5cGU9InRuczpOb2RlUmVmZXJlbmNlIiBtaW5PY2N1cnM9IjAiIG1heE9jY3Vycz0i"
"dW5ib3VuZGVkIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hz"
"OmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZOb2RlUmVmZXJlbmNlIiB0"
"eXBlPSJ0bnM6TGlzdE9mTm9kZVJlZmVyZW5jZSIgbmlsbGFibGU9InRydWUiPjwveHM6ZWxlbWVu"
"dD4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iQ29udGVudEZpbHRlckVsZW1lbnQiPg0KICAg"
"IDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkZpbHRlck9wZXJhdG9yIiB0"
"eXBlPSJ0bnM6RmlsdGVyT3BlcmF0b3IiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVt"
"ZW50IG5hbWU9IkZpbHRlck9wZXJhbmRzIiB0eXBlPSJ1YTpMaXN0T2ZFeHRlbnNpb25PYmplY3Qi"
"IG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAg"
"PC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iQ29udGVudEZpbHRlckVsZW1l"
"bnQiIHR5cGU9InRuczpDb250ZW50RmlsdGVyRWxlbWVudCIgLz4NCg0KICA8eHM6Y29tcGxleFR5"
"cGUgbmFtZT0iTGlzdE9mQ29udGVudEZpbHRlckVsZW1lbnQiPg0KICAgIDx4czpzZXF1ZW5jZT4N"
"CiAgICAgIDx4czplbGVtZW50IG5hbWU9IkNvbnRlbnRGaWx0ZXJFbGVtZW50IiB0eXBlPSJ0bnM6"
"Q29udGVudEZpbHRlckVsZW1lbnQiIG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQi"
"IG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5"
"cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ikxpc3RPZkNvbnRlbnRGaWx0ZXJFbGVtZW50IiB0eXBl"
"PSJ0bnM6TGlzdE9mQ29udGVudEZpbHRlckVsZW1lbnQiIG5pbGxhYmxlPSJ0cnVlIj48L3hzOmVs"
"ZW1lbnQ+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IkNvbnRlbnRGaWx0ZXIiPg0KICAgIDx4"
"czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkVsZW1lbnRzIiB0eXBlPSJ0bnM6"
"TGlzdE9mQ29udGVudEZpbHRlckVsZW1lbnQiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUi"
"IC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1l"
"bnQgbmFtZT0iQ29udGVudEZpbHRlciIgdHlwZT0idG5zOkNvbnRlbnRGaWx0ZXIiIC8+DQoNCiAg"
"PHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxpc3RPZkNvbnRlbnRGaWx0ZXIiPg0KICAgIDx4czpzZXF1"
"ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkNvbnRlbnRGaWx0ZXIiIHR5cGU9InRuczpD"
"b250ZW50RmlsdGVyIiBtaW5PY2N1cnM9IjAiIG1heE9jY3Vycz0idW5ib3VuZGVkIiBuaWxsYWJs"
"ZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8"
"eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZDb250ZW50RmlsdGVyIiB0eXBlPSJ0bnM6TGlzdE9mQ29u"
"dGVudEZpbHRlciIgbmlsbGFibGU9InRydWUiPjwveHM6ZWxlbWVudD4NCg0KICA8eHM6Y29tcGxl"
"eFR5cGUgbmFtZT0iRmlsdGVyT3BlcmFuZCI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgIDwveHM6"
"c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IkZpbHRl"
"ck9wZXJhbmQiIHR5cGU9InRuczpGaWx0ZXJPcGVyYW5kIiAvPg0KDQogIDx4czpjb21wbGV4VHlw"
"ZSBuYW1lPSJFbGVtZW50T3BlcmFuZCI+DQogICAgPHhzOmNvbXBsZXhDb250ZW50IG1peGVkPSJm"
"YWxzZSI+DQogICAgICA8eHM6ZXh0ZW5zaW9uIGJhc2U9InRuczpGaWx0ZXJPcGVyYW5kIj4NCiAg"
"ICAgICAgPHhzOnNlcXVlbmNlPg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IkluZGV4IiB0"
"eXBlPSJ4czp1bnNpZ25lZEludCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICA8L3hzOnNlcXVl"
"bmNlPg0KICAgICAgPC94czpleHRlbnNpb24+DQogICAgPC94czpjb21wbGV4Q29udGVudD4NCiAg"
"PC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iRWxlbWVudE9wZXJhbmQiIHR5"
"cGU9InRuczpFbGVtZW50T3BlcmFuZCIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTGl0"
"ZXJhbE9wZXJhbmQiPg0KICAgIDx4czpjb21wbGV4Q29udGVudCBtaXhlZD0iZmFsc2UiPg0KICAg"
"ICAgPHhzOmV4dGVuc2lvbiBiYXNlPSJ0bnM6RmlsdGVyT3BlcmFuZCI+DQogICAgICAgIDx4czpz"
"ZXF1ZW5jZT4NCiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJWYWx1ZSIgdHlwZT0idWE6VmFy"
"aWFudCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICA8L3hzOnNlcXVlbmNlPg0KICAgICAgPC94"
"czpleHRlbnNpb24+DQogICAgPC94czpjb21wbGV4Q29udGVudD4NCiAgPC94czpjb21wbGV4VHlw"
"ZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTGl0ZXJhbE9wZXJhbmQiIHR5cGU9InRuczpMaXRlcmFs"
"T3BlcmFuZCIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iQXR0cmlidXRlT3BlcmFuZCI+"
"DQogICAgPHhzOmNvbXBsZXhDb250ZW50IG1peGVkPSJmYWxzZSI+DQogICAgICA8eHM6ZXh0ZW5z"
"aW9uIGJhc2U9InRuczpGaWx0ZXJPcGVyYW5kIj4NCiAgICAgICAgPHhzOnNlcXVlbmNlPg0KICAg"
"ICAgICAgIDx4czplbGVtZW50IG5hbWU9Ik5vZGVJZCIgdHlwZT0idWE6Tm9kZUlkIiBtaW5PY2N1"
"cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IkFs"
"aWFzIiB0eXBlPSJ4czpzdHJpbmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQog"
"ICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iQnJvd3NlUGF0aCIgdHlwZT0idG5zOlJlbGF0aXZl"
"UGF0aCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgICAgICA8eHM6ZWxl"
"bWVudCBuYW1lPSJBdHRyaWJ1dGVJZCIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0i"
"MCIgLz4NCiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJJbmRleFJhbmdlIiB0eXBlPSJ4czpz"
"dHJpbmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICAgIDwveHM6c2Vx"
"dWVuY2U+DQogICAgICA8L3hzOmV4dGVuc2lvbj4NCiAgICA8L3hzOmNvbXBsZXhDb250ZW50Pg0K"
"ICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJBdHRyaWJ1dGVPcGVyYW5k"
"IiB0eXBlPSJ0bnM6QXR0cmlidXRlT3BlcmFuZCIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFt"
"ZT0iU2ltcGxlQXR0cmlidXRlT3BlcmFuZCI+DQogICAgPHhzOmNvbXBsZXhDb250ZW50IG1peGVk"
"PSJmYWxzZSI+DQogICAgICA8eHM6ZXh0ZW5zaW9uIGJhc2U9InRuczpGaWx0ZXJPcGVyYW5kIj4N"
"CiAgICAgICAgPHhzOnNlcXVlbmNlPg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IlR5cGVE"
"ZWZpbml0aW9uSWQiIHR5cGU9InVhOk5vZGVJZCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1"
"ZSIgLz4NCiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJCcm93c2VQYXRoIiB0eXBlPSJ1YTpM"
"aXN0T2ZRdWFsaWZpZWROYW1lIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAg"
"ICAgICAgIDx4czplbGVtZW50IG5hbWU9IkF0dHJpYnV0ZUlkIiB0eXBlPSJ4czp1bnNpZ25lZElu"
"dCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IkluZGV4UmFu"
"Z2UiIHR5cGU9InhzOnN0cmluZyIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAg"
"ICAgICAgPC94czpzZXF1ZW5jZT4NCiAgICAgIDwveHM6ZXh0ZW5zaW9uPg0KICAgIDwveHM6Y29t"
"cGxleENvbnRlbnQ+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IlNp"
"bXBsZUF0dHJpYnV0ZU9wZXJhbmQiIHR5cGU9InRuczpTaW1wbGVBdHRyaWJ1dGVPcGVyYW5kIiAv"
"Pg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJMaXN0T2ZTaW1wbGVBdHRyaWJ1dGVPcGVyYW5k"
"Ij4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTaW1wbGVBdHRy"
"aWJ1dGVPcGVyYW5kIiB0eXBlPSJ0bnM6U2ltcGxlQXR0cmlidXRlT3BlcmFuZCIgbWluT2NjdXJz"
"PSIwIiBtYXhPY2N1cnM9InVuYm91bmRlZCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpz"
"ZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTGlzdE9m"
"U2ltcGxlQXR0cmlidXRlT3BlcmFuZCIgdHlwZT0idG5zOkxpc3RPZlNpbXBsZUF0dHJpYnV0ZU9w"
"ZXJhbmQiIG5pbGxhYmxlPSJ0cnVlIj48L3hzOmVsZW1lbnQ+DQoNCiAgPHhzOmNvbXBsZXhUeXBl"
"IG5hbWU9IkNvbnRlbnRGaWx0ZXJFbGVtZW50UmVzdWx0Ij4NCiAgICA8eHM6c2VxdWVuY2U+DQog"
"ICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTdGF0dXNDb2RlIiB0eXBlPSJ1YTpTdGF0dXNDb2RlIiBt"
"aW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJPcGVyYW5kU3RhdHVzQ29k"
"ZXMiIHR5cGU9InVhOkxpc3RPZlN0YXR1c0NvZGUiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRy"
"dWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJPcGVyYW5kRGlhZ25vc3RpY0luZm9zIiB0"
"eXBlPSJ1YTpMaXN0T2ZEaWFnbm9zdGljSW5mbyIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1"
"ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxl"
"bWVudCBuYW1lPSJDb250ZW50RmlsdGVyRWxlbWVudFJlc3VsdCIgdHlwZT0idG5zOkNvbnRlbnRG"
"aWx0ZXJFbGVtZW50UmVzdWx0IiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJMaXN0T2ZD"
"b250ZW50RmlsdGVyRWxlbWVudFJlc3VsdCI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iQ29udGVudEZpbHRlckVsZW1lbnRSZXN1bHQiIHR5cGU9InRuczpDb250"
"ZW50RmlsdGVyRWxlbWVudFJlc3VsdCIgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRl"
"ZCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4"
"VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTGlzdE9mQ29udGVudEZpbHRlckVsZW1lbnRSZXN1"
"bHQiIHR5cGU9InRuczpMaXN0T2ZDb250ZW50RmlsdGVyRWxlbWVudFJlc3VsdCIgbmlsbGFibGU9"
"InRydWUiPjwveHM6ZWxlbWVudD4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iQ29udGVudEZp"
"bHRlclJlc3VsdCI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0i"
"RWxlbWVudFJlc3VsdHMiIHR5cGU9InRuczpMaXN0T2ZDb250ZW50RmlsdGVyRWxlbWVudFJlc3Vs"
"dCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5h"
"bWU9IkVsZW1lbnREaWFnbm9zdGljSW5mb3MiIHR5cGU9InVhOkxpc3RPZkRpYWdub3N0aWNJbmZv"
"IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQog"
"IDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IkNvbnRlbnRGaWx0ZXJSZXN1"
"bHQiIHR5cGU9InRuczpDb250ZW50RmlsdGVyUmVzdWx0IiAvPg0KDQogIDx4czpjb21wbGV4VHlw"
"ZSBuYW1lPSJQYXJzaW5nUmVzdWx0Ij4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxl"
"bWVudCBuYW1lPSJTdGF0dXNDb2RlIiB0eXBlPSJ1YTpTdGF0dXNDb2RlIiBtaW5PY2N1cnM9IjAi"
"IC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJEYXRhU3RhdHVzQ29kZXMiIHR5cGU9InVhOkxp"
"c3RPZlN0YXR1c0NvZGUiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8"
"eHM6ZWxlbWVudCBuYW1lPSJEYXRhRGlhZ25vc3RpY0luZm9zIiB0eXBlPSJ1YTpMaXN0T2ZEaWFn"
"bm9zdGljSW5mbyIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNl"
"cXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJQYXJzaW5n"
"UmVzdWx0IiB0eXBlPSJ0bnM6UGFyc2luZ1Jlc3VsdCIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUg"
"bmFtZT0iTGlzdE9mUGFyc2luZ1Jlc3VsdCI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iUGFyc2luZ1Jlc3VsdCIgdHlwZT0idG5zOlBhcnNpbmdSZXN1bHQiIG1p"
"bk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAg"
"IDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9"
"Ikxpc3RPZlBhcnNpbmdSZXN1bHQiIHR5cGU9InRuczpMaXN0T2ZQYXJzaW5nUmVzdWx0IiBuaWxs"
"YWJsZT0idHJ1ZSI+PC94czplbGVtZW50Pg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJRdWVy"
"eUZpcnN0UmVxdWVzdCI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFt"
"ZT0iUmVxdWVzdEhlYWRlciIgdHlwZT0idG5zOlJlcXVlc3RIZWFkZXIiIG1pbk9jY3Vycz0iMCIg"
"bmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJWaWV3IiB0eXBlPSJ0"
"bnM6Vmlld0Rlc2NyaXB0aW9uIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAg"
"ICAgPHhzOmVsZW1lbnQgbmFtZT0iTm9kZVR5cGVzIiB0eXBlPSJ0bnM6TGlzdE9mTm9kZVR5cGVE"
"ZXNjcmlwdGlvbiIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czpl"
"bGVtZW50IG5hbWU9IkZpbHRlciIgdHlwZT0idG5zOkNvbnRlbnRGaWx0ZXIiIG1pbk9jY3Vycz0i"
"MCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJNYXhEYXRhU2V0"
"c1RvUmV0dXJuIiB0eXBlPSJ4czp1bnNpZ25lZEludCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iTWF4UmVmZXJlbmNlc1RvUmV0dXJuIiB0eXBlPSJ4czp1bnNpZ25l"
"ZEludCIgbWluT2NjdXJzPSIwIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxl"
"eFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IlF1ZXJ5Rmlyc3RSZXF1ZXN0IiB0eXBlPSJ0bnM6"
"UXVlcnlGaXJzdFJlcXVlc3QiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IlF1ZXJ5Rmly"
"c3RSZXNwb25zZSI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0i"
"UmVzcG9uc2VIZWFkZXIiIHR5cGU9InRuczpSZXNwb25zZUhlYWRlciIgbWluT2NjdXJzPSIwIiBu"
"aWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlF1ZXJ5RGF0YVNldHMi"
"IHR5cGU9InRuczpMaXN0T2ZRdWVyeURhdGFTZXQiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRy"
"dWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJDb250aW51YXRpb25Qb2ludCIgdHlwZT0i"
"eHM6YmFzZTY0QmluYXJ5IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iUGFyc2luZ1Jlc3VsdHMiIHR5cGU9InRuczpMaXN0T2ZQYXJzaW5n"
"UmVzdWx0IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1l"
"bnQgbmFtZT0iRGlhZ25vc3RpY0luZm9zIiB0eXBlPSJ1YTpMaXN0T2ZEaWFnbm9zdGljSW5mbyIg"
"bWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9"
"IkZpbHRlclJlc3VsdCIgdHlwZT0idG5zOkNvbnRlbnRGaWx0ZXJSZXN1bHQiIG1pbk9jY3Vycz0i"
"MCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4"
"VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iUXVlcnlGaXJzdFJlc3BvbnNlIiB0eXBlPSJ0bnM6"
"UXVlcnlGaXJzdFJlc3BvbnNlIiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJRdWVyeU5l"
"eHRSZXF1ZXN0Ij4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJS"
"ZXF1ZXN0SGVhZGVyIiB0eXBlPSJ0bnM6UmVxdWVzdEhlYWRlciIgbWluT2NjdXJzPSIwIiBuaWxs"
"YWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJlbGVhc2VDb250aW51YXRp"
"b25Qb2ludCIgdHlwZT0ieHM6Ym9vbGVhbiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVs"
"ZW1lbnQgbmFtZT0iQ29udGludWF0aW9uUG9pbnQiIHR5cGU9InhzOmJhc2U2NEJpbmFyeSIgbWlu"
"T2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hz"
"OmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJRdWVyeU5leHRSZXF1ZXN0IiB0eXBl"
"PSJ0bnM6UXVlcnlOZXh0UmVxdWVzdCIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iUXVl"
"cnlOZXh0UmVzcG9uc2UiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5h"
"bWU9IlJlc3BvbnNlSGVhZGVyIiB0eXBlPSJ0bnM6UmVzcG9uc2VIZWFkZXIiIG1pbk9jY3Vycz0i"
"MCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJRdWVyeURhdGFT"
"ZXRzIiB0eXBlPSJ0bnM6TGlzdE9mUXVlcnlEYXRhU2V0IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxl"
"PSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmV2aXNlZENvbnRpbnVhdGlvblBv"
"aW50IiB0eXBlPSJ4czpiYXNlNjRCaW5hcnkiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUi"
"IC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1l"
"bnQgbmFtZT0iUXVlcnlOZXh0UmVzcG9uc2UiIHR5cGU9InRuczpRdWVyeU5leHRSZXNwb25zZSIg"
"Lz4NCg0KICA8eHM6c2ltcGxlVHlwZSAgbmFtZT0iVGltZXN0YW1wc1RvUmV0dXJuIj4NCiAgICA8"
"eHM6cmVzdHJpY3Rpb24gYmFzZT0ieHM6c3RyaW5nIj4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2"
"YWx1ZT0iU291cmNlXzAiIC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IlNlcnZlcl8x"
"IiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJCb3RoXzIiIC8+DQogICAgICA8eHM6"
"ZW51bWVyYXRpb24gdmFsdWU9Ik5laXRoZXJfMyIgLz4NCiAgICA8L3hzOnJlc3RyaWN0aW9uPg0K"
"ICA8L3hzOnNpbXBsZVR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IlRpbWVzdGFtcHNUb1JldHVy"
"biIgdHlwZT0idG5zOlRpbWVzdGFtcHNUb1JldHVybiIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUg"
"bmFtZT0iUmVhZFZhbHVlSWQiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50"
"IG5hbWU9Ik5vZGVJZCIgdHlwZT0idWE6Tm9kZUlkIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0"
"cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iQXR0cmlidXRlSWQiIHR5cGU9InhzOnVu"
"c2lnbmVkSW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJJbmRl"
"eFJhbmdlIiB0eXBlPSJ4czpzdHJpbmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+"
"DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJEYXRhRW5jb2RpbmciIHR5cGU9InVhOlF1YWxpZmll"
"ZE5hbWUiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5j"
"ZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iUmVhZFZhbHVlSWQi"
"IHR5cGU9InRuczpSZWFkVmFsdWVJZCIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTGlz"
"dE9mUmVhZFZhbHVlSWQiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5h"
"bWU9IlJlYWRWYWx1ZUlkIiB0eXBlPSJ0bnM6UmVhZFZhbHVlSWQiIG1pbk9jY3Vycz0iMCIgbWF4"
"T2NjdXJzPSJ1bmJvdW5kZWQiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+"
"DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ikxpc3RPZlJlYWRWYWx1"
"ZUlkIiB0eXBlPSJ0bnM6TGlzdE9mUmVhZFZhbHVlSWQiIG5pbGxhYmxlPSJ0cnVlIj48L3hzOmVs"
"ZW1lbnQ+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IlJlYWRSZXF1ZXN0Ij4NCiAgICA8eHM6"
"c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZXF1ZXN0SGVhZGVyIiB0eXBlPSJ0"
"bnM6UmVxdWVzdEhlYWRlciIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAg"
"IDx4czplbGVtZW50IG5hbWU9Ik1heEFnZSIgdHlwZT0ieHM6ZG91YmxlIiBtaW5PY2N1cnM9IjAi"
"IC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJUaW1lc3RhbXBzVG9SZXR1cm4iIHR5cGU9InRu"
"czpUaW1lc3RhbXBzVG9SZXR1cm4iIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50"
"IG5hbWU9Ik5vZGVzVG9SZWFkIiB0eXBlPSJ0bnM6TGlzdE9mUmVhZFZhbHVlSWQiIG1pbk9jY3Vy"
"cz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21w"
"bGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iUmVhZFJlcXVlc3QiIHR5cGU9InRuczpSZWFk"
"UmVxdWVzdCIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iUmVhZFJlc3BvbnNlIj4NCiAg"
"ICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZXNwb25zZUhlYWRlciIg"
"dHlwZT0idG5zOlJlc3BvbnNlSGVhZGVyIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAv"
"Pg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVzdWx0cyIgdHlwZT0idWE6TGlzdE9mRGF0YVZh"
"bHVlIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQg"
"bmFtZT0iRGlhZ25vc3RpY0luZm9zIiB0eXBlPSJ1YTpMaXN0T2ZEaWFnbm9zdGljSW5mbyIgbWlu"
"T2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hz"
"OmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJSZWFkUmVzcG9uc2UiIHR5cGU9InRu"
"czpSZWFkUmVzcG9uc2UiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikhpc3RvcnlSZWFk"
"VmFsdWVJZCI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iTm9k"
"ZUlkIiB0eXBlPSJ1YTpOb2RlSWQiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQog"
"ICAgICA8eHM6ZWxlbWVudCBuYW1lPSJJbmRleFJhbmdlIiB0eXBlPSJ4czpzdHJpbmciIG1pbk9j"
"Y3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJEYXRh"
"RW5jb2RpbmciIHR5cGU9InVhOlF1YWxpZmllZE5hbWUiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9"
"InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJDb250aW51YXRpb25Qb2ludCIgdHlw"
"ZT0ieHM6YmFzZTY0QmluYXJ5IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAg"
"IDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9"
"Ikhpc3RvcnlSZWFkVmFsdWVJZCIgdHlwZT0idG5zOkhpc3RvcnlSZWFkVmFsdWVJZCIgLz4NCg0K"
"ICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTGlzdE9mSGlzdG9yeVJlYWRWYWx1ZUlkIj4NCiAgICA8"
"eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJIaXN0b3J5UmVhZFZhbHVlSWQi"
"IHR5cGU9InRuczpIaXN0b3J5UmVhZFZhbHVlSWQiIG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1"
"bmJvdW5kZWQiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6"
"Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ikxpc3RPZkhpc3RvcnlSZWFkVmFsdWVJ"
"ZCIgdHlwZT0idG5zOkxpc3RPZkhpc3RvcnlSZWFkVmFsdWVJZCIgbmlsbGFibGU9InRydWUiPjwv"
"eHM6ZWxlbWVudD4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iSGlzdG9yeVJlYWRSZXN1bHQi"
"Pg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlN0YXR1c0NvZGUi"
"IHR5cGU9InVhOlN0YXR1c0NvZGUiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50"
"IG5hbWU9IkNvbnRpbnVhdGlvblBvaW50IiB0eXBlPSJ4czpiYXNlNjRCaW5hcnkiIG1pbk9jY3Vy"
"cz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJIaXN0b3J5"
"RGF0YSIgdHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0"
"cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czpl"
"bGVtZW50IG5hbWU9Ikhpc3RvcnlSZWFkUmVzdWx0IiB0eXBlPSJ0bnM6SGlzdG9yeVJlYWRSZXN1"
"bHQiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxpc3RPZkhpc3RvcnlSZWFkUmVzdWx0"
"Ij4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJIaXN0b3J5UmVh"
"ZFJlc3VsdCIgdHlwZT0idG5zOkhpc3RvcnlSZWFkUmVzdWx0IiBtaW5PY2N1cnM9IjAiIG1heE9j"
"Y3Vycz0idW5ib3VuZGVkIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0K"
"ICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZIaXN0b3J5UmVh"
"ZFJlc3VsdCIgdHlwZT0idG5zOkxpc3RPZkhpc3RvcnlSZWFkUmVzdWx0IiBuaWxsYWJsZT0idHJ1"
"ZSI+PC94czplbGVtZW50Pg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJIaXN0b3J5UmVhZERl"
"dGFpbHMiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNv"
"bXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJIaXN0b3J5UmVhZERldGFpbHMiIHR5cGU9"
"InRuczpIaXN0b3J5UmVhZERldGFpbHMiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IlJl"
"YWRFdmVudERldGFpbHMiPg0KICAgIDx4czpjb21wbGV4Q29udGVudCBtaXhlZD0iZmFsc2UiPg0K"
"ICAgICAgPHhzOmV4dGVuc2lvbiBiYXNlPSJ0bnM6SGlzdG9yeVJlYWREZXRhaWxzIj4NCiAgICAg"
"ICAgPHhzOnNlcXVlbmNlPg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9Ik51bVZhbHVlc1Bl"
"ck5vZGUiIHR5cGU9InhzOnVuc2lnbmVkSW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iU3RhcnRUaW1lIiB0eXBlPSJ4czpkYXRlVGltZSIgbWluT2NjdXJz"
"PSIwIiAvPg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IkVuZFRpbWUiIHR5cGU9InhzOmRh"
"dGVUaW1lIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRmls"
"dGVyIiB0eXBlPSJ0bnM6RXZlbnRGaWx0ZXIiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUi"
"IC8+DQogICAgICAgIDwveHM6c2VxdWVuY2U+DQogICAgICA8L3hzOmV4dGVuc2lvbj4NCiAgICA8"
"L3hzOmNvbXBsZXhDb250ZW50Pg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBu"
"YW1lPSJSZWFkRXZlbnREZXRhaWxzIiB0eXBlPSJ0bnM6UmVhZEV2ZW50RGV0YWlscyIgLz4NCg0K"
"ICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iUmVhZFJhd01vZGlmaWVkRGV0YWlscyI+DQogICAgPHhz"
"OmNvbXBsZXhDb250ZW50IG1peGVkPSJmYWxzZSI+DQogICAgICA8eHM6ZXh0ZW5zaW9uIGJhc2U9"
"InRuczpIaXN0b3J5UmVhZERldGFpbHMiPg0KICAgICAgICA8eHM6c2VxdWVuY2U+DQogICAgICAg"
"ICAgPHhzOmVsZW1lbnQgbmFtZT0iSXNSZWFkTW9kaWZpZWQiIHR5cGU9InhzOmJvb2xlYW4iIG1p"
"bk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTdGFydFRpbWUiIHR5"
"cGU9InhzOmRhdGVUaW1lIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgPHhzOmVsZW1lbnQg"
"bmFtZT0iRW5kVGltZSIgdHlwZT0ieHM6ZGF0ZVRpbWUiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAg"
"ICAgICA8eHM6ZWxlbWVudCBuYW1lPSJOdW1WYWx1ZXNQZXJOb2RlIiB0eXBlPSJ4czp1bnNpZ25l"
"ZEludCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IlJldHVy"
"bkJvdW5kcyIgdHlwZT0ieHM6Ym9vbGVhbiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICA8L3hz"
"OnNlcXVlbmNlPg0KICAgICAgPC94czpleHRlbnNpb24+DQogICAgPC94czpjb21wbGV4Q29udGVu"
"dD4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iUmVhZFJhd01vZGlm"
"aWVkRGV0YWlscyIgdHlwZT0idG5zOlJlYWRSYXdNb2RpZmllZERldGFpbHMiIC8+DQoNCiAgPHhz"
"OmNvbXBsZXhUeXBlIG5hbWU9IlJlYWRQcm9jZXNzZWREZXRhaWxzIj4NCiAgICA8eHM6Y29tcGxl"
"eENvbnRlbnQgbWl4ZWQ9ImZhbHNlIj4NCiAgICAgIDx4czpleHRlbnNpb24gYmFzZT0idG5zOkhp"
"c3RvcnlSZWFkRGV0YWlscyI+DQogICAgICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgICAgICA8eHM6"
"ZWxlbWVudCBuYW1lPSJTdGFydFRpbWUiIHR5cGU9InhzOmRhdGVUaW1lIiBtaW5PY2N1cnM9IjAi"
"IC8+DQogICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRW5kVGltZSIgdHlwZT0ieHM6ZGF0ZVRp"
"bWUiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJQcm9jZXNz"
"aW5nSW50ZXJ2YWwiIHR5cGU9InhzOmRvdWJsZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAg"
"IDx4czplbGVtZW50IG5hbWU9IkFnZ3JlZ2F0ZVR5cGUiIHR5cGU9InVhOkxpc3RPZk5vZGVJZCIg"
"bWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgICAgICA8eHM6ZWxlbWVudCBu"
"YW1lPSJBZ2dyZWdhdGVDb25maWd1cmF0aW9uIiB0eXBlPSJ0bnM6QWdncmVnYXRlQ29uZmlndXJh"
"dGlvbiIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgICAgPC94czpzZXF1"
"ZW5jZT4NCiAgICAgIDwveHM6ZXh0ZW5zaW9uPg0KICAgIDwveHM6Y29tcGxleENvbnRlbnQ+DQog"
"IDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IlJlYWRQcm9jZXNzZWREZXRh"
"aWxzIiB0eXBlPSJ0bnM6UmVhZFByb2Nlc3NlZERldGFpbHMiIC8+DQoNCiAgPHhzOmNvbXBsZXhU"
"eXBlIG5hbWU9IlJlYWRBdFRpbWVEZXRhaWxzIj4NCiAgICA8eHM6Y29tcGxleENvbnRlbnQgbWl4"
"ZWQ9ImZhbHNlIj4NCiAgICAgIDx4czpleHRlbnNpb24gYmFzZT0idG5zOkhpc3RvcnlSZWFkRGV0"
"YWlscyI+DQogICAgICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1l"
"PSJSZXFUaW1lcyIgdHlwZT0idWE6TGlzdE9mRGF0ZVRpbWUiIG1pbk9jY3Vycz0iMCIgbmlsbGFi"
"bGU9InRydWUiIC8+DQogICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iVXNlU2ltcGxlQm91bmRz"
"IiB0eXBlPSJ4czpib29sZWFuIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgIDwveHM6c2VxdWVu"
"Y2U+DQogICAgICA8L3hzOmV4dGVuc2lvbj4NCiAgICA8L3hzOmNvbXBsZXhDb250ZW50Pg0KICA8"
"L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJSZWFkQXRUaW1lRGV0YWlscyIg"
"dHlwZT0idG5zOlJlYWRBdFRpbWVEZXRhaWxzIiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1l"
"PSJIaXN0b3J5RGF0YSI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFt"
"ZT0iRGF0YVZhbHVlcyIgdHlwZT0idWE6TGlzdE9mRGF0YVZhbHVlIiBtaW5PY2N1cnM9IjAiIG5p"
"bGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+"
"DQogIDx4czplbGVtZW50IG5hbWU9Ikhpc3RvcnlEYXRhIiB0eXBlPSJ0bnM6SGlzdG9yeURhdGEi"
"IC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ik1vZGlmaWNhdGlvbkluZm8iPg0KICAgIDx4"
"czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik1vZGlmaWNhdGlvblRpbWUiIHR5"
"cGU9InhzOmRhdGVUaW1lIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1l"
"PSJVcGRhdGVUeXBlIiB0eXBlPSJ0bnM6SGlzdG9yeVVwZGF0ZVR5cGUiIG1pbk9jY3Vycz0iMCIg"
"Lz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlVzZXJOYW1lIiB0eXBlPSJ4czpzdHJpbmciIG1p"
"bk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94"
"czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTW9kaWZpY2F0aW9uSW5mbyIgdHlw"
"ZT0idG5zOk1vZGlmaWNhdGlvbkluZm8iIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxp"
"c3RPZk1vZGlmaWNhdGlvbkluZm8iPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVt"
"ZW50IG5hbWU9Ik1vZGlmaWNhdGlvbkluZm8iIHR5cGU9InRuczpNb2RpZmljYXRpb25JbmZvIiBt"
"aW5PY2N1cnM9IjAiIG1heE9jY3Vycz0idW5ib3VuZGVkIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAg"
"ICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1l"
"PSJMaXN0T2ZNb2RpZmljYXRpb25JbmZvIiB0eXBlPSJ0bnM6TGlzdE9mTW9kaWZpY2F0aW9uSW5m"
"byIgbmlsbGFibGU9InRydWUiPjwveHM6ZWxlbWVudD4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFt"
"ZT0iSGlzdG9yeU1vZGlmaWVkRGF0YSI+DQogICAgPHhzOmNvbXBsZXhDb250ZW50IG1peGVkPSJm"
"YWxzZSI+DQogICAgICA8eHM6ZXh0ZW5zaW9uIGJhc2U9InRuczpIaXN0b3J5RGF0YSI+DQogICAg"
"ICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJNb2RpZmljYXRp"
"b25JbmZvcyIgdHlwZT0idG5zOkxpc3RPZk1vZGlmaWNhdGlvbkluZm8iIG1pbk9jY3Vycz0iMCIg"
"bmlsbGFibGU9InRydWUiIC8+DQogICAgICAgIDwveHM6c2VxdWVuY2U+DQogICAgICA8L3hzOmV4"
"dGVuc2lvbj4NCiAgICA8L3hzOmNvbXBsZXhDb250ZW50Pg0KICA8L3hzOmNvbXBsZXhUeXBlPg0K"
"ICA8eHM6ZWxlbWVudCBuYW1lPSJIaXN0b3J5TW9kaWZpZWREYXRhIiB0eXBlPSJ0bnM6SGlzdG9y"
"eU1vZGlmaWVkRGF0YSIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iSGlzdG9yeUV2ZW50"
"Ij4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJFdmVudHMiIHR5"
"cGU9InRuczpMaXN0T2ZIaXN0b3J5RXZlbnRGaWVsZExpc3QiIG1pbk9jY3Vycz0iMCIgbmlsbGFi"
"bGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAg"
"PHhzOmVsZW1lbnQgbmFtZT0iSGlzdG9yeUV2ZW50IiB0eXBlPSJ0bnM6SGlzdG9yeUV2ZW50IiAv"
"Pg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJIaXN0b3J5UmVhZFJlcXVlc3QiPg0KICAgIDx4"
"czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJlcXVlc3RIZWFkZXIiIHR5cGU9"
"InRuczpSZXF1ZXN0SGVhZGVyIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAg"
"ICAgPHhzOmVsZW1lbnQgbmFtZT0iSGlzdG9yeVJlYWREZXRhaWxzIiB0eXBlPSJ1YTpFeHRlbnNp"
"b25PYmplY3QiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxl"
"bWVudCBuYW1lPSJUaW1lc3RhbXBzVG9SZXR1cm4iIHR5cGU9InRuczpUaW1lc3RhbXBzVG9SZXR1"
"cm4iIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJlbGVhc2VDb250"
"aW51YXRpb25Qb2ludHMiIHR5cGU9InhzOmJvb2xlYW4iIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAg"
"IDx4czplbGVtZW50IG5hbWU9Ik5vZGVzVG9SZWFkIiB0eXBlPSJ0bnM6TGlzdE9mSGlzdG9yeVJl"
"YWRWYWx1ZUlkIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2Vx"
"dWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ikhpc3RvcnlS"
"ZWFkUmVxdWVzdCIgdHlwZT0idG5zOkhpc3RvcnlSZWFkUmVxdWVzdCIgLz4NCg0KICA8eHM6Y29t"
"cGxleFR5cGUgbmFtZT0iSGlzdG9yeVJlYWRSZXNwb25zZSI+DQogICAgPHhzOnNlcXVlbmNlPg0K"
"ICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVzcG9uc2VIZWFkZXIiIHR5cGU9InRuczpSZXNwb25z"
"ZUhlYWRlciIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVt"
"ZW50IG5hbWU9IlJlc3VsdHMiIHR5cGU9InRuczpMaXN0T2ZIaXN0b3J5UmVhZFJlc3VsdCIgbWlu"
"T2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkRp"
"YWdub3N0aWNJbmZvcyIgdHlwZT0idWE6TGlzdE9mRGlhZ25vc3RpY0luZm8iIG1pbk9jY3Vycz0i"
"MCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4"
"VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iSGlzdG9yeVJlYWRSZXNwb25zZSIgdHlwZT0idG5z"
"Okhpc3RvcnlSZWFkUmVzcG9uc2UiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IldyaXRl"
"VmFsdWUiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik5vZGVJ"
"ZCIgdHlwZT0idWE6Tm9kZUlkIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAg"
"ICAgPHhzOmVsZW1lbnQgbmFtZT0iQXR0cmlidXRlSWQiIHR5cGU9InhzOnVuc2lnbmVkSW50IiBt"
"aW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJJbmRleFJhbmdlIiB0eXBl"
"PSJ4czpzdHJpbmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6"
"ZWxlbWVudCBuYW1lPSJWYWx1ZSIgdHlwZT0idWE6RGF0YVZhbHVlIiBtaW5PY2N1cnM9IjAiIG5p"
"bGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+"
"DQogIDx4czplbGVtZW50IG5hbWU9IldyaXRlVmFsdWUiIHR5cGU9InRuczpXcml0ZVZhbHVlIiAv"
"Pg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJMaXN0T2ZXcml0ZVZhbHVlIj4NCiAgICA8eHM6"
"c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJXcml0ZVZhbHVlIiB0eXBlPSJ0bnM6"
"V3JpdGVWYWx1ZSIgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRlZCIgbmlsbGFibGU9"
"InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhz"
"OmVsZW1lbnQgbmFtZT0iTGlzdE9mV3JpdGVWYWx1ZSIgdHlwZT0idG5zOkxpc3RPZldyaXRlVmFs"
"dWUiIG5pbGxhYmxlPSJ0cnVlIj48L3hzOmVsZW1lbnQ+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5h"
"bWU9IldyaXRlUmVxdWVzdCI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQg"
"bmFtZT0iUmVxdWVzdEhlYWRlciIgdHlwZT0idG5zOlJlcXVlc3RIZWFkZXIiIG1pbk9jY3Vycz0i"
"MCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJOb2Rlc1RvV3Jp"
"dGUiIHR5cGU9InRuczpMaXN0T2ZXcml0ZVZhbHVlIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0"
"cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czpl"
"bGVtZW50IG5hbWU9IldyaXRlUmVxdWVzdCIgdHlwZT0idG5zOldyaXRlUmVxdWVzdCIgLz4NCg0K"
"ICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iV3JpdGVSZXNwb25zZSI+DQogICAgPHhzOnNlcXVlbmNl"
"Pg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVzcG9uc2VIZWFkZXIiIHR5cGU9InRuczpSZXNw"
"b25zZUhlYWRlciIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czpl"
"bGVtZW50IG5hbWU9IlJlc3VsdHMiIHR5cGU9InVhOkxpc3RPZlN0YXR1c0NvZGUiIG1pbk9jY3Vy"
"cz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJEaWFnbm9z"
"dGljSW5mb3MiIHR5cGU9InVhOkxpc3RPZkRpYWdub3N0aWNJbmZvIiBtaW5PY2N1cnM9IjAiIG5p"
"bGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+"
"DQogIDx4czplbGVtZW50IG5hbWU9IldyaXRlUmVzcG9uc2UiIHR5cGU9InRuczpXcml0ZVJlc3Bv"
"bnNlIiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJIaXN0b3J5VXBkYXRlRGV0YWlscyI+"
"DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iTm9kZUlkIiB0eXBl"
"PSJ1YTpOb2RlSWQiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpz"
"ZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iSGlzdG9y"
"eVVwZGF0ZURldGFpbHMiIHR5cGU9InRuczpIaXN0b3J5VXBkYXRlRGV0YWlscyIgLz4NCg0KICA8"
"eHM6c2ltcGxlVHlwZSAgbmFtZT0iSGlzdG9yeVVwZGF0ZVR5cGUiPg0KICAgIDx4czpyZXN0cmlj"
"dGlvbiBiYXNlPSJ4czpzdHJpbmciPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJJbnNl"
"cnRfMSIgLz4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iUmVwbGFjZV8yIiAvPg0KICAg"
"ICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJVcGRhdGVfMyIgLz4NCiAgICAgIDx4czplbnVtZXJh"
"dGlvbiB2YWx1ZT0iRGVsZXRlXzQiIC8+DQogICAgPC94czpyZXN0cmljdGlvbj4NCiAgPC94czpz"
"aW1wbGVUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJIaXN0b3J5VXBkYXRlVHlwZSIgdHlwZT0i"
"dG5zOkhpc3RvcnlVcGRhdGVUeXBlIiAvPg0KDQogIDx4czpzaW1wbGVUeXBlICBuYW1lPSJQZXJm"
"b3JtVXBkYXRlVHlwZSI+DQogICAgPHhzOnJlc3RyaWN0aW9uIGJhc2U9InhzOnN0cmluZyI+DQog"
"ICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9Ikluc2VydF8xIiAvPg0KICAgICAgPHhzOmVudW1l"
"cmF0aW9uIHZhbHVlPSJSZXBsYWNlXzIiIC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9"
"IlVwZGF0ZV8zIiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJSZW1vdmVfNCIgLz4N"
"CiAgICA8L3hzOnJlc3RyaWN0aW9uPg0KICA8L3hzOnNpbXBsZVR5cGU+DQogIDx4czplbGVtZW50"
"IG5hbWU9IlBlcmZvcm1VcGRhdGVUeXBlIiB0eXBlPSJ0bnM6UGVyZm9ybVVwZGF0ZVR5cGUiIC8+"
"DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IlVwZGF0ZURhdGFEZXRhaWxzIj4NCiAgICA8eHM6"
"Y29tcGxleENvbnRlbnQgbWl4ZWQ9ImZhbHNlIj4NCiAgICAgIDx4czpleHRlbnNpb24gYmFzZT0i"
"dG5zOkhpc3RvcnlVcGRhdGVEZXRhaWxzIj4NCiAgICAgICAgPHhzOnNlcXVlbmNlPg0KICAgICAg"
"ICAgIDx4czplbGVtZW50IG5hbWU9IlBlcmZvcm1JbnNlcnRSZXBsYWNlIiB0eXBlPSJ0bnM6UGVy"
"Zm9ybVVwZGF0ZVR5cGUiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICA8eHM6ZWxlbWVudCBu"
"YW1lPSJVcGRhdGVWYWx1ZXMiIHR5cGU9InVhOkxpc3RPZkRhdGFWYWx1ZSIgbWluT2NjdXJzPSIw"
"IiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgICAgPC94czpzZXF1ZW5jZT4NCiAgICAgIDwveHM6"
"ZXh0ZW5zaW9uPg0KICAgIDwveHM6Y29tcGxleENvbnRlbnQ+DQogIDwveHM6Y29tcGxleFR5cGU+"
"DQogIDx4czplbGVtZW50IG5hbWU9IlVwZGF0ZURhdGFEZXRhaWxzIiB0eXBlPSJ0bnM6VXBkYXRl"
"RGF0YURldGFpbHMiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IlVwZGF0ZVN0cnVjdHVy"
"ZURhdGFEZXRhaWxzIj4NCiAgICA8eHM6Y29tcGxleENvbnRlbnQgbWl4ZWQ9ImZhbHNlIj4NCiAg"
"ICAgIDx4czpleHRlbnNpb24gYmFzZT0idG5zOkhpc3RvcnlVcGRhdGVEZXRhaWxzIj4NCiAgICAg"
"ICAgPHhzOnNlcXVlbmNlPg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IlBlcmZvcm1JbnNl"
"cnRSZXBsYWNlIiB0eXBlPSJ0bnM6UGVyZm9ybVVwZGF0ZVR5cGUiIG1pbk9jY3Vycz0iMCIgLz4N"
"CiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJVcGRhdGVWYWx1ZXMiIHR5cGU9InVhOkxpc3RP"
"ZkRhdGFWYWx1ZSIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgICAgPC94"
"czpzZXF1ZW5jZT4NCiAgICAgIDwveHM6ZXh0ZW5zaW9uPg0KICAgIDwveHM6Y29tcGxleENvbnRl"
"bnQ+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IlVwZGF0ZVN0cnVj"
"dHVyZURhdGFEZXRhaWxzIiB0eXBlPSJ0bnM6VXBkYXRlU3RydWN0dXJlRGF0YURldGFpbHMiIC8+"
"DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IlVwZGF0ZUV2ZW50RGV0YWlscyI+DQogICAgPHhz"
"OmNvbXBsZXhDb250ZW50IG1peGVkPSJmYWxzZSI+DQogICAgICA8eHM6ZXh0ZW5zaW9uIGJhc2U9"
"InRuczpIaXN0b3J5VXBkYXRlRGV0YWlscyI+DQogICAgICAgIDx4czpzZXF1ZW5jZT4NCiAgICAg"
"ICAgICA8eHM6ZWxlbWVudCBuYW1lPSJQZXJmb3JtSW5zZXJ0UmVwbGFjZSIgdHlwZT0idG5zOlBl"
"cmZvcm1VcGRhdGVUeXBlIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgPHhzOmVsZW1lbnQg"
"bmFtZT0iRmlsdGVyIiB0eXBlPSJ0bnM6RXZlbnRGaWx0ZXIiIG1pbk9jY3Vycz0iMCIgbmlsbGFi"
"bGU9InRydWUiIC8+DQogICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRXZlbnREYXRhIiB0eXBl"
"PSJ0bnM6TGlzdE9mSGlzdG9yeUV2ZW50RmllbGRMaXN0IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxl"
"PSJ0cnVlIiAvPg0KICAgICAgICA8L3hzOnNlcXVlbmNlPg0KICAgICAgPC94czpleHRlbnNpb24+"
"DQogICAgPC94czpjb21wbGV4Q29udGVudD4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVs"
"ZW1lbnQgbmFtZT0iVXBkYXRlRXZlbnREZXRhaWxzIiB0eXBlPSJ0bnM6VXBkYXRlRXZlbnREZXRh"
"aWxzIiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJEZWxldGVSYXdNb2RpZmllZERldGFp"
"bHMiPg0KICAgIDx4czpjb21wbGV4Q29udGVudCBtaXhlZD0iZmFsc2UiPg0KICAgICAgPHhzOmV4"
"dGVuc2lvbiBiYXNlPSJ0bnM6SGlzdG9yeVVwZGF0ZURldGFpbHMiPg0KICAgICAgICA8eHM6c2Vx"
"dWVuY2U+DQogICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iSXNEZWxldGVNb2RpZmllZCIgdHlw"
"ZT0ieHM6Ym9vbGVhbiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgIDx4czplbGVtZW50IG5h"
"bWU9IlN0YXJ0VGltZSIgdHlwZT0ieHM6ZGF0ZVRpbWUiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAg"
"ICAgICA8eHM6ZWxlbWVudCBuYW1lPSJFbmRUaW1lIiB0eXBlPSJ4czpkYXRlVGltZSIgbWluT2Nj"
"dXJzPSIwIiAvPg0KICAgICAgICA8L3hzOnNlcXVlbmNlPg0KICAgICAgPC94czpleHRlbnNpb24+"
"DQogICAgPC94czpjb21wbGV4Q29udGVudD4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVs"
"ZW1lbnQgbmFtZT0iRGVsZXRlUmF3TW9kaWZpZWREZXRhaWxzIiB0eXBlPSJ0bnM6RGVsZXRlUmF3"
"TW9kaWZpZWREZXRhaWxzIiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJEZWxldGVBdFRp"
"bWVEZXRhaWxzIj4NCiAgICA8eHM6Y29tcGxleENvbnRlbnQgbWl4ZWQ9ImZhbHNlIj4NCiAgICAg"
"IDx4czpleHRlbnNpb24gYmFzZT0idG5zOkhpc3RvcnlVcGRhdGVEZXRhaWxzIj4NCiAgICAgICAg"
"PHhzOnNlcXVlbmNlPg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IlJlcVRpbWVzIiB0eXBl"
"PSJ1YTpMaXN0T2ZEYXRlVGltZSIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAg"
"ICAgICAgPC94czpzZXF1ZW5jZT4NCiAgICAgIDwveHM6ZXh0ZW5zaW9uPg0KICAgIDwveHM6Y29t"
"cGxleENvbnRlbnQ+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IkRl"
"bGV0ZUF0VGltZURldGFpbHMiIHR5cGU9InRuczpEZWxldGVBdFRpbWVEZXRhaWxzIiAvPg0KDQog"
"IDx4czpjb21wbGV4VHlwZSBuYW1lPSJEZWxldGVFdmVudERldGFpbHMiPg0KICAgIDx4czpjb21w"
"bGV4Q29udGVudCBtaXhlZD0iZmFsc2UiPg0KICAgICAgPHhzOmV4dGVuc2lvbiBiYXNlPSJ0bnM6"
"SGlzdG9yeVVwZGF0ZURldGFpbHMiPg0KICAgICAgICA8eHM6c2VxdWVuY2U+DQogICAgICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iRXZlbnRJZHMiIHR5cGU9InVhOkxpc3RPZkJ5dGVTdHJpbmciIG1p"
"bk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICAgIDwveHM6c2VxdWVuY2U+DQog"
"ICAgICA8L3hzOmV4dGVuc2lvbj4NCiAgICA8L3hzOmNvbXBsZXhDb250ZW50Pg0KICA8L3hzOmNv"
"bXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJEZWxldGVFdmVudERldGFpbHMiIHR5cGU9"
"InRuczpEZWxldGVFdmVudERldGFpbHMiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikhp"
"c3RvcnlVcGRhdGVSZXN1bHQiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50"
"IG5hbWU9IlN0YXR1c0NvZGUiIHR5cGU9InVhOlN0YXR1c0NvZGUiIG1pbk9jY3Vycz0iMCIgLz4N"
"CiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik9wZXJhdGlvblJlc3VsdHMiIHR5cGU9InVhOkxpc3RP"
"ZlN0YXR1c0NvZGUiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6"
"ZWxlbWVudCBuYW1lPSJEaWFnbm9zdGljSW5mb3MiIHR5cGU9InVhOkxpc3RPZkRpYWdub3N0aWNJ"
"bmZvIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+"
"DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ikhpc3RvcnlVcGRhdGVS"
"ZXN1bHQiIHR5cGU9InRuczpIaXN0b3J5VXBkYXRlUmVzdWx0IiAvPg0KDQogIDx4czpjb21wbGV4"
"VHlwZSBuYW1lPSJMaXN0T2ZIaXN0b3J5VXBkYXRlUmVzdWx0Ij4NCiAgICA8eHM6c2VxdWVuY2U+"
"DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJIaXN0b3J5VXBkYXRlUmVzdWx0IiB0eXBlPSJ0bnM6"
"SGlzdG9yeVVwZGF0ZVJlc3VsdCIgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRlZCIg"
"bmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlw"
"ZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTGlzdE9mSGlzdG9yeVVwZGF0ZVJlc3VsdCIgdHlwZT0i"
"dG5zOkxpc3RPZkhpc3RvcnlVcGRhdGVSZXN1bHQiIG5pbGxhYmxlPSJ0cnVlIj48L3hzOmVsZW1l"
"bnQ+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikhpc3RvcnlVcGRhdGVFdmVudFJlc3VsdCI+"
"DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iU3RhdHVzQ29kZSIg"
"dHlwZT0idWE6U3RhdHVzQ29kZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQg"
"bmFtZT0iRXZlbnRGaWx0ZXJSZXN1bHQiIHR5cGU9InRuczpFdmVudEZpbHRlclJlc3VsdCIgbWlu"
"T2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hz"
"OmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJIaXN0b3J5VXBkYXRlRXZlbnRSZXN1"
"bHQiIHR5cGU9InRuczpIaXN0b3J5VXBkYXRlRXZlbnRSZXN1bHQiIC8+DQoNCiAgPHhzOmNvbXBs"
"ZXhUeXBlIG5hbWU9Ikxpc3RPZkhpc3RvcnlVcGRhdGVFdmVudFJlc3VsdCI+DQogICAgPHhzOnNl"
"cXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iSGlzdG9yeVVwZGF0ZUV2ZW50UmVzdWx0"
"IiB0eXBlPSJ0bnM6SGlzdG9yeVVwZGF0ZUV2ZW50UmVzdWx0IiBtaW5PY2N1cnM9IjAiIG1heE9j"
"Y3Vycz0idW5ib3VuZGVkIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0K"
"ICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZIaXN0b3J5VXBk"
"YXRlRXZlbnRSZXN1bHQiIHR5cGU9InRuczpMaXN0T2ZIaXN0b3J5VXBkYXRlRXZlbnRSZXN1bHQi"
"IG5pbGxhYmxlPSJ0cnVlIj48L3hzOmVsZW1lbnQ+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9"
"Ikhpc3RvcnlVcGRhdGVSZXF1ZXN0Ij4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxl"
"bWVudCBuYW1lPSJSZXF1ZXN0SGVhZGVyIiB0eXBlPSJ0bnM6UmVxdWVzdEhlYWRlciIgbWluT2Nj"
"dXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ikhpc3Rv"
"cnlVcGRhdGVEZXRhaWxzIiB0eXBlPSJ1YTpMaXN0T2ZFeHRlbnNpb25PYmplY3QiIG1pbk9jY3Vy"
"cz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21w"
"bGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iSGlzdG9yeVVwZGF0ZVJlcXVlc3QiIHR5cGU9"
"InRuczpIaXN0b3J5VXBkYXRlUmVxdWVzdCIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0i"
"SGlzdG9yeVVwZGF0ZVJlc3BvbnNlIj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxl"
"bWVudCBuYW1lPSJSZXNwb25zZUhlYWRlciIgdHlwZT0idG5zOlJlc3BvbnNlSGVhZGVyIiBtaW5P"
"Y2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVz"
"dWx0cyIgdHlwZT0idG5zOkxpc3RPZkhpc3RvcnlVcGRhdGVSZXN1bHQiIG1pbk9jY3Vycz0iMCIg"
"bmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJEaWFnbm9zdGljSW5m"
"b3MiIHR5cGU9InVhOkxpc3RPZkRpYWdub3N0aWNJbmZvIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxl"
"PSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4"
"czplbGVtZW50IG5hbWU9Ikhpc3RvcnlVcGRhdGVSZXNwb25zZSIgdHlwZT0idG5zOkhpc3RvcnlV"
"cGRhdGVSZXNwb25zZSIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iQ2FsbE1ldGhvZFJl"
"cXVlc3QiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik9iamVj"
"dElkIiB0eXBlPSJ1YTpOb2RlSWQiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQog"
"ICAgICA8eHM6ZWxlbWVudCBuYW1lPSJNZXRob2RJZCIgdHlwZT0idWE6Tm9kZUlkIiBtaW5PY2N1"
"cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iSW5wdXRB"
"cmd1bWVudHMiIHR5cGU9InVhOkxpc3RPZlZhcmlhbnQiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9"
"InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhz"
"OmVsZW1lbnQgbmFtZT0iQ2FsbE1ldGhvZFJlcXVlc3QiIHR5cGU9InRuczpDYWxsTWV0aG9kUmVx"
"dWVzdCIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTGlzdE9mQ2FsbE1ldGhvZFJlcXVl"
"c3QiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkNhbGxNZXRo"
"b2RSZXF1ZXN0IiB0eXBlPSJ0bnM6Q2FsbE1ldGhvZFJlcXVlc3QiIG1pbk9jY3Vycz0iMCIgbWF4"
"T2NjdXJzPSJ1bmJvdW5kZWQiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+"
"DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ikxpc3RPZkNhbGxNZXRo"
"b2RSZXF1ZXN0IiB0eXBlPSJ0bnM6TGlzdE9mQ2FsbE1ldGhvZFJlcXVlc3QiIG5pbGxhYmxlPSJ0"
"cnVlIj48L3hzOmVsZW1lbnQ+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IkNhbGxNZXRob2RS"
"ZXN1bHQiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlN0YXR1"
"c0NvZGUiIHR5cGU9InVhOlN0YXR1c0NvZGUiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czpl"
"bGVtZW50IG5hbWU9IklucHV0QXJndW1lbnRSZXN1bHRzIiB0eXBlPSJ1YTpMaXN0T2ZTdGF0dXND"
"b2RlIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQg"
"bmFtZT0iSW5wdXRBcmd1bWVudERpYWdub3N0aWNJbmZvcyIgdHlwZT0idWE6TGlzdE9mRGlhZ25v"
"c3RpY0luZm8iIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxl"
"bWVudCBuYW1lPSJPdXRwdXRBcmd1bWVudHMiIHR5cGU9InVhOkxpc3RPZlZhcmlhbnQiIG1pbk9j"
"Y3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpj"
"b21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iQ2FsbE1ldGhvZFJlc3VsdCIgdHlwZT0i"
"dG5zOkNhbGxNZXRob2RSZXN1bHQiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxpc3RP"
"ZkNhbGxNZXRob2RSZXN1bHQiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50"
"IG5hbWU9IkNhbGxNZXRob2RSZXN1bHQiIHR5cGU9InRuczpDYWxsTWV0aG9kUmVzdWx0IiBtaW5P"
"Y2N1cnM9IjAiIG1heE9jY3Vycz0idW5ib3VuZGVkIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8"
"L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJM"
"aXN0T2ZDYWxsTWV0aG9kUmVzdWx0IiB0eXBlPSJ0bnM6TGlzdE9mQ2FsbE1ldGhvZFJlc3VsdCIg"
"bmlsbGFibGU9InRydWUiPjwveHM6ZWxlbWVudD4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0i"
"Q2FsbFJlcXVlc3QiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9"
"IlJlcXVlc3RIZWFkZXIiIHR5cGU9InRuczpSZXF1ZXN0SGVhZGVyIiBtaW5PY2N1cnM9IjAiIG5p"
"bGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iTWV0aG9kc1RvQ2FsbCIg"
"dHlwZT0idG5zOkxpc3RPZkNhbGxNZXRob2RSZXF1ZXN0IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxl"
"PSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4"
"czplbGVtZW50IG5hbWU9IkNhbGxSZXF1ZXN0IiB0eXBlPSJ0bnM6Q2FsbFJlcXVlc3QiIC8+DQoN"
"CiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IkNhbGxSZXNwb25zZSI+DQogICAgPHhzOnNlcXVlbmNl"
"Pg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVzcG9uc2VIZWFkZXIiIHR5cGU9InRuczpSZXNw"
"b25zZUhlYWRlciIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czpl"
"bGVtZW50IG5hbWU9IlJlc3VsdHMiIHR5cGU9InRuczpMaXN0T2ZDYWxsTWV0aG9kUmVzdWx0IiBt"
"aW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0i"
"RGlhZ25vc3RpY0luZm9zIiB0eXBlPSJ1YTpMaXN0T2ZEaWFnbm9zdGljSW5mbyIgbWluT2NjdXJz"
"PSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBs"
"ZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJDYWxsUmVzcG9uc2UiIHR5cGU9InRuczpDYWxs"
"UmVzcG9uc2UiIC8+DQoNCiAgPHhzOnNpbXBsZVR5cGUgIG5hbWU9Ik1vbml0b3JpbmdNb2RlIj4N"
"CiAgICA8eHM6cmVzdHJpY3Rpb24gYmFzZT0ieHM6c3RyaW5nIj4NCiAgICAgIDx4czplbnVtZXJh"
"dGlvbiB2YWx1ZT0iRGlzYWJsZWRfMCIgLz4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0i"
"U2FtcGxpbmdfMSIgLz4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iUmVwb3J0aW5nXzIi"
"IC8+DQogICAgPC94czpyZXN0cmljdGlvbj4NCiAgPC94czpzaW1wbGVUeXBlPg0KICA8eHM6ZWxl"
"bWVudCBuYW1lPSJNb25pdG9yaW5nTW9kZSIgdHlwZT0idG5zOk1vbml0b3JpbmdNb2RlIiAvPg0K"
"DQogIDx4czpzaW1wbGVUeXBlICBuYW1lPSJEYXRhQ2hhbmdlVHJpZ2dlciI+DQogICAgPHhzOnJl"
"c3RyaWN0aW9uIGJhc2U9InhzOnN0cmluZyI+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9"
"IlN0YXR1c18wIiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJTdGF0dXNWYWx1ZV8x"
"IiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJTdGF0dXNWYWx1ZVRpbWVzdGFtcF8y"
"IiAvPg0KICAgIDwveHM6cmVzdHJpY3Rpb24+DQogIDwveHM6c2ltcGxlVHlwZT4NCiAgPHhzOmVs"
"ZW1lbnQgbmFtZT0iRGF0YUNoYW5nZVRyaWdnZXIiIHR5cGU9InRuczpEYXRhQ2hhbmdlVHJpZ2dl"
"ciIgLz4NCg0KICA8eHM6c2ltcGxlVHlwZSAgbmFtZT0iRGVhZGJhbmRUeXBlIj4NCiAgICA8eHM6"
"cmVzdHJpY3Rpb24gYmFzZT0ieHM6c3RyaW5nIj4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1"
"ZT0iTm9uZV8wIiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJBYnNvbHV0ZV8xIiAv"
"Pg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJQZXJjZW50XzIiIC8+DQogICAgPC94czpy"
"ZXN0cmljdGlvbj4NCiAgPC94czpzaW1wbGVUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJEZWFk"
"YmFuZFR5cGUiIHR5cGU9InRuczpEZWFkYmFuZFR5cGUiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBl"
"IG5hbWU9Ik1vbml0b3JpbmdGaWx0ZXIiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICA8L3hzOnNl"
"cXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJNb25pdG9y"
"aW5nRmlsdGVyIiB0eXBlPSJ0bnM6TW9uaXRvcmluZ0ZpbHRlciIgLz4NCg0KICA8eHM6Y29tcGxl"
"eFR5cGUgbmFtZT0iRGF0YUNoYW5nZUZpbHRlciI+DQogICAgPHhzOmNvbXBsZXhDb250ZW50IG1p"
"eGVkPSJmYWxzZSI+DQogICAgICA8eHM6ZXh0ZW5zaW9uIGJhc2U9InRuczpNb25pdG9yaW5nRmls"
"dGVyIj4NCiAgICAgICAgPHhzOnNlcXVlbmNlPg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9"
"IlRyaWdnZXIiIHR5cGU9InRuczpEYXRhQ2hhbmdlVHJpZ2dlciIgbWluT2NjdXJzPSIwIiAvPg0K"
"ICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IkRlYWRiYW5kVHlwZSIgdHlwZT0ieHM6dW5zaWdu"
"ZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJEZWFk"
"YmFuZFZhbHVlIiB0eXBlPSJ4czpkb3VibGUiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgPC94"
"czpzZXF1ZW5jZT4NCiAgICAgIDwveHM6ZXh0ZW5zaW9uPg0KICAgIDwveHM6Y29tcGxleENvbnRl"
"bnQ+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IkRhdGFDaGFuZ2VG"
"aWx0ZXIiIHR5cGU9InRuczpEYXRhQ2hhbmdlRmlsdGVyIiAvPg0KDQogIDx4czpjb21wbGV4VHlw"
"ZSBuYW1lPSJFdmVudEZpbHRlciI+DQogICAgPHhzOmNvbXBsZXhDb250ZW50IG1peGVkPSJmYWxz"
"ZSI+DQogICAgICA8eHM6ZXh0ZW5zaW9uIGJhc2U9InRuczpNb25pdG9yaW5nRmlsdGVyIj4NCiAg"
"ICAgICAgPHhzOnNlcXVlbmNlPg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IlNlbGVjdENs"
"YXVzZXMiIHR5cGU9InRuczpMaXN0T2ZTaW1wbGVBdHRyaWJ1dGVPcGVyYW5kIiBtaW5PY2N1cnM9"
"IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IldoZXJl"
"Q2xhdXNlIiB0eXBlPSJ0bnM6Q29udGVudEZpbHRlciIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0i"
"dHJ1ZSIgLz4NCiAgICAgICAgPC94czpzZXF1ZW5jZT4NCiAgICAgIDwveHM6ZXh0ZW5zaW9uPg0K"
"ICAgIDwveHM6Y29tcGxleENvbnRlbnQ+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVt"
"ZW50IG5hbWU9IkV2ZW50RmlsdGVyIiB0eXBlPSJ0bnM6RXZlbnRGaWx0ZXIiIC8+DQoNCiAgPHhz"
"OmNvbXBsZXhUeXBlIG5hbWU9IkFnZ3JlZ2F0ZUNvbmZpZ3VyYXRpb24iPg0KICAgIDx4czpzZXF1"
"ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlVzZVNlcnZlckNhcGFiaWxpdGllc0RlZmF1"
"bHRzIiB0eXBlPSJ4czpib29sZWFuIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVu"
"dCBuYW1lPSJUcmVhdFVuY2VydGFpbkFzQmFkIiB0eXBlPSJ4czpib29sZWFuIiBtaW5PY2N1cnM9"
"IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJQZXJjZW50RGF0YUJhZCIgdHlwZT0ieHM6"
"dW5zaWduZWRCeXRlIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJQ"
"ZXJjZW50RGF0YUdvb2QiIHR5cGU9InhzOnVuc2lnbmVkQnl0ZSIgbWluT2NjdXJzPSIwIiAvPg0K"
"ICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iVXNlU2xvcGVkRXh0cmFwb2xhdGlvbiIgdHlwZT0ieHM6"
"Ym9vbGVhbiIgbWluT2NjdXJzPSIwIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29t"
"cGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IkFnZ3JlZ2F0ZUNvbmZpZ3VyYXRpb24iIHR5"
"cGU9InRuczpBZ2dyZWdhdGVDb25maWd1cmF0aW9uIiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBu"
"YW1lPSJBZ2dyZWdhdGVGaWx0ZXIiPg0KICAgIDx4czpjb21wbGV4Q29udGVudCBtaXhlZD0iZmFs"
"c2UiPg0KICAgICAgPHhzOmV4dGVuc2lvbiBiYXNlPSJ0bnM6TW9uaXRvcmluZ0ZpbHRlciI+DQog"
"ICAgICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTdGFydFRp"
"bWUiIHR5cGU9InhzOmRhdGVUaW1lIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgPHhzOmVs"
"ZW1lbnQgbmFtZT0iQWdncmVnYXRlVHlwZSIgdHlwZT0idWE6Tm9kZUlkIiBtaW5PY2N1cnM9IjAi"
"IG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IlByb2Nlc3Np"
"bmdJbnRlcnZhbCIgdHlwZT0ieHM6ZG91YmxlIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iQWdncmVnYXRlQ29uZmlndXJhdGlvbiIgdHlwZT0idG5zOkFnZ3Jl"
"Z2F0ZUNvbmZpZ3VyYXRpb24iIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAg"
"ICAgIDwveHM6c2VxdWVuY2U+DQogICAgICA8L3hzOmV4dGVuc2lvbj4NCiAgICA8L3hzOmNvbXBs"
"ZXhDb250ZW50Pg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJBZ2dy"
"ZWdhdGVGaWx0ZXIiIHR5cGU9InRuczpBZ2dyZWdhdGVGaWx0ZXIiIC8+DQoNCiAgPHhzOmNvbXBs"
"ZXhUeXBlIG5hbWU9Ik1vbml0b3JpbmdGaWx0ZXJSZXN1bHQiPg0KICAgIDx4czpzZXF1ZW5jZT4N"
"CiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBu"
"YW1lPSJNb25pdG9yaW5nRmlsdGVyUmVzdWx0IiB0eXBlPSJ0bnM6TW9uaXRvcmluZ0ZpbHRlclJl"
"c3VsdCIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iRXZlbnRGaWx0ZXJSZXN1bHQiPg0K"
"ICAgIDx4czpjb21wbGV4Q29udGVudCBtaXhlZD0iZmFsc2UiPg0KICAgICAgPHhzOmV4dGVuc2lv"
"biBiYXNlPSJ0bnM6TW9uaXRvcmluZ0ZpbHRlclJlc3VsdCI+DQogICAgICAgIDx4czpzZXF1ZW5j"
"ZT4NCiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTZWxlY3RDbGF1c2VSZXN1bHRzIiB0eXBl"
"PSJ1YTpMaXN0T2ZTdGF0dXNDb2RlIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0K"
"ICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IlNlbGVjdENsYXVzZURpYWdub3N0aWNJbmZvcyIg"
"dHlwZT0idWE6TGlzdE9mRGlhZ25vc3RpY0luZm8iIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRy"
"dWUiIC8+DQogICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iV2hlcmVDbGF1c2VSZXN1bHQiIHR5"
"cGU9InRuczpDb250ZW50RmlsdGVyUmVzdWx0IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVl"
"IiAvPg0KICAgICAgICA8L3hzOnNlcXVlbmNlPg0KICAgICAgPC94czpleHRlbnNpb24+DQogICAg"
"PC94czpjb21wbGV4Q29udGVudD4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQg"
"bmFtZT0iRXZlbnRGaWx0ZXJSZXN1bHQiIHR5cGU9InRuczpFdmVudEZpbHRlclJlc3VsdCIgLz4N"
"Cg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iQWdncmVnYXRlRmlsdGVyUmVzdWx0Ij4NCiAgICA8"
"eHM6Y29tcGxleENvbnRlbnQgbWl4ZWQ9ImZhbHNlIj4NCiAgICAgIDx4czpleHRlbnNpb24gYmFz"
"ZT0idG5zOk1vbml0b3JpbmdGaWx0ZXJSZXN1bHQiPg0KICAgICAgICA8eHM6c2VxdWVuY2U+DQog"
"ICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmV2aXNlZFN0YXJ0VGltZSIgdHlwZT0ieHM6ZGF0"
"ZVRpbWUiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZXZp"
"c2VkUHJvY2Vzc2luZ0ludGVydmFsIiB0eXBlPSJ4czpkb3VibGUiIG1pbk9jY3Vycz0iMCIgLz4N"
"CiAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZXZpc2VkQWdncmVnYXRlQ29uZmlndXJhdGlv"
"biIgdHlwZT0idG5zOkFnZ3JlZ2F0ZUNvbmZpZ3VyYXRpb24iIG1pbk9jY3Vycz0iMCIgbmlsbGFi"
"bGU9InRydWUiIC8+DQogICAgICAgIDwveHM6c2VxdWVuY2U+DQogICAgICA8L3hzOmV4dGVuc2lv"
"bj4NCiAgICA8L3hzOmNvbXBsZXhDb250ZW50Pg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6"
"ZWxlbWVudCBuYW1lPSJBZ2dyZWdhdGVGaWx0ZXJSZXN1bHQiIHR5cGU9InRuczpBZ2dyZWdhdGVG"
"aWx0ZXJSZXN1bHQiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ik1vbml0b3JpbmdQYXJh"
"bWV0ZXJzIj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJDbGll"
"bnRIYW5kbGUiIHR5cGU9InhzOnVuc2lnbmVkSW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8"
"eHM6ZWxlbWVudCBuYW1lPSJTYW1wbGluZ0ludGVydmFsIiB0eXBlPSJ4czpkb3VibGUiIG1pbk9j"
"Y3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkZpbHRlciIgdHlwZT0idWE6RXh0"
"ZW5zaW9uT2JqZWN0IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iUXVldWVTaXplIiB0eXBlPSJ4czp1bnNpZ25lZEludCIgbWluT2NjdXJz"
"PSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRGlzY2FyZE9sZGVzdCIgdHlwZT0ieHM6"
"Ym9vbGVhbiIgbWluT2NjdXJzPSIwIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29t"
"cGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ik1vbml0b3JpbmdQYXJhbWV0ZXJzIiB0eXBl"
"PSJ0bnM6TW9uaXRvcmluZ1BhcmFtZXRlcnMiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9"
"Ik1vbml0b3JlZEl0ZW1DcmVhdGVSZXF1ZXN0Ij4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8"
"eHM6ZWxlbWVudCBuYW1lPSJJdGVtVG9Nb25pdG9yIiB0eXBlPSJ0bnM6UmVhZFZhbHVlSWQiIG1p"
"bk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJN"
"b25pdG9yaW5nTW9kZSIgdHlwZT0idG5zOk1vbml0b3JpbmdNb2RlIiBtaW5PY2N1cnM9IjAiIC8+"
"DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZXF1ZXN0ZWRQYXJhbWV0ZXJzIiB0eXBlPSJ0bnM6"
"TW9uaXRvcmluZ1BhcmFtZXRlcnMiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQog"
"ICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFt"
"ZT0iTW9uaXRvcmVkSXRlbUNyZWF0ZVJlcXVlc3QiIHR5cGU9InRuczpNb25pdG9yZWRJdGVtQ3Jl"
"YXRlUmVxdWVzdCIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTGlzdE9mTW9uaXRvcmVk"
"SXRlbUNyZWF0ZVJlcXVlc3QiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50"
"IG5hbWU9Ik1vbml0b3JlZEl0ZW1DcmVhdGVSZXF1ZXN0IiB0eXBlPSJ0bnM6TW9uaXRvcmVkSXRl"
"bUNyZWF0ZVJlcXVlc3QiIG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIG5pbGxh"
"YmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQog"
"IDx4czplbGVtZW50IG5hbWU9Ikxpc3RPZk1vbml0b3JlZEl0ZW1DcmVhdGVSZXF1ZXN0IiB0eXBl"
"PSJ0bnM6TGlzdE9mTW9uaXRvcmVkSXRlbUNyZWF0ZVJlcXVlc3QiIG5pbGxhYmxlPSJ0cnVlIj48"
"L3hzOmVsZW1lbnQ+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ik1vbml0b3JlZEl0ZW1DcmVh"
"dGVSZXN1bHQiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlN0"
"YXR1c0NvZGUiIHR5cGU9InVhOlN0YXR1c0NvZGUiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4"
"czplbGVtZW50IG5hbWU9Ik1vbml0b3JlZEl0ZW1JZCIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1p"
"bk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJldmlzZWRTYW1wbGluZ0lu"
"dGVydmFsIiB0eXBlPSJ4czpkb3VibGUiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVt"
"ZW50IG5hbWU9IlJldmlzZWRRdWV1ZVNpemUiIHR5cGU9InhzOnVuc2lnbmVkSW50IiBtaW5PY2N1"
"cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJGaWx0ZXJSZXN1bHQiIHR5cGU9InVh"
"OkV4dGVuc2lvbk9iamVjdCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8"
"L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJN"
"b25pdG9yZWRJdGVtQ3JlYXRlUmVzdWx0IiB0eXBlPSJ0bnM6TW9uaXRvcmVkSXRlbUNyZWF0ZVJl"
"c3VsdCIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTGlzdE9mTW9uaXRvcmVkSXRlbUNy"
"ZWF0ZVJlc3VsdCI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0i"
"TW9uaXRvcmVkSXRlbUNyZWF0ZVJlc3VsdCIgdHlwZT0idG5zOk1vbml0b3JlZEl0ZW1DcmVhdGVS"
"ZXN1bHQiIG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIG5pbGxhYmxlPSJ0cnVl"
"IiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVt"
"ZW50IG5hbWU9Ikxpc3RPZk1vbml0b3JlZEl0ZW1DcmVhdGVSZXN1bHQiIHR5cGU9InRuczpMaXN0"
"T2ZNb25pdG9yZWRJdGVtQ3JlYXRlUmVzdWx0IiBuaWxsYWJsZT0idHJ1ZSI+PC94czplbGVtZW50"
"Pg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJDcmVhdGVNb25pdG9yZWRJdGVtc1JlcXVlc3Qi"
"Pg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJlcXVlc3RIZWFk"
"ZXIiIHR5cGU9InRuczpSZXF1ZXN0SGVhZGVyIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVl"
"IiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iU3Vic2NyaXB0aW9uSWQiIHR5cGU9InhzOnVu"
"c2lnbmVkSW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJUaW1l"
"c3RhbXBzVG9SZXR1cm4iIHR5cGU9InRuczpUaW1lc3RhbXBzVG9SZXR1cm4iIG1pbk9jY3Vycz0i"
"MCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ikl0ZW1zVG9DcmVhdGUiIHR5cGU9InRuczpM"
"aXN0T2ZNb25pdG9yZWRJdGVtQ3JlYXRlUmVxdWVzdCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0i"
"dHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6"
"ZWxlbWVudCBuYW1lPSJDcmVhdGVNb25pdG9yZWRJdGVtc1JlcXVlc3QiIHR5cGU9InRuczpDcmVh"
"dGVNb25pdG9yZWRJdGVtc1JlcXVlc3QiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IkNy"
"ZWF0ZU1vbml0b3JlZEl0ZW1zUmVzcG9uc2UiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4"
"czplbGVtZW50IG5hbWU9IlJlc3BvbnNlSGVhZGVyIiB0eXBlPSJ0bnM6UmVzcG9uc2VIZWFkZXIi"
"IG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1l"
"PSJSZXN1bHRzIiB0eXBlPSJ0bnM6TGlzdE9mTW9uaXRvcmVkSXRlbUNyZWF0ZVJlc3VsdCIgbWlu"
"T2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkRp"
"YWdub3N0aWNJbmZvcyIgdHlwZT0idWE6TGlzdE9mRGlhZ25vc3RpY0luZm8iIG1pbk9jY3Vycz0i"
"MCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4"
"VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iQ3JlYXRlTW9uaXRvcmVkSXRlbXNSZXNwb25zZSIg"
"dHlwZT0idG5zOkNyZWF0ZU1vbml0b3JlZEl0ZW1zUmVzcG9uc2UiIC8+DQoNCiAgPHhzOmNvbXBs"
"ZXhUeXBlIG5hbWU9Ik1vbml0b3JlZEl0ZW1Nb2RpZnlSZXF1ZXN0Ij4NCiAgICA8eHM6c2VxdWVu"
"Y2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJNb25pdG9yZWRJdGVtSWQiIHR5cGU9InhzOnVu"
"c2lnbmVkSW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZXF1"
"ZXN0ZWRQYXJhbWV0ZXJzIiB0eXBlPSJ0bnM6TW9uaXRvcmluZ1BhcmFtZXRlcnMiIG1pbk9jY3Vy"
"cz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21w"
"bGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTW9uaXRvcmVkSXRlbU1vZGlmeVJlcXVlc3Qi"
"IHR5cGU9InRuczpNb25pdG9yZWRJdGVtTW9kaWZ5UmVxdWVzdCIgLz4NCg0KICA8eHM6Y29tcGxl"
"eFR5cGUgbmFtZT0iTGlzdE9mTW9uaXRvcmVkSXRlbU1vZGlmeVJlcXVlc3QiPg0KICAgIDx4czpz"
"ZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik1vbml0b3JlZEl0ZW1Nb2RpZnlSZXF1"
"ZXN0IiB0eXBlPSJ0bnM6TW9uaXRvcmVkSXRlbU1vZGlmeVJlcXVlc3QiIG1pbk9jY3Vycz0iMCIg"
"bWF4T2NjdXJzPSJ1bmJvdW5kZWQiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVu"
"Y2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ikxpc3RPZk1vbml0"
"b3JlZEl0ZW1Nb2RpZnlSZXF1ZXN0IiB0eXBlPSJ0bnM6TGlzdE9mTW9uaXRvcmVkSXRlbU1vZGlm"
"eVJlcXVlc3QiIG5pbGxhYmxlPSJ0cnVlIj48L3hzOmVsZW1lbnQ+DQoNCiAgPHhzOmNvbXBsZXhU"
"eXBlIG5hbWU9Ik1vbml0b3JlZEl0ZW1Nb2RpZnlSZXN1bHQiPg0KICAgIDx4czpzZXF1ZW5jZT4N"
"CiAgICAgIDx4czplbGVtZW50IG5hbWU9IlN0YXR1c0NvZGUiIHR5cGU9InVhOlN0YXR1c0NvZGUi"
"IG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJldmlzZWRTYW1wbGlu"
"Z0ludGVydmFsIiB0eXBlPSJ4czpkb3VibGUiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czpl"
"bGVtZW50IG5hbWU9IlJldmlzZWRRdWV1ZVNpemUiIHR5cGU9InhzOnVuc2lnbmVkSW50IiBtaW5P"
"Y2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJGaWx0ZXJSZXN1bHQiIHR5cGU9"
"InVhOkV4dGVuc2lvbk9iamVjdCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAg"
"ICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1l"
"PSJNb25pdG9yZWRJdGVtTW9kaWZ5UmVzdWx0IiB0eXBlPSJ0bnM6TW9uaXRvcmVkSXRlbU1vZGlm"
"eVJlc3VsdCIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTGlzdE9mTW9uaXRvcmVkSXRl"
"bU1vZGlmeVJlc3VsdCI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFt"
"ZT0iTW9uaXRvcmVkSXRlbU1vZGlmeVJlc3VsdCIgdHlwZT0idG5zOk1vbml0b3JlZEl0ZW1Nb2Rp"
"ZnlSZXN1bHQiIG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIG5pbGxhYmxlPSJ0"
"cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czpl"
"bGVtZW50IG5hbWU9Ikxpc3RPZk1vbml0b3JlZEl0ZW1Nb2RpZnlSZXN1bHQiIHR5cGU9InRuczpM"
"aXN0T2ZNb25pdG9yZWRJdGVtTW9kaWZ5UmVzdWx0IiBuaWxsYWJsZT0idHJ1ZSI+PC94czplbGVt"
"ZW50Pg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJNb2RpZnlNb25pdG9yZWRJdGVtc1JlcXVl"
"c3QiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJlcXVlc3RI"
"ZWFkZXIiIHR5cGU9InRuczpSZXF1ZXN0SGVhZGVyIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0"
"cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iU3Vic2NyaXB0aW9uSWQiIHR5cGU9Inhz"
"OnVuc2lnbmVkSW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJU"
"aW1lc3RhbXBzVG9SZXR1cm4iIHR5cGU9InRuczpUaW1lc3RhbXBzVG9SZXR1cm4iIG1pbk9jY3Vy"
"cz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ikl0ZW1zVG9Nb2RpZnkiIHR5cGU9InRu"
"czpMaXN0T2ZNb25pdG9yZWRJdGVtTW9kaWZ5UmVxdWVzdCIgbWluT2NjdXJzPSIwIiBuaWxsYWJs"
"ZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8"
"eHM6ZWxlbWVudCBuYW1lPSJNb2RpZnlNb25pdG9yZWRJdGVtc1JlcXVlc3QiIHR5cGU9InRuczpN"
"b2RpZnlNb25pdG9yZWRJdGVtc1JlcXVlc3QiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9"
"Ik1vZGlmeU1vbml0b3JlZEl0ZW1zUmVzcG9uc2UiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAg"
"IDx4czplbGVtZW50IG5hbWU9IlJlc3BvbnNlSGVhZGVyIiB0eXBlPSJ0bnM6UmVzcG9uc2VIZWFk"
"ZXIiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBu"
"YW1lPSJSZXN1bHRzIiB0eXBlPSJ0bnM6TGlzdE9mTW9uaXRvcmVkSXRlbU1vZGlmeVJlc3VsdCIg"
"bWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9"
"IkRpYWdub3N0aWNJbmZvcyIgdHlwZT0idWE6TGlzdE9mRGlhZ25vc3RpY0luZm8iIG1pbk9jY3Vy"
"cz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21w"
"bGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTW9kaWZ5TW9uaXRvcmVkSXRlbXNSZXNwb25z"
"ZSIgdHlwZT0idG5zOk1vZGlmeU1vbml0b3JlZEl0ZW1zUmVzcG9uc2UiIC8+DQoNCiAgPHhzOmNv"
"bXBsZXhUeXBlIG5hbWU9IlNldE1vbml0b3JpbmdNb2RlUmVxdWVzdCI+DQogICAgPHhzOnNlcXVl"
"bmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVxdWVzdEhlYWRlciIgdHlwZT0idG5zOlJl"
"cXVlc3RIZWFkZXIiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6"
"ZWxlbWVudCBuYW1lPSJTdWJzY3JpcHRpb25JZCIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9j"
"Y3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik1vbml0b3JpbmdNb2RlIiB0eXBl"
"PSJ0bnM6TW9uaXRvcmluZ01vZGUiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50"
"IG5hbWU9Ik1vbml0b3JlZEl0ZW1JZHMiIHR5cGU9InVhOkxpc3RPZlVJbnQzMiIgbWluT2NjdXJz"
"PSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBs"
"ZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJTZXRNb25pdG9yaW5nTW9kZVJlcXVlc3QiIHR5"
"cGU9InRuczpTZXRNb25pdG9yaW5nTW9kZVJlcXVlc3QiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBl"
"IG5hbWU9IlNldE1vbml0b3JpbmdNb2RlUmVzcG9uc2UiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAg"
"ICAgIDx4czplbGVtZW50IG5hbWU9IlJlc3BvbnNlSGVhZGVyIiB0eXBlPSJ0bnM6UmVzcG9uc2VI"
"ZWFkZXIiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVu"
"dCBuYW1lPSJSZXN1bHRzIiB0eXBlPSJ1YTpMaXN0T2ZTdGF0dXNDb2RlIiBtaW5PY2N1cnM9IjAi"
"IG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRGlhZ25vc3RpY0lu"
"Zm9zIiB0eXBlPSJ1YTpMaXN0T2ZEaWFnbm9zdGljSW5mbyIgbWluT2NjdXJzPSIwIiBuaWxsYWJs"
"ZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8"
"eHM6ZWxlbWVudCBuYW1lPSJTZXRNb25pdG9yaW5nTW9kZVJlc3BvbnNlIiB0eXBlPSJ0bnM6U2V0"
"TW9uaXRvcmluZ01vZGVSZXNwb25zZSIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iU2V0"
"VHJpZ2dlcmluZ1JlcXVlc3QiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50"
"IG5hbWU9IlJlcXVlc3RIZWFkZXIiIHR5cGU9InRuczpSZXF1ZXN0SGVhZGVyIiBtaW5PY2N1cnM9"
"IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iU3Vic2NyaXB0"
"aW9uSWQiIHR5cGU9InhzOnVuc2lnbmVkSW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6"
"ZWxlbWVudCBuYW1lPSJUcmlnZ2VyaW5nSXRlbUlkIiB0eXBlPSJ4czp1bnNpZ25lZEludCIgbWlu"
"T2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iTGlua3NUb0FkZCIgdHlwZT0i"
"dWE6TGlzdE9mVUludDMyIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iTGlua3NUb1JlbW92ZSIgdHlwZT0idWE6TGlzdE9mVUludDMyIiBt"
"aW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwv"
"eHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IlNldFRyaWdnZXJpbmdSZXF1ZXN0"
"IiB0eXBlPSJ0bnM6U2V0VHJpZ2dlcmluZ1JlcXVlc3QiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBl"
"IG5hbWU9IlNldFRyaWdnZXJpbmdSZXNwb25zZSI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iUmVzcG9uc2VIZWFkZXIiIHR5cGU9InRuczpSZXNwb25zZUhlYWRl"
"ciIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5h"
"bWU9IkFkZFJlc3VsdHMiIHR5cGU9InVhOkxpc3RPZlN0YXR1c0NvZGUiIG1pbk9jY3Vycz0iMCIg"
"bmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJBZGREaWFnbm9zdGlj"
"SW5mb3MiIHR5cGU9InVhOkxpc3RPZkRpYWdub3N0aWNJbmZvIiBtaW5PY2N1cnM9IjAiIG5pbGxh"
"YmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVtb3ZlUmVzdWx0cyIgdHlw"
"ZT0idWE6TGlzdE9mU3RhdHVzQ29kZSIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4N"
"CiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJlbW92ZURpYWdub3N0aWNJbmZvcyIgdHlwZT0idWE6"
"TGlzdE9mRGlhZ25vc3RpY0luZm8iIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQog"
"ICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFt"
"ZT0iU2V0VHJpZ2dlcmluZ1Jlc3BvbnNlIiB0eXBlPSJ0bnM6U2V0VHJpZ2dlcmluZ1Jlc3BvbnNl"
"IiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJEZWxldGVNb25pdG9yZWRJdGVtc1JlcXVl"
"c3QiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJlcXVlc3RI"
"ZWFkZXIiIHR5cGU9InRuczpSZXF1ZXN0SGVhZGVyIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0"
"cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iU3Vic2NyaXB0aW9uSWQiIHR5cGU9Inhz"
"OnVuc2lnbmVkSW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJN"
"b25pdG9yZWRJdGVtSWRzIiB0eXBlPSJ1YTpMaXN0T2ZVSW50MzIiIG1pbk9jY3Vycz0iMCIgbmls"
"bGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4N"
"CiAgPHhzOmVsZW1lbnQgbmFtZT0iRGVsZXRlTW9uaXRvcmVkSXRlbXNSZXF1ZXN0IiB0eXBlPSJ0"
"bnM6RGVsZXRlTW9uaXRvcmVkSXRlbXNSZXF1ZXN0IiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBu"
"YW1lPSJEZWxldGVNb25pdG9yZWRJdGVtc1Jlc3BvbnNlIj4NCiAgICA8eHM6c2VxdWVuY2U+DQog"
"ICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZXNwb25zZUhlYWRlciIgdHlwZT0idG5zOlJlc3BvbnNl"
"SGVhZGVyIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1l"
"bnQgbmFtZT0iUmVzdWx0cyIgdHlwZT0idWE6TGlzdE9mU3RhdHVzQ29kZSIgbWluT2NjdXJzPSIw"
"IiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkRpYWdub3N0aWNJ"
"bmZvcyIgdHlwZT0idWE6TGlzdE9mRGlhZ25vc3RpY0luZm8iIG1pbk9jY3Vycz0iMCIgbmlsbGFi"
"bGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAg"
"PHhzOmVsZW1lbnQgbmFtZT0iRGVsZXRlTW9uaXRvcmVkSXRlbXNSZXNwb25zZSIgdHlwZT0idG5z"
"OkRlbGV0ZU1vbml0b3JlZEl0ZW1zUmVzcG9uc2UiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5h"
"bWU9IkNyZWF0ZVN1YnNjcmlwdGlvblJlcXVlc3QiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAg"
"IDx4czplbGVtZW50IG5hbWU9IlJlcXVlc3RIZWFkZXIiIHR5cGU9InRuczpSZXF1ZXN0SGVhZGVy"
"IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFt"
"ZT0iUmVxdWVzdGVkUHVibGlzaGluZ0ludGVydmFsIiB0eXBlPSJ4czpkb3VibGUiIG1pbk9jY3Vy"
"cz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJlcXVlc3RlZExpZmV0aW1lQ291bnQi"
"IHR5cGU9InhzOnVuc2lnbmVkSW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVu"
"dCBuYW1lPSJSZXF1ZXN0ZWRNYXhLZWVwQWxpdmVDb3VudCIgdHlwZT0ieHM6dW5zaWduZWRJbnQi"
"IG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik1heE5vdGlmaWNhdGlv"
"bnNQZXJQdWJsaXNoIiB0eXBlPSJ4czp1bnNpZ25lZEludCIgbWluT2NjdXJzPSIwIiAvPg0KICAg"
"ICAgPHhzOmVsZW1lbnQgbmFtZT0iUHVibGlzaGluZ0VuYWJsZWQiIHR5cGU9InhzOmJvb2xlYW4i"
"IG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlByaW9yaXR5IiB0eXBl"
"PSJ4czp1bnNpZ25lZEJ5dGUiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0K"
"ICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJDcmVhdGVTdWJzY3JpcHRp"
"b25SZXF1ZXN0IiB0eXBlPSJ0bnM6Q3JlYXRlU3Vic2NyaXB0aW9uUmVxdWVzdCIgLz4NCg0KICA8"
"eHM6Y29tcGxleFR5cGUgbmFtZT0iQ3JlYXRlU3Vic2NyaXB0aW9uUmVzcG9uc2UiPg0KICAgIDx4"
"czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJlc3BvbnNlSGVhZGVyIiB0eXBl"
"PSJ0bnM6UmVzcG9uc2VIZWFkZXIiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQog"
"ICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTdWJzY3JpcHRpb25JZCIgdHlwZT0ieHM6dW5zaWduZWRJ"
"bnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJldmlzZWRQdWJs"
"aXNoaW5nSW50ZXJ2YWwiIHR5cGU9InhzOmRvdWJsZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iUmV2aXNlZExpZmV0aW1lQ291bnQiIHR5cGU9InhzOnVuc2lnbmVk"
"SW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZXZpc2VkTWF4"
"S2VlcEFsaXZlQ291bnQiIHR5cGU9InhzOnVuc2lnbmVkSW50IiBtaW5PY2N1cnM9IjAiIC8+DQog"
"ICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFt"
"ZT0iQ3JlYXRlU3Vic2NyaXB0aW9uUmVzcG9uc2UiIHR5cGU9InRuczpDcmVhdGVTdWJzY3JpcHRp"
"b25SZXNwb25zZSIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTW9kaWZ5U3Vic2NyaXB0"
"aW9uUmVxdWVzdCI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0i"
"UmVxdWVzdEhlYWRlciIgdHlwZT0idG5zOlJlcXVlc3RIZWFkZXIiIG1pbk9jY3Vycz0iMCIgbmls"
"bGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTdWJzY3JpcHRpb25JZCIg"
"dHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50"
"IG5hbWU9IlJlcXVlc3RlZFB1Ymxpc2hpbmdJbnRlcnZhbCIgdHlwZT0ieHM6ZG91YmxlIiBtaW5P"
"Y2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZXF1ZXN0ZWRMaWZldGltZUNv"
"dW50IiB0eXBlPSJ4czp1bnNpZ25lZEludCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVs"
"ZW1lbnQgbmFtZT0iUmVxdWVzdGVkTWF4S2VlcEFsaXZlQ291bnQiIHR5cGU9InhzOnVuc2lnbmVk"
"SW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJNYXhOb3RpZmlj"
"YXRpb25zUGVyUHVibGlzaCIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4N"
"CiAgICAgIDx4czplbGVtZW50IG5hbWU9IlByaW9yaXR5IiB0eXBlPSJ4czp1bnNpZ25lZEJ5dGUi"
"IG1pbk9jY3Vycz0iMCIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBl"
"Pg0KICA8eHM6ZWxlbWVudCBuYW1lPSJNb2RpZnlTdWJzY3JpcHRpb25SZXF1ZXN0IiB0eXBlPSJ0"
"bnM6TW9kaWZ5U3Vic2NyaXB0aW9uUmVxdWVzdCIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFt"
"ZT0iTW9kaWZ5U3Vic2NyaXB0aW9uUmVzcG9uc2UiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAg"
"IDx4czplbGVtZW50IG5hbWU9IlJlc3BvbnNlSGVhZGVyIiB0eXBlPSJ0bnM6UmVzcG9uc2VIZWFk"
"ZXIiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBu"
"YW1lPSJSZXZpc2VkUHVibGlzaGluZ0ludGVydmFsIiB0eXBlPSJ4czpkb3VibGUiIG1pbk9jY3Vy"
"cz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJldmlzZWRMaWZldGltZUNvdW50IiB0"
"eXBlPSJ4czp1bnNpZ25lZEludCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQg"
"bmFtZT0iUmV2aXNlZE1heEtlZXBBbGl2ZUNvdW50IiB0eXBlPSJ4czp1bnNpZ25lZEludCIgbWlu"
"T2NjdXJzPSIwIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQog"
"IDx4czplbGVtZW50IG5hbWU9Ik1vZGlmeVN1YnNjcmlwdGlvblJlc3BvbnNlIiB0eXBlPSJ0bnM6"
"TW9kaWZ5U3Vic2NyaXB0aW9uUmVzcG9uc2UiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9"
"IlNldFB1Ymxpc2hpbmdNb2RlUmVxdWVzdCI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iUmVxdWVzdEhlYWRlciIgdHlwZT0idG5zOlJlcXVlc3RIZWFkZXIiIG1p"
"bk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJQ"
"dWJsaXNoaW5nRW5hYmxlZCIgdHlwZT0ieHM6Ym9vbGVhbiIgbWluT2NjdXJzPSIwIiAvPg0KICAg"
"ICAgPHhzOmVsZW1lbnQgbmFtZT0iU3Vic2NyaXB0aW9uSWRzIiB0eXBlPSJ1YTpMaXN0T2ZVSW50"
"MzIiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4N"
"CiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iU2V0UHVibGlzaGluZ01v"
"ZGVSZXF1ZXN0IiB0eXBlPSJ0bnM6U2V0UHVibGlzaGluZ01vZGVSZXF1ZXN0IiAvPg0KDQogIDx4"
"czpjb21wbGV4VHlwZSBuYW1lPSJTZXRQdWJsaXNoaW5nTW9kZVJlc3BvbnNlIj4NCiAgICA8eHM6"
"c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZXNwb25zZUhlYWRlciIgdHlwZT0i"
"dG5zOlJlc3BvbnNlSGVhZGVyIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAg"
"ICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVzdWx0cyIgdHlwZT0idWE6TGlzdE9mU3RhdHVzQ29kZSIg"
"bWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9"
"IkRpYWdub3N0aWNJbmZvcyIgdHlwZT0idWE6TGlzdE9mRGlhZ25vc3RpY0luZm8iIG1pbk9jY3Vy"
"cz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21w"
"bGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iU2V0UHVibGlzaGluZ01vZGVSZXNwb25zZSIg"
"dHlwZT0idG5zOlNldFB1Ymxpc2hpbmdNb2RlUmVzcG9uc2UiIC8+DQoNCiAgPHhzOmNvbXBsZXhU"
"eXBlIG5hbWU9Ik5vdGlmaWNhdGlvbk1lc3NhZ2UiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAg"
"IDx4czplbGVtZW50IG5hbWU9IlNlcXVlbmNlTnVtYmVyIiB0eXBlPSJ4czp1bnNpZ25lZEludCIg"
"bWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUHVibGlzaFRpbWUiIHR5"
"cGU9InhzOmRhdGVUaW1lIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1l"
"PSJOb3RpZmljYXRpb25EYXRhIiB0eXBlPSJ1YTpMaXN0T2ZFeHRlbnNpb25PYmplY3QiIG1pbk9j"
"Y3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpj"
"b21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTm90aWZpY2F0aW9uTWVzc2FnZSIgdHlw"
"ZT0idG5zOk5vdGlmaWNhdGlvbk1lc3NhZ2UiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9"
"Ik5vdGlmaWNhdGlvbkRhdGEiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICA8L3hzOnNlcXVlbmNl"
"Pg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJOb3RpZmljYXRpb25E"
"YXRhIiB0eXBlPSJ0bnM6Tm90aWZpY2F0aW9uRGF0YSIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUg"
"bmFtZT0iRGF0YUNoYW5nZU5vdGlmaWNhdGlvbiI+DQogICAgPHhzOmNvbXBsZXhDb250ZW50IG1p"
"eGVkPSJmYWxzZSI+DQogICAgICA8eHM6ZXh0ZW5zaW9uIGJhc2U9InRuczpOb3RpZmljYXRpb25E"
"YXRhIj4NCiAgICAgICAgPHhzOnNlcXVlbmNlPg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9"
"Ik1vbml0b3JlZEl0ZW1zIiB0eXBlPSJ0bnM6TGlzdE9mTW9uaXRvcmVkSXRlbU5vdGlmaWNhdGlv"
"biIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgICAgICA8eHM6ZWxlbWVu"
"dCBuYW1lPSJEaWFnbm9zdGljSW5mb3MiIHR5cGU9InVhOkxpc3RPZkRpYWdub3N0aWNJbmZvIiBt"
"aW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgICA8L3hzOnNlcXVlbmNlPg0K"
"ICAgICAgPC94czpleHRlbnNpb24+DQogICAgPC94czpjb21wbGV4Q29udGVudD4NCiAgPC94czpj"
"b21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iRGF0YUNoYW5nZU5vdGlmaWNhdGlvbiIg"
"dHlwZT0idG5zOkRhdGFDaGFuZ2VOb3RpZmljYXRpb24iIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBl"
"IG5hbWU9Ik1vbml0b3JlZEl0ZW1Ob3RpZmljYXRpb24iPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAg"
"ICAgIDx4czplbGVtZW50IG5hbWU9IkNsaWVudEhhbmRsZSIgdHlwZT0ieHM6dW5zaWduZWRJbnQi"
"IG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlZhbHVlIiB0eXBlPSJ1"
"YTpEYXRhVmFsdWUiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpz"
"ZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTW9uaXRv"
"cmVkSXRlbU5vdGlmaWNhdGlvbiIgdHlwZT0idG5zOk1vbml0b3JlZEl0ZW1Ob3RpZmljYXRpb24i"
"IC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxpc3RPZk1vbml0b3JlZEl0ZW1Ob3RpZmlj"
"YXRpb24iPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik1vbml0"
"b3JlZEl0ZW1Ob3RpZmljYXRpb24iIHR5cGU9InRuczpNb25pdG9yZWRJdGVtTm90aWZpY2F0aW9u"
"IiBtaW5PY2N1cnM9IjAiIG1heE9jY3Vycz0idW5ib3VuZGVkIiBuaWxsYWJsZT0idHJ1ZSIgLz4N"
"CiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBu"
"YW1lPSJMaXN0T2ZNb25pdG9yZWRJdGVtTm90aWZpY2F0aW9uIiB0eXBlPSJ0bnM6TGlzdE9mTW9u"
"aXRvcmVkSXRlbU5vdGlmaWNhdGlvbiIgbmlsbGFibGU9InRydWUiPjwveHM6ZWxlbWVudD4NCg0K"
"ICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iRXZlbnROb3RpZmljYXRpb25MaXN0Ij4NCiAgICA8eHM6"
"Y29tcGxleENvbnRlbnQgbWl4ZWQ9ImZhbHNlIj4NCiAgICAgIDx4czpleHRlbnNpb24gYmFzZT0i"
"dG5zOk5vdGlmaWNhdGlvbkRhdGEiPg0KICAgICAgICA8eHM6c2VxdWVuY2U+DQogICAgICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iRXZlbnRzIiB0eXBlPSJ0bnM6TGlzdE9mRXZlbnRGaWVsZExpc3Qi"
"IG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICAgIDwveHM6c2VxdWVuY2U+"
"DQogICAgICA8L3hzOmV4dGVuc2lvbj4NCiAgICA8L3hzOmNvbXBsZXhDb250ZW50Pg0KICA8L3hz"
"OmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJFdmVudE5vdGlmaWNhdGlvbkxpc3Qi"
"IHR5cGU9InRuczpFdmVudE5vdGlmaWNhdGlvbkxpc3QiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBl"
"IG5hbWU9IkV2ZW50RmllbGRMaXN0Ij4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxl"
"bWVudCBuYW1lPSJDbGllbnRIYW5kbGUiIHR5cGU9InhzOnVuc2lnbmVkSW50IiBtaW5PY2N1cnM9"
"IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJFdmVudEZpZWxkcyIgdHlwZT0idWE6TGlz"
"dE9mVmFyaWFudCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNl"
"cXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJFdmVudEZp"
"ZWxkTGlzdCIgdHlwZT0idG5zOkV2ZW50RmllbGRMaXN0IiAvPg0KDQogIDx4czpjb21wbGV4VHlw"
"ZSBuYW1lPSJMaXN0T2ZFdmVudEZpZWxkTGlzdCI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iRXZlbnRGaWVsZExpc3QiIHR5cGU9InRuczpFdmVudEZpZWxkTGlz"
"dCIgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRlZCIgbmlsbGFibGU9InRydWUiIC8+"
"DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQg"
"bmFtZT0iTGlzdE9mRXZlbnRGaWVsZExpc3QiIHR5cGU9InRuczpMaXN0T2ZFdmVudEZpZWxkTGlz"
"dCIgbmlsbGFibGU9InRydWUiPjwveHM6ZWxlbWVudD4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFt"
"ZT0iSGlzdG9yeUV2ZW50RmllbGRMaXN0Ij4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6"
"ZWxlbWVudCBuYW1lPSJFdmVudEZpZWxkcyIgdHlwZT0idWE6TGlzdE9mVmFyaWFudCIgbWluT2Nj"
"dXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNv"
"bXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJIaXN0b3J5RXZlbnRGaWVsZExpc3QiIHR5"
"cGU9InRuczpIaXN0b3J5RXZlbnRGaWVsZExpc3QiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5h"
"bWU9Ikxpc3RPZkhpc3RvcnlFdmVudEZpZWxkTGlzdCI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAg"
"ICAgPHhzOmVsZW1lbnQgbmFtZT0iSGlzdG9yeUV2ZW50RmllbGRMaXN0IiB0eXBlPSJ0bnM6SGlz"
"dG9yeUV2ZW50RmllbGRMaXN0IiBtaW5PY2N1cnM9IjAiIG1heE9jY3Vycz0idW5ib3VuZGVkIiBu"
"aWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBl"
"Pg0KICA8eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZIaXN0b3J5RXZlbnRGaWVsZExpc3QiIHR5cGU9"
"InRuczpMaXN0T2ZIaXN0b3J5RXZlbnRGaWVsZExpc3QiIG5pbGxhYmxlPSJ0cnVlIj48L3hzOmVs"
"ZW1lbnQ+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IlN0YXR1c0NoYW5nZU5vdGlmaWNhdGlv"
"biI+DQogICAgPHhzOmNvbXBsZXhDb250ZW50IG1peGVkPSJmYWxzZSI+DQogICAgICA8eHM6ZXh0"
"ZW5zaW9uIGJhc2U9InRuczpOb3RpZmljYXRpb25EYXRhIj4NCiAgICAgICAgPHhzOnNlcXVlbmNl"
"Pg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IlN0YXR1cyIgdHlwZT0idWE6U3RhdHVzQ29k"
"ZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IkRpYWdub3N0"
"aWNJbmZvIiB0eXBlPSJ1YTpEaWFnbm9zdGljSW5mbyIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0i"
"dHJ1ZSIgLz4NCiAgICAgICAgPC94czpzZXF1ZW5jZT4NCiAgICAgIDwveHM6ZXh0ZW5zaW9uPg0K"
"ICAgIDwveHM6Y29tcGxleENvbnRlbnQ+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVt"
"ZW50IG5hbWU9IlN0YXR1c0NoYW5nZU5vdGlmaWNhdGlvbiIgdHlwZT0idG5zOlN0YXR1c0NoYW5n"
"ZU5vdGlmaWNhdGlvbiIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iU3Vic2NyaXB0aW9u"
"QWNrbm93bGVkZ2VtZW50Ij4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBu"
"YW1lPSJTdWJzY3JpcHRpb25JZCIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIg"
"Lz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlNlcXVlbmNlTnVtYmVyIiB0eXBlPSJ4czp1bnNp"
"Z25lZEludCIgbWluT2NjdXJzPSIwIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29t"
"cGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IlN1YnNjcmlwdGlvbkFja25vd2xlZGdlbWVu"
"dCIgdHlwZT0idG5zOlN1YnNjcmlwdGlvbkFja25vd2xlZGdlbWVudCIgLz4NCg0KICA8eHM6Y29t"
"cGxleFR5cGUgbmFtZT0iTGlzdE9mU3Vic2NyaXB0aW9uQWNrbm93bGVkZ2VtZW50Ij4NCiAgICA8"
"eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTdWJzY3JpcHRpb25BY2tub3ds"
"ZWRnZW1lbnQiIHR5cGU9InRuczpTdWJzY3JpcHRpb25BY2tub3dsZWRnZW1lbnQiIG1pbk9jY3Vy"
"cz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6"
"c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ikxpc3RP"
"ZlN1YnNjcmlwdGlvbkFja25vd2xlZGdlbWVudCIgdHlwZT0idG5zOkxpc3RPZlN1YnNjcmlwdGlv"
"bkFja25vd2xlZGdlbWVudCIgbmlsbGFibGU9InRydWUiPjwveHM6ZWxlbWVudD4NCg0KICA8eHM6"
"Y29tcGxleFR5cGUgbmFtZT0iUHVibGlzaFJlcXVlc3QiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAg"
"ICAgIDx4czplbGVtZW50IG5hbWU9IlJlcXVlc3RIZWFkZXIiIHR5cGU9InRuczpSZXF1ZXN0SGVh"
"ZGVyIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQg"
"bmFtZT0iU3Vic2NyaXB0aW9uQWNrbm93bGVkZ2VtZW50cyIgdHlwZT0idG5zOkxpc3RPZlN1YnNj"
"cmlwdGlvbkFja25vd2xlZGdlbWVudCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4N"
"CiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBu"
"YW1lPSJQdWJsaXNoUmVxdWVzdCIgdHlwZT0idG5zOlB1Ymxpc2hSZXF1ZXN0IiAvPg0KDQogIDx4"
"czpjb21wbGV4VHlwZSBuYW1lPSJQdWJsaXNoUmVzcG9uc2UiPg0KICAgIDx4czpzZXF1ZW5jZT4N"
"CiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJlc3BvbnNlSGVhZGVyIiB0eXBlPSJ0bnM6UmVzcG9u"
"c2VIZWFkZXIiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxl"
"bWVudCBuYW1lPSJTdWJzY3JpcHRpb25JZCIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vy"
"cz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkF2YWlsYWJsZVNlcXVlbmNlTnVtYmVy"
"cyIgdHlwZT0idWE6TGlzdE9mVUludDMyIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAv"
"Pg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iTW9yZU5vdGlmaWNhdGlvbnMiIHR5cGU9InhzOmJv"
"b2xlYW4iIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik5vdGlmaWNh"
"dGlvbk1lc3NhZ2UiIHR5cGU9InRuczpOb3RpZmljYXRpb25NZXNzYWdlIiBtaW5PY2N1cnM9IjAi"
"IG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVzdWx0cyIgdHlw"
"ZT0idWE6TGlzdE9mU3RhdHVzQ29kZSIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4N"
"CiAgICAgIDx4czplbGVtZW50IG5hbWU9IkRpYWdub3N0aWNJbmZvcyIgdHlwZT0idWE6TGlzdE9m"
"RGlhZ25vc3RpY0luZm8iIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94"
"czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iUHVi"
"bGlzaFJlc3BvbnNlIiB0eXBlPSJ0bnM6UHVibGlzaFJlc3BvbnNlIiAvPg0KDQogIDx4czpjb21w"
"bGV4VHlwZSBuYW1lPSJSZXB1Ymxpc2hSZXF1ZXN0Ij4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAg"
"ICA8eHM6ZWxlbWVudCBuYW1lPSJSZXF1ZXN0SGVhZGVyIiB0eXBlPSJ0bnM6UmVxdWVzdEhlYWRl"
"ciIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5h"
"bWU9IlN1YnNjcmlwdGlvbklkIiB0eXBlPSJ4czp1bnNpZ25lZEludCIgbWluT2NjdXJzPSIwIiAv"
"Pg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmV0cmFuc21pdFNlcXVlbmNlTnVtYmVyIiB0eXBl"
"PSJ4czp1bnNpZ25lZEludCIgbWluT2NjdXJzPSIwIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQog"
"IDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IlJlcHVibGlzaFJlcXVlc3Qi"
"IHR5cGU9InRuczpSZXB1Ymxpc2hSZXF1ZXN0IiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1l"
"PSJSZXB1Ymxpc2hSZXNwb25zZSI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1l"
"bnQgbmFtZT0iUmVzcG9uc2VIZWFkZXIiIHR5cGU9InRuczpSZXNwb25zZUhlYWRlciIgbWluT2Nj"
"dXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik5vdGlm"
"aWNhdGlvbk1lc3NhZ2UiIHR5cGU9InRuczpOb3RpZmljYXRpb25NZXNzYWdlIiBtaW5PY2N1cnM9"
"IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxl"
"eFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IlJlcHVibGlzaFJlc3BvbnNlIiB0eXBlPSJ0bnM6"
"UmVwdWJsaXNoUmVzcG9uc2UiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IlRyYW5zZmVy"
"UmVzdWx0Ij4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTdGF0"
"dXNDb2RlIiB0eXBlPSJ1YTpTdGF0dXNDb2RlIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6"
"ZWxlbWVudCBuYW1lPSJBdmFpbGFibGVTZXF1ZW5jZU51bWJlcnMiIHR5cGU9InVhOkxpc3RPZlVJ"
"bnQzMiIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNl"
"Pg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJUcmFuc2ZlclJlc3Vs"
"dCIgdHlwZT0idG5zOlRyYW5zZmVyUmVzdWx0IiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1l"
"PSJMaXN0T2ZUcmFuc2ZlclJlc3VsdCI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVs"
"ZW1lbnQgbmFtZT0iVHJhbnNmZXJSZXN1bHQiIHR5cGU9InRuczpUcmFuc2ZlclJlc3VsdCIgbWlu"
"T2NjdXJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRlZCIgbmlsbGFibGU9InRydWUiIC8+DQogICAg"
"PC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0i"
"TGlzdE9mVHJhbnNmZXJSZXN1bHQiIHR5cGU9InRuczpMaXN0T2ZUcmFuc2ZlclJlc3VsdCIgbmls"
"bGFibGU9InRydWUiPjwveHM6ZWxlbWVudD4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iVHJh"
"bnNmZXJTdWJzY3JpcHRpb25zUmVxdWVzdCI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iUmVxdWVzdEhlYWRlciIgdHlwZT0idG5zOlJlcXVlc3RIZWFkZXIiIG1p"
"bk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJT"
"dWJzY3JpcHRpb25JZHMiIHR5cGU9InVhOkxpc3RPZlVJbnQzMiIgbWluT2NjdXJzPSIwIiBuaWxs"
"YWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlNlbmRJbml0aWFsVmFsdWVz"
"IiB0eXBlPSJ4czpib29sZWFuIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgPC94czpzZXF1ZW5jZT4N"
"CiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iVHJhbnNmZXJTdWJzY3Jp"
"cHRpb25zUmVxdWVzdCIgdHlwZT0idG5zOlRyYW5zZmVyU3Vic2NyaXB0aW9uc1JlcXVlc3QiIC8+"
"DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IlRyYW5zZmVyU3Vic2NyaXB0aW9uc1Jlc3BvbnNl"
"Ij4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZXNwb25zZUhl"
"YWRlciIgdHlwZT0idG5zOlJlc3BvbnNlSGVhZGVyIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0"
"cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVzdWx0cyIgdHlwZT0idG5zOkxpc3RP"
"ZlRyYW5zZmVyUmVzdWx0IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iRGlhZ25vc3RpY0luZm9zIiB0eXBlPSJ1YTpMaXN0T2ZEaWFnbm9z"
"dGljSW5mbyIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVl"
"bmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJUcmFuc2ZlclN1"
"YnNjcmlwdGlvbnNSZXNwb25zZSIgdHlwZT0idG5zOlRyYW5zZmVyU3Vic2NyaXB0aW9uc1Jlc3Bv"
"bnNlIiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJEZWxldGVTdWJzY3JpcHRpb25zUmVx"
"dWVzdCI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVxdWVz"
"dEhlYWRlciIgdHlwZT0idG5zOlJlcXVlc3RIZWFkZXIiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9"
"InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTdWJzY3JpcHRpb25JZHMiIHR5cGU9"
"InVhOkxpc3RPZlVJbnQzMiIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8"
"L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJE"
"ZWxldGVTdWJzY3JpcHRpb25zUmVxdWVzdCIgdHlwZT0idG5zOkRlbGV0ZVN1YnNjcmlwdGlvbnNS"
"ZXF1ZXN0IiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJEZWxldGVTdWJzY3JpcHRpb25z"
"UmVzcG9uc2UiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJl"
"c3BvbnNlSGVhZGVyIiB0eXBlPSJ0bnM6UmVzcG9uc2VIZWFkZXIiIG1pbk9jY3Vycz0iMCIgbmls"
"bGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZXN1bHRzIiB0eXBlPSJ1"
"YTpMaXN0T2ZTdGF0dXNDb2RlIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAg"
"ICAgPHhzOmVsZW1lbnQgbmFtZT0iRGlhZ25vc3RpY0luZm9zIiB0eXBlPSJ1YTpMaXN0T2ZEaWFn"
"bm9zdGljSW5mbyIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNl"
"cXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJEZWxldGVT"
"dWJzY3JpcHRpb25zUmVzcG9uc2UiIHR5cGU9InRuczpEZWxldGVTdWJzY3JpcHRpb25zUmVzcG9u"
"c2UiIC8+DQoNCiAgPHhzOnNpbXBsZVR5cGUgIG5hbWU9IkVudW1lcmF0ZWRUZXN0VHlwZSI+DQog"
"ICAgPHhzOmFubm90YXRpb24+DQogICAgICA8eHM6ZG9jdW1lbnRhdGlvbj5BIHNpbXBsZSBlbnVt"
"ZXJhdGVkIHR5cGUgdXNlZCBmb3IgdGVzdGluZy48L3hzOmRvY3VtZW50YXRpb24+DQogICAgPC94"
"czphbm5vdGF0aW9uPg0KICAgIDx4czpyZXN0cmljdGlvbiBiYXNlPSJ4czpzdHJpbmciPg0KICAg"
"ICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJSZWRfMSIgLz4NCiAgICAgIDx4czplbnVtZXJhdGlv"
"biB2YWx1ZT0iWWVsbG93XzQiIC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IkdyZWVu"
"XzUiIC8+DQogICAgPC94czpyZXN0cmljdGlvbj4NCiAgPC94czpzaW1wbGVUeXBlPg0KICA8eHM6"
"ZWxlbWVudCBuYW1lPSJFbnVtZXJhdGVkVGVzdFR5cGUiIHR5cGU9InRuczpFbnVtZXJhdGVkVGVz"
"dFR5cGUiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxpc3RPZkVudW1lcmF0ZWRUZXN0"
"VHlwZSI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRW51bWVy"
"YXRlZFRlc3RUeXBlIiB0eXBlPSJ0bnM6RW51bWVyYXRlZFRlc3RUeXBlIiBtaW5PY2N1cnM9IjAi"
"IG1heE9jY3Vycz0idW5ib3VuZGVkIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29t"
"cGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ikxpc3RPZkVudW1lcmF0ZWRUZXN0VHlwZSIg"
"dHlwZT0idG5zOkxpc3RPZkVudW1lcmF0ZWRUZXN0VHlwZSIgbmlsbGFibGU9InRydWUiPjwveHM6"
"ZWxlbWVudD4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iU2NhbGFyVGVzdFR5cGUiPg0KICAg"
"IDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmRvY3VtZW50YXRpb24+QSBjb21wbGV4IHR5cGUg"
"Y29udGFpbmluZyBhbGwgcG9zc2libGUgc2NhbGFyIHR5cGVzIHVzZWQgZm9yIHRlc3RpbmcuPC94"
"czpkb2N1bWVudGF0aW9uPg0KICAgIDwveHM6YW5ub3RhdGlvbj4NCiAgICA8eHM6c2VxdWVuY2U+"
"DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJCb29sZWFuIiB0eXBlPSJ4czpib29sZWFuIiBtaW5P"
"Y2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTQnl0ZSIgdHlwZT0ieHM6Ynl0"
"ZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iQnl0ZSIgdHlwZT0i"
"eHM6dW5zaWduZWRCeXRlIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1l"
"PSJJbnQxNiIgdHlwZT0ieHM6c2hvcnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVt"
"ZW50IG5hbWU9IlVJbnQxNiIgdHlwZT0ieHM6dW5zaWduZWRTaG9ydCIgbWluT2NjdXJzPSIwIiAv"
"Pg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iSW50MzIiIHR5cGU9InhzOmludCIgbWluT2NjdXJz"
"PSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iVUludDMyIiB0eXBlPSJ4czp1bnNpZ25l"
"ZEludCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iSW50NjQiIHR5"
"cGU9InhzOmxvbmciIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlVJ"
"bnQ2NCIgdHlwZT0ieHM6dW5zaWduZWRMb25nIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6"
"ZWxlbWVudCBuYW1lPSJGbG9hdCIgdHlwZT0ieHM6ZmxvYXQiIG1pbk9jY3Vycz0iMCIgLz4NCiAg"
"ICAgIDx4czplbGVtZW50IG5hbWU9IkRvdWJsZSIgdHlwZT0ieHM6ZG91YmxlIiBtaW5PY2N1cnM9"
"IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTdHJpbmciIHR5cGU9InhzOnN0cmluZyIg"
"bWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9"
"IkRhdGVUaW1lIiB0eXBlPSJ4czpkYXRlVGltZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iR3VpZCIgdHlwZT0idWE6R3VpZCIgbWluT2NjdXJzPSIwIiAvPg0KICAg"
"ICAgPHhzOmVsZW1lbnQgbmFtZT0iQnl0ZVN0cmluZyIgdHlwZT0ieHM6YmFzZTY0QmluYXJ5IiBt"
"aW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0i"
"WG1sRWxlbWVudCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSI+DQogICAgICAgIDx4czpj"
"b21wbGV4VHlwZT4NCiAgICAgICAgICA8eHM6c2VxdWVuY2U+DQogICAgICAgICAgICA8eHM6YW55"
"IG1pbk9jY3Vycz0iMCIgcHJvY2Vzc0NvbnRlbnRzPSJsYXgiIC8+DQogICAgICAgICAgPC94czpz"
"ZXF1ZW5jZT4NCiAgICAgICAgPC94czpjb21wbGV4VHlwZT4NCiAgICAgIDwveHM6ZWxlbWVudD4N"
"CiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik5vZGVJZCIgdHlwZT0idWE6Tm9kZUlkIiBtaW5PY2N1"
"cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRXhwYW5k"
"ZWROb2RlSWQiIHR5cGU9InVhOkV4cGFuZGVkTm9kZUlkIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxl"
"PSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iU3RhdHVzQ29kZSIgdHlwZT0idWE6"
"U3RhdHVzQ29kZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRGlh"
"Z25vc3RpY0luZm8iIHR5cGU9InVhOkRpYWdub3N0aWNJbmZvIiBtaW5PY2N1cnM9IjAiIG5pbGxh"
"YmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUXVhbGlmaWVkTmFtZSIgdHlw"
"ZT0idWE6UXVhbGlmaWVkTmFtZSIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAg"
"ICAgIDx4czplbGVtZW50IG5hbWU9IkxvY2FsaXplZFRleHQiIHR5cGU9InVhOkxvY2FsaXplZFRl"
"eHQiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBu"
"YW1lPSJFeHRlbnNpb25PYmplY3QiIHR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCIgbWluT2NjdXJz"
"PSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkRhdGFWYWx1"
"ZSIgdHlwZT0idWE6RGF0YVZhbHVlIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0K"
"ICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRW51bWVyYXRlZFZhbHVlIiB0eXBlPSJ0bnM6RW51bWVy"
"YXRlZFRlc3RUeXBlIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94"
"czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iU2NhbGFyVGVzdFR5cGUiIHR5cGU9"
"InRuczpTY2FsYXJUZXN0VHlwZSIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTGlzdE9m"
"U2NhbGFyVGVzdFR5cGUiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5h"
"bWU9IlNjYWxhclRlc3RUeXBlIiB0eXBlPSJ0bnM6U2NhbGFyVGVzdFR5cGUiIG1pbk9jY3Vycz0i"
"MCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2Vx"
"dWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ikxpc3RPZlNj"
"YWxhclRlc3RUeXBlIiB0eXBlPSJ0bnM6TGlzdE9mU2NhbGFyVGVzdFR5cGUiIG5pbGxhYmxlPSJ0"
"cnVlIj48L3hzOmVsZW1lbnQ+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IkFycmF5VGVzdFR5"
"cGUiPg0KICAgIDx4czphbm5vdGF0aW9uPg0KICAgICAgPHhzOmRvY3VtZW50YXRpb24+QSBjb21w"
"bGV4IHR5cGUgY29udGFpbmluZyBhbGwgcG9zc2libGUgYXJyYXkgdHlwZXMgdXNlZCBmb3IgdGVz"
"dGluZy48L3hzOmRvY3VtZW50YXRpb24+DQogICAgPC94czphbm5vdGF0aW9uPg0KICAgIDx4czpz"
"ZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkJvb2xlYW5zIiB0eXBlPSJ1YTpMaXN0"
"T2ZCb29sZWFuIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVs"
"ZW1lbnQgbmFtZT0iU0J5dGVzIiB0eXBlPSJ1YTpMaXN0T2ZTQnl0ZSIgbWluT2NjdXJzPSIwIiBu"
"aWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkludDE2cyIgdHlwZT0i"
"dWE6TGlzdE9mSW50MTYiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8"
"eHM6ZWxlbWVudCBuYW1lPSJVSW50MTZzIiB0eXBlPSJ1YTpMaXN0T2ZVSW50MTYiIG1pbk9jY3Vy"
"cz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJJbnQzMnMi"
"IHR5cGU9InVhOkxpc3RPZkludDMyIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0K"
"ICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iVUludDMycyIgdHlwZT0idWE6TGlzdE9mVUludDMyIiBt"
"aW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0i"
"SW50NjRzIiB0eXBlPSJ1YTpMaXN0T2ZJbnQ2NCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1"
"ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlVJbnQ2NHMiIHR5cGU9InVhOkxpc3RPZlVJ"
"bnQ2NCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50"
"IG5hbWU9IkZsb2F0cyIgdHlwZT0idWE6TGlzdE9mRmxvYXQiIG1pbk9jY3Vycz0iMCIgbmlsbGFi"
"bGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJEb3VibGVzIiB0eXBlPSJ1YTpM"
"aXN0T2ZEb3VibGUiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6"
"ZWxlbWVudCBuYW1lPSJTdHJpbmdzIiB0eXBlPSJ1YTpMaXN0T2ZTdHJpbmciIG1pbk9jY3Vycz0i"
"MCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJEYXRlVGltZXMi"
"IHR5cGU9InVhOkxpc3RPZkRhdGVUaW1lIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAv"
"Pg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iR3VpZHMiIHR5cGU9InVhOkxpc3RPZkd1aWQiIG1p"
"bk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJC"
"eXRlU3RyaW5ncyIgdHlwZT0idWE6TGlzdE9mQnl0ZVN0cmluZyIgbWluT2NjdXJzPSIwIiBuaWxs"
"YWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlhtbEVsZW1lbnRzIiB0eXBl"
"PSJ1YTpMaXN0T2ZYbWxFbGVtZW50IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0K"
"ICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iTm9kZUlkcyIgdHlwZT0idWE6TGlzdE9mTm9kZUlkIiBt"
"aW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0i"
"RXhwYW5kZWROb2RlSWRzIiB0eXBlPSJ1YTpMaXN0T2ZFeHBhbmRlZE5vZGVJZCIgbWluT2NjdXJz"
"PSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlN0YXR1c0Nv"
"ZGVzIiB0eXBlPSJ1YTpMaXN0T2ZTdGF0dXNDb2RlIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0"
"cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRGlhZ25vc3RpY0luZm9zIiB0eXBlPSJ1"
"YTpMaXN0T2ZEaWFnbm9zdGljSW5mbyIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4N"
"CiAgICAgIDx4czplbGVtZW50IG5hbWU9IlF1YWxpZmllZE5hbWVzIiB0eXBlPSJ1YTpMaXN0T2ZR"
"dWFsaWZpZWROYW1lIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iTG9jYWxpemVkVGV4dHMiIHR5cGU9InVhOkxpc3RPZkxvY2FsaXplZFRl"
"eHQiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBu"
"YW1lPSJFeHRlbnNpb25PYmplY3RzIiB0eXBlPSJ1YTpMaXN0T2ZFeHRlbnNpb25PYmplY3QiIG1p"
"bk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJE"
"YXRhVmFsdWVzIiB0eXBlPSJ1YTpMaXN0T2ZEYXRhVmFsdWUiIG1pbk9jY3Vycz0iMCIgbmlsbGFi"
"bGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJWYXJpYW50cyIgdHlwZT0idWE6"
"TGlzdE9mVmFyaWFudCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4"
"czplbGVtZW50IG5hbWU9IkVudW1lcmF0ZWRWYWx1ZXMiIHR5cGU9InRuczpMaXN0T2ZFbnVtZXJh"
"dGVkVGVzdFR5cGUiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpz"
"ZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iQXJyYXlU"
"ZXN0VHlwZSIgdHlwZT0idG5zOkFycmF5VGVzdFR5cGUiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBl"
"IG5hbWU9Ikxpc3RPZkFycmF5VGVzdFR5cGUiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4"
"czplbGVtZW50IG5hbWU9IkFycmF5VGVzdFR5cGUiIHR5cGU9InRuczpBcnJheVRlc3RUeXBlIiBt"
"aW5PY2N1cnM9IjAiIG1heE9jY3Vycz0idW5ib3VuZGVkIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAg"
"ICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1l"
"PSJMaXN0T2ZBcnJheVRlc3RUeXBlIiB0eXBlPSJ0bnM6TGlzdE9mQXJyYXlUZXN0VHlwZSIgbmls"
"bGFibGU9InRydWUiPjwveHM6ZWxlbWVudD4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iQ29t"
"cG9zaXRlVGVzdFR5cGUiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5h"
"bWU9IkZpZWxkMSIgdHlwZT0idG5zOlNjYWxhclRlc3RUeXBlIiBtaW5PY2N1cnM9IjAiIG5pbGxh"
"YmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRmllbGQyIiB0eXBlPSJ0bnM6"
"QXJyYXlUZXN0VHlwZSIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hz"
"OnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJDb21w"
"b3NpdGVUZXN0VHlwZSIgdHlwZT0idG5zOkNvbXBvc2l0ZVRlc3RUeXBlIiAvPg0KDQogIDx4czpj"
"b21wbGV4VHlwZSBuYW1lPSJUZXN0U3RhY2tSZXF1ZXN0Ij4NCiAgICA8eHM6c2VxdWVuY2U+DQog"
"ICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZXF1ZXN0SGVhZGVyIiB0eXBlPSJ0bnM6UmVxdWVzdEhl"
"YWRlciIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50"
"IG5hbWU9IlRlc3RJZCIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAg"
"ICAgIDx4czplbGVtZW50IG5hbWU9Ikl0ZXJhdGlvbiIgdHlwZT0ieHM6aW50IiBtaW5PY2N1cnM9"
"IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJJbnB1dCIgdHlwZT0idWE6VmFyaWFudCIg"
"bWluT2NjdXJzPSIwIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+"
"DQogIDx4czplbGVtZW50IG5hbWU9IlRlc3RTdGFja1JlcXVlc3QiIHR5cGU9InRuczpUZXN0U3Rh"
"Y2tSZXF1ZXN0IiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJUZXN0U3RhY2tSZXNwb25z"
"ZSI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVzcG9uc2VI"
"ZWFkZXIiIHR5cGU9InRuczpSZXNwb25zZUhlYWRlciIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0i"
"dHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik91dHB1dCIgdHlwZT0idWE6VmFyaWFu"
"dCIgbWluT2NjdXJzPSIwIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5"
"cGU+DQogIDx4czplbGVtZW50IG5hbWU9IlRlc3RTdGFja1Jlc3BvbnNlIiB0eXBlPSJ0bnM6VGVz"
"dFN0YWNrUmVzcG9uc2UiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IlRlc3RTdGFja0V4"
"UmVxdWVzdCI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVx"
"dWVzdEhlYWRlciIgdHlwZT0idG5zOlJlcXVlc3RIZWFkZXIiIG1pbk9jY3Vycz0iMCIgbmlsbGFi"
"bGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJUZXN0SWQiIHR5cGU9InhzOnVu"
"c2lnbmVkSW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJJdGVy"
"YXRpb24iIHR5cGU9InhzOmludCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQg"
"bmFtZT0iSW5wdXQiIHR5cGU9InRuczpDb21wb3NpdGVUZXN0VHlwZSIgbWluT2NjdXJzPSIwIiBu"
"aWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBl"
"Pg0KICA8eHM6ZWxlbWVudCBuYW1lPSJUZXN0U3RhY2tFeFJlcXVlc3QiIHR5cGU9InRuczpUZXN0"
"U3RhY2tFeFJlcXVlc3QiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IlRlc3RTdGFja0V4"
"UmVzcG9uc2UiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJl"
"c3BvbnNlSGVhZGVyIiB0eXBlPSJ0bnM6UmVzcG9uc2VIZWFkZXIiIG1pbk9jY3Vycz0iMCIgbmls"
"bGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJPdXRwdXQiIHR5cGU9InRu"
"czpDb21wb3NpdGVUZXN0VHlwZSIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAg"
"ICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1l"
"PSJUZXN0U3RhY2tFeFJlc3BvbnNlIiB0eXBlPSJ0bnM6VGVzdFN0YWNrRXhSZXNwb25zZSIgLz4N"
"Cg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iQnVpbGRJbmZvIj4NCiAgICA8eHM6c2VxdWVuY2U+"
"DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJQcm9kdWN0VXJpIiB0eXBlPSJ4czpzdHJpbmciIG1p"
"bk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJN"
"YW51ZmFjdHVyZXJOYW1lIiB0eXBlPSJ4czpzdHJpbmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9"
"InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJQcm9kdWN0TmFtZSIgdHlwZT0ieHM6"
"c3RyaW5nIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1l"
"bnQgbmFtZT0iU29mdHdhcmVWZXJzaW9uIiB0eXBlPSJ4czpzdHJpbmciIG1pbk9jY3Vycz0iMCIg"
"bmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJCdWlsZE51bWJlciIg"
"dHlwZT0ieHM6c3RyaW5nIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iQnVpbGREYXRlIiB0eXBlPSJ4czpkYXRlVGltZSIgbWluT2NjdXJz"
"PSIwIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czpl"
"bGVtZW50IG5hbWU9IkJ1aWxkSW5mbyIgdHlwZT0idG5zOkJ1aWxkSW5mbyIgLz4NCg0KICA8eHM6"
"c2ltcGxlVHlwZSAgbmFtZT0iUmVkdW5kYW5jeVN1cHBvcnQiPg0KICAgIDx4czpyZXN0cmljdGlv"
"biBiYXNlPSJ4czpzdHJpbmciPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJOb25lXzAi"
"IC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IkNvbGRfMSIgLz4NCiAgICAgIDx4czpl"
"bnVtZXJhdGlvbiB2YWx1ZT0iV2FybV8yIiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVl"
"PSJIb3RfMyIgLz4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iVHJhbnNwYXJlbnRfNCIg"
"Lz4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iSG90QW5kTWlycm9yZWRfNSIgLz4NCiAg"
"ICA8L3hzOnJlc3RyaWN0aW9uPg0KICA8L3hzOnNpbXBsZVR5cGU+DQogIDx4czplbGVtZW50IG5h"
"bWU9IlJlZHVuZGFuY3lTdXBwb3J0IiB0eXBlPSJ0bnM6UmVkdW5kYW5jeVN1cHBvcnQiIC8+DQoN"
"CiAgPHhzOnNpbXBsZVR5cGUgIG5hbWU9IlNlcnZlclN0YXRlIj4NCiAgICA8eHM6cmVzdHJpY3Rp"
"b24gYmFzZT0ieHM6c3RyaW5nIj4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iUnVubmlu"
"Z18wIiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJGYWlsZWRfMSIgLz4NCiAgICAg"
"IDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iTm9Db25maWd1cmF0aW9uXzIiIC8+DQogICAgICA8eHM6"
"ZW51bWVyYXRpb24gdmFsdWU9IlN1c3BlbmRlZF8zIiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9u"
"IHZhbHVlPSJTaHV0ZG93bl80IiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJUZXN0"
"XzUiIC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IkNvbW11bmljYXRpb25GYXVsdF82"
"IiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJVbmtub3duXzciIC8+DQogICAgPC94"
"czpyZXN0cmljdGlvbj4NCiAgPC94czpzaW1wbGVUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJT"
"ZXJ2ZXJTdGF0ZSIgdHlwZT0idG5zOlNlcnZlclN0YXRlIiAvPg0KDQogIDx4czpjb21wbGV4VHlw"
"ZSBuYW1lPSJSZWR1bmRhbnRTZXJ2ZXJEYXRhVHlwZSI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAg"
"ICAgPHhzOmVsZW1lbnQgbmFtZT0iU2VydmVySWQiIHR5cGU9InhzOnN0cmluZyIgbWluT2NjdXJz"
"PSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlNlcnZpY2VM"
"ZXZlbCIgdHlwZT0ieHM6dW5zaWduZWRCeXRlIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6"
"ZWxlbWVudCBuYW1lPSJTZXJ2ZXJTdGF0ZSIgdHlwZT0idG5zOlNlcnZlclN0YXRlIiBtaW5PY2N1"
"cnM9IjAiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhz"
"OmVsZW1lbnQgbmFtZT0iUmVkdW5kYW50U2VydmVyRGF0YVR5cGUiIHR5cGU9InRuczpSZWR1bmRh"
"bnRTZXJ2ZXJEYXRhVHlwZSIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTGlzdE9mUmVk"
"dW5kYW50U2VydmVyRGF0YVR5cGUiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVt"
"ZW50IG5hbWU9IlJlZHVuZGFudFNlcnZlckRhdGFUeXBlIiB0eXBlPSJ0bnM6UmVkdW5kYW50U2Vy"
"dmVyRGF0YVR5cGUiIG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIG5pbGxhYmxl"
"PSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4"
"czplbGVtZW50IG5hbWU9Ikxpc3RPZlJlZHVuZGFudFNlcnZlckRhdGFUeXBlIiB0eXBlPSJ0bnM6"
"TGlzdE9mUmVkdW5kYW50U2VydmVyRGF0YVR5cGUiIG5pbGxhYmxlPSJ0cnVlIj48L3hzOmVsZW1l"
"bnQ+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IkVuZHBvaW50VXJsTGlzdERhdGFUeXBlIj4N"
"CiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJFbmRwb2ludFVybExp"
"c3QiIHR5cGU9InVhOkxpc3RPZlN0cmluZyIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIg"
"Lz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVu"
"dCBuYW1lPSJFbmRwb2ludFVybExpc3REYXRhVHlwZSIgdHlwZT0idG5zOkVuZHBvaW50VXJsTGlz"
"dERhdGFUeXBlIiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJMaXN0T2ZFbmRwb2ludFVy"
"bExpc3REYXRhVHlwZSI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFt"
"ZT0iRW5kcG9pbnRVcmxMaXN0RGF0YVR5cGUiIHR5cGU9InRuczpFbmRwb2ludFVybExpc3REYXRh"
"VHlwZSIgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRlZCIgbmlsbGFibGU9InRydWUi"
"IC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1l"
"bnQgbmFtZT0iTGlzdE9mRW5kcG9pbnRVcmxMaXN0RGF0YVR5cGUiIHR5cGU9InRuczpMaXN0T2ZF"
"bmRwb2ludFVybExpc3REYXRhVHlwZSIgbmlsbGFibGU9InRydWUiPjwveHM6ZWxlbWVudD4NCg0K"
"ICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTmV0d29ya0dyb3VwRGF0YVR5cGUiPg0KICAgIDx4czpz"
"ZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlNlcnZlclVyaSIgdHlwZT0ieHM6c3Ry"
"aW5nIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQg"
"bmFtZT0iTmV0d29ya1BhdGhzIiB0eXBlPSJ0bnM6TGlzdE9mRW5kcG9pbnRVcmxMaXN0RGF0YVR5"
"cGUiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4N"
"CiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTmV0d29ya0dyb3VwRGF0"
"YVR5cGUiIHR5cGU9InRuczpOZXR3b3JrR3JvdXBEYXRhVHlwZSIgLz4NCg0KICA8eHM6Y29tcGxl"
"eFR5cGUgbmFtZT0iTGlzdE9mTmV0d29ya0dyb3VwRGF0YVR5cGUiPg0KICAgIDx4czpzZXF1ZW5j"
"ZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik5ldHdvcmtHcm91cERhdGFUeXBlIiB0eXBlPSJ0"
"bnM6TmV0d29ya0dyb3VwRGF0YVR5cGUiIG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5k"
"ZWQiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxl"
"eFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ikxpc3RPZk5ldHdvcmtHcm91cERhdGFUeXBlIiB0"
"eXBlPSJ0bnM6TGlzdE9mTmV0d29ya0dyb3VwRGF0YVR5cGUiIG5pbGxhYmxlPSJ0cnVlIj48L3hz"
"OmVsZW1lbnQ+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IlNhbXBsaW5nSW50ZXJ2YWxEaWFn"
"bm9zdGljc0RhdGFUeXBlIj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBu"
"YW1lPSJTYW1wbGluZ0ludGVydmFsIiB0eXBlPSJ4czpkb3VibGUiIG1pbk9jY3Vycz0iMCIgLz4N"
"CiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik1vbml0b3JlZEl0ZW1Db3VudCIgdHlwZT0ieHM6dW5z"
"aWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik1heE1v"
"bml0b3JlZEl0ZW1Db3VudCIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4N"
"CiAgICAgIDx4czplbGVtZW50IG5hbWU9IkRpc2FibGVkTW9uaXRvcmVkSXRlbUNvdW50IiB0eXBl"
"PSJ4czp1bnNpZ25lZEludCIgbWluT2NjdXJzPSIwIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQog"
"IDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IlNhbXBsaW5nSW50ZXJ2YWxE"
"aWFnbm9zdGljc0RhdGFUeXBlIiB0eXBlPSJ0bnM6U2FtcGxpbmdJbnRlcnZhbERpYWdub3N0aWNz"
"RGF0YVR5cGUiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxpc3RPZlNhbXBsaW5nSW50"
"ZXJ2YWxEaWFnbm9zdGljc0RhdGFUeXBlIj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6"
"ZWxlbWVudCBuYW1lPSJTYW1wbGluZ0ludGVydmFsRGlhZ25vc3RpY3NEYXRhVHlwZSIgdHlwZT0i"
"dG5zOlNhbXBsaW5nSW50ZXJ2YWxEaWFnbm9zdGljc0RhdGFUeXBlIiBtaW5PY2N1cnM9IjAiIG1h"
"eE9jY3Vycz0idW5ib3VuZGVkIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNl"
"Pg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZTYW1wbGlu"
"Z0ludGVydmFsRGlhZ25vc3RpY3NEYXRhVHlwZSIgdHlwZT0idG5zOkxpc3RPZlNhbXBsaW5nSW50"
"ZXJ2YWxEaWFnbm9zdGljc0RhdGFUeXBlIiBuaWxsYWJsZT0idHJ1ZSI+PC94czplbGVtZW50Pg0K"
"DQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJTZXJ2ZXJEaWFnbm9zdGljc1N1bW1hcnlEYXRhVHlw"
"ZSI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iU2VydmVyVmll"
"d0NvdW50IiB0eXBlPSJ4czp1bnNpZ25lZEludCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iQ3VycmVudFNlc3Npb25Db3VudCIgdHlwZT0ieHM6dW5zaWduZWRJbnQi"
"IG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkN1bXVsYXRlZFNlc3Np"
"b25Db3VudCIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4"
"czplbGVtZW50IG5hbWU9IlNlY3VyaXR5UmVqZWN0ZWRTZXNzaW9uQ291bnQiIHR5cGU9InhzOnVu"
"c2lnbmVkSW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJSZWpl"
"Y3RlZFNlc3Npb25Db3VudCIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4N"
"CiAgICAgIDx4czplbGVtZW50IG5hbWU9IlNlc3Npb25UaW1lb3V0Q291bnQiIHR5cGU9InhzOnVu"
"c2lnbmVkSW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTZXNz"
"aW9uQWJvcnRDb3VudCIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAg"
"ICAgIDx4czplbGVtZW50IG5hbWU9IkN1cnJlbnRTdWJzY3JpcHRpb25Db3VudCIgdHlwZT0ieHM6"
"dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkN1"
"bXVsYXRlZFN1YnNjcmlwdGlvbkNvdW50IiB0eXBlPSJ4czp1bnNpZ25lZEludCIgbWluT2NjdXJz"
"PSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUHVibGlzaGluZ0ludGVydmFsQ291bnQi"
"IHR5cGU9InhzOnVuc2lnbmVkSW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVu"
"dCBuYW1lPSJTZWN1cml0eVJlamVjdGVkUmVxdWVzdHNDb3VudCIgdHlwZT0ieHM6dW5zaWduZWRJ"
"bnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJlamVjdGVkUmVx"
"dWVzdHNDb3VudCIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICA8"
"L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJT"
"ZXJ2ZXJEaWFnbm9zdGljc1N1bW1hcnlEYXRhVHlwZSIgdHlwZT0idG5zOlNlcnZlckRpYWdub3N0"
"aWNzU3VtbWFyeURhdGFUeXBlIiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJTZXJ2ZXJT"
"dGF0dXNEYXRhVHlwZSI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFt"
"ZT0iU3RhcnRUaW1lIiB0eXBlPSJ4czpkYXRlVGltZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iQ3VycmVudFRpbWUiIHR5cGU9InhzOmRhdGVUaW1lIiBtaW5PY2N1"
"cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTdGF0ZSIgdHlwZT0idG5zOlNlcnZl"
"clN0YXRlIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJCdWlsZElu"
"Zm8iIHR5cGU9InRuczpCdWlsZEluZm8iIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+"
"DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTZWNvbmRzVGlsbFNodXRkb3duIiB0eXBlPSJ4czp1"
"bnNpZ25lZEludCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iU2h1"
"dGRvd25SZWFzb24iIHR5cGU9InVhOkxvY2FsaXplZFRleHQiIG1pbk9jY3Vycz0iMCIgbmlsbGFi"
"bGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAg"
"PHhzOmVsZW1lbnQgbmFtZT0iU2VydmVyU3RhdHVzRGF0YVR5cGUiIHR5cGU9InRuczpTZXJ2ZXJT"
"dGF0dXNEYXRhVHlwZSIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iU2Vzc2lvbkRpYWdu"
"b3N0aWNzRGF0YVR5cGUiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5h"
"bWU9IlNlc3Npb25JZCIgdHlwZT0idWE6Tm9kZUlkIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0"
"cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iU2Vzc2lvbk5hbWUiIHR5cGU9InhzOnN0"
"cmluZyIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50"
"IG5hbWU9IkNsaWVudERlc2NyaXB0aW9uIiB0eXBlPSJ0bnM6QXBwbGljYXRpb25EZXNjcmlwdGlv"
"biIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5h"
"bWU9IlNlcnZlclVyaSIgdHlwZT0ieHM6c3RyaW5nIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0"
"cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRW5kcG9pbnRVcmwiIHR5cGU9InhzOnN0"
"cmluZyIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50"
"IG5hbWU9IkxvY2FsZUlkcyIgdHlwZT0idWE6TGlzdE9mU3RyaW5nIiBtaW5PY2N1cnM9IjAiIG5p"
"bGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iQWN0dWFsU2Vzc2lvblRp"
"bWVvdXQiIHR5cGU9InhzOmRvdWJsZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1l"
"bnQgbmFtZT0iTWF4UmVzcG9uc2VNZXNzYWdlU2l6ZSIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1p"
"bk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkNsaWVudENvbm5lY3Rpb25U"
"aW1lIiB0eXBlPSJ4czpkYXRlVGltZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1l"
"bnQgbmFtZT0iQ2xpZW50TGFzdENvbnRhY3RUaW1lIiB0eXBlPSJ4czpkYXRlVGltZSIgbWluT2Nj"
"dXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iQ3VycmVudFN1YnNjcmlwdGlvbnND"
"b3VudCIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czpl"
"bGVtZW50IG5hbWU9IkN1cnJlbnRNb25pdG9yZWRJdGVtc0NvdW50IiB0eXBlPSJ4czp1bnNpZ25l"
"ZEludCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iQ3VycmVudFB1"
"Ymxpc2hSZXF1ZXN0c0luUXVldWUiIHR5cGU9InhzOnVuc2lnbmVkSW50IiBtaW5PY2N1cnM9IjAi"
"IC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJUb3RhbFJlcXVlc3RDb3VudCIgdHlwZT0idG5z"
"OlNlcnZpY2VDb3VudGVyRGF0YVR5cGUiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+"
"DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJVbmF1dGhvcml6ZWRSZXF1ZXN0Q291bnQiIHR5cGU9"
"InhzOnVuc2lnbmVkSW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1l"
"PSJSZWFkQ291bnQiIHR5cGU9InRuczpTZXJ2aWNlQ291bnRlckRhdGFUeXBlIiBtaW5PY2N1cnM9"
"IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iSGlzdG9yeVJl"
"YWRDb3VudCIgdHlwZT0idG5zOlNlcnZpY2VDb3VudGVyRGF0YVR5cGUiIG1pbk9jY3Vycz0iMCIg"
"bmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJXcml0ZUNvdW50IiB0"
"eXBlPSJ0bnM6U2VydmljZUNvdW50ZXJEYXRhVHlwZSIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0i"
"dHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ikhpc3RvcnlVcGRhdGVDb3VudCIgdHlw"
"ZT0idG5zOlNlcnZpY2VDb3VudGVyRGF0YVR5cGUiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRy"
"dWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJDYWxsQ291bnQiIHR5cGU9InRuczpTZXJ2"
"aWNlQ291bnRlckRhdGFUeXBlIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAg"
"ICAgPHhzOmVsZW1lbnQgbmFtZT0iQ3JlYXRlTW9uaXRvcmVkSXRlbXNDb3VudCIgdHlwZT0idG5z"
"OlNlcnZpY2VDb3VudGVyRGF0YVR5cGUiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+"
"DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJNb2RpZnlNb25pdG9yZWRJdGVtc0NvdW50IiB0eXBl"
"PSJ0bnM6U2VydmljZUNvdW50ZXJEYXRhVHlwZSIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1"
"ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlNldE1vbml0b3JpbmdNb2RlQ291bnQiIHR5"
"cGU9InRuczpTZXJ2aWNlQ291bnRlckRhdGFUeXBlIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0"
"cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iU2V0VHJpZ2dlcmluZ0NvdW50IiB0eXBl"
"PSJ0bnM6U2VydmljZUNvdW50ZXJEYXRhVHlwZSIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1"
"ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkRlbGV0ZU1vbml0b3JlZEl0ZW1zQ291bnQi"
"IHR5cGU9InRuczpTZXJ2aWNlQ291bnRlckRhdGFUeXBlIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxl"
"PSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iQ3JlYXRlU3Vic2NyaXB0aW9uQ291"
"bnQiIHR5cGU9InRuczpTZXJ2aWNlQ291bnRlckRhdGFUeXBlIiBtaW5PY2N1cnM9IjAiIG5pbGxh"
"YmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iTW9kaWZ5U3Vic2NyaXB0aW9u"
"Q291bnQiIHR5cGU9InRuczpTZXJ2aWNlQ291bnRlckRhdGFUeXBlIiBtaW5PY2N1cnM9IjAiIG5p"
"bGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iU2V0UHVibGlzaGluZ01v"
"ZGVDb3VudCIgdHlwZT0idG5zOlNlcnZpY2VDb3VudGVyRGF0YVR5cGUiIG1pbk9jY3Vycz0iMCIg"
"bmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJQdWJsaXNoQ291bnQi"
"IHR5cGU9InRuczpTZXJ2aWNlQ291bnRlckRhdGFUeXBlIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxl"
"PSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVwdWJsaXNoQ291bnQiIHR5cGU9"
"InRuczpTZXJ2aWNlQ291bnRlckRhdGFUeXBlIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVl"
"IiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iVHJhbnNmZXJTdWJzY3JpcHRpb25zQ291bnQi"
"IHR5cGU9InRuczpTZXJ2aWNlQ291bnRlckRhdGFUeXBlIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxl"
"PSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRGVsZXRlU3Vic2NyaXB0aW9uc0Nv"
"dW50IiB0eXBlPSJ0bnM6U2VydmljZUNvdW50ZXJEYXRhVHlwZSIgbWluT2NjdXJzPSIwIiBuaWxs"
"YWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkFkZE5vZGVzQ291bnQiIHR5"
"cGU9InRuczpTZXJ2aWNlQ291bnRlckRhdGFUeXBlIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0"
"cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iQWRkUmVmZXJlbmNlc0NvdW50IiB0eXBl"
"PSJ0bnM6U2VydmljZUNvdW50ZXJEYXRhVHlwZSIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1"
"ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkRlbGV0ZU5vZGVzQ291bnQiIHR5cGU9InRu"
"czpTZXJ2aWNlQ291bnRlckRhdGFUeXBlIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAv"
"Pg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRGVsZXRlUmVmZXJlbmNlc0NvdW50IiB0eXBlPSJ0"
"bnM6U2VydmljZUNvdW50ZXJEYXRhVHlwZSIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIg"
"Lz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkJyb3dzZUNvdW50IiB0eXBlPSJ0bnM6U2Vydmlj"
"ZUNvdW50ZXJEYXRhVHlwZSIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAg"
"IDx4czplbGVtZW50IG5hbWU9IkJyb3dzZU5leHRDb3VudCIgdHlwZT0idG5zOlNlcnZpY2VDb3Vu"
"dGVyRGF0YVR5cGUiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6"
"ZWxlbWVudCBuYW1lPSJUcmFuc2xhdGVCcm93c2VQYXRoc1RvTm9kZUlkc0NvdW50IiB0eXBlPSJ0"
"bnM6U2VydmljZUNvdW50ZXJEYXRhVHlwZSIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIg"
"Lz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlF1ZXJ5Rmlyc3RDb3VudCIgdHlwZT0idG5zOlNl"
"cnZpY2VDb3VudGVyRGF0YVR5cGUiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQog"
"ICAgICA8eHM6ZWxlbWVudCBuYW1lPSJRdWVyeU5leHRDb3VudCIgdHlwZT0idG5zOlNlcnZpY2VD"
"b3VudGVyRGF0YVR5cGUiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8"
"eHM6ZWxlbWVudCBuYW1lPSJSZWdpc3Rlck5vZGVzQ291bnQiIHR5cGU9InRuczpTZXJ2aWNlQ291"
"bnRlckRhdGFUeXBlIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iVW5yZWdpc3Rlck5vZGVzQ291bnQiIHR5cGU9InRuczpTZXJ2aWNlQ291"
"bnRlckRhdGFUeXBlIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6"
"c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IlNlc3Np"
"b25EaWFnbm9zdGljc0RhdGFUeXBlIiB0eXBlPSJ0bnM6U2Vzc2lvbkRpYWdub3N0aWNzRGF0YVR5"
"cGUiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxpc3RPZlNlc3Npb25EaWFnbm9zdGlj"
"c0RhdGFUeXBlIj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJT"
"ZXNzaW9uRGlhZ25vc3RpY3NEYXRhVHlwZSIgdHlwZT0idG5zOlNlc3Npb25EaWFnbm9zdGljc0Rh"
"dGFUeXBlIiBtaW5PY2N1cnM9IjAiIG1heE9jY3Vycz0idW5ib3VuZGVkIiBuaWxsYWJsZT0idHJ1"
"ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxl"
"bWVudCBuYW1lPSJMaXN0T2ZTZXNzaW9uRGlhZ25vc3RpY3NEYXRhVHlwZSIgdHlwZT0idG5zOkxp"
"c3RPZlNlc3Npb25EaWFnbm9zdGljc0RhdGFUeXBlIiBuaWxsYWJsZT0idHJ1ZSI+PC94czplbGVt"
"ZW50Pg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJTZXNzaW9uU2VjdXJpdHlEaWFnbm9zdGlj"
"c0RhdGFUeXBlIj4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJT"
"ZXNzaW9uSWQiIHR5cGU9InVhOk5vZGVJZCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIg"
"Lz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkNsaWVudFVzZXJJZE9mU2Vzc2lvbiIgdHlwZT0i"
"eHM6c3RyaW5nIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVs"
"ZW1lbnQgbmFtZT0iQ2xpZW50VXNlcklkSGlzdG9yeSIgdHlwZT0idWE6TGlzdE9mU3RyaW5nIiBt"
"aW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0i"
"QXV0aGVudGljYXRpb25NZWNoYW5pc20iIHR5cGU9InhzOnN0cmluZyIgbWluT2NjdXJzPSIwIiBu"
"aWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkVuY29kaW5nIiB0eXBl"
"PSJ4czpzdHJpbmciIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6"
"ZWxlbWVudCBuYW1lPSJUcmFuc3BvcnRQcm90b2NvbCIgdHlwZT0ieHM6c3RyaW5nIiBtaW5PY2N1"
"cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iU2VjdXJp"
"dHlNb2RlIiB0eXBlPSJ0bnM6TWVzc2FnZVNlY3VyaXR5TW9kZSIgbWluT2NjdXJzPSIwIiAvPg0K"
"ICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iU2VjdXJpdHlQb2xpY3lVcmkiIHR5cGU9InhzOnN0cmlu"
"ZyIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5h"
"bWU9IkNsaWVudENlcnRpZmljYXRlIiB0eXBlPSJ4czpiYXNlNjRCaW5hcnkiIG1pbk9jY3Vycz0i"
"MCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4"
"VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iU2Vzc2lvblNlY3VyaXR5RGlhZ25vc3RpY3NEYXRh"
"VHlwZSIgdHlwZT0idG5zOlNlc3Npb25TZWN1cml0eURpYWdub3N0aWNzRGF0YVR5cGUiIC8+DQoN"
"CiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxpc3RPZlNlc3Npb25TZWN1cml0eURpYWdub3N0aWNz"
"RGF0YVR5cGUiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlNl"
"c3Npb25TZWN1cml0eURpYWdub3N0aWNzRGF0YVR5cGUiIHR5cGU9InRuczpTZXNzaW9uU2VjdXJp"
"dHlEaWFnbm9zdGljc0RhdGFUeXBlIiBtaW5PY2N1cnM9IjAiIG1heE9jY3Vycz0idW5ib3VuZGVk"
"IiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhU"
"eXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJMaXN0T2ZTZXNzaW9uU2VjdXJpdHlEaWFnbm9zdGlj"
"c0RhdGFUeXBlIiB0eXBlPSJ0bnM6TGlzdE9mU2Vzc2lvblNlY3VyaXR5RGlhZ25vc3RpY3NEYXRh"
"VHlwZSIgbmlsbGFibGU9InRydWUiPjwveHM6ZWxlbWVudD4NCg0KICA8eHM6Y29tcGxleFR5cGUg"
"bmFtZT0iU2VydmljZUNvdW50ZXJEYXRhVHlwZSI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iVG90YWxDb3VudCIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9j"
"Y3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkVycm9yQ291bnQiIHR5cGU9Inhz"
"OnVuc2lnbmVkSW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94"
"czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iU2VydmljZUNvdW50ZXJEYXRhVHlw"
"ZSIgdHlwZT0idG5zOlNlcnZpY2VDb3VudGVyRGF0YVR5cGUiIC8+DQoNCiAgPHhzOmNvbXBsZXhU"
"eXBlIG5hbWU9IlN0YXR1c1Jlc3VsdCI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVs"
"ZW1lbnQgbmFtZT0iU3RhdHVzQ29kZSIgdHlwZT0idWE6U3RhdHVzQ29kZSIgbWluT2NjdXJzPSIw"
"IiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRGlhZ25vc3RpY0luZm8iIHR5cGU9InVhOkRp"
"YWdub3N0aWNJbmZvIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6"
"c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IlN0YXR1"
"c1Jlc3VsdCIgdHlwZT0idG5zOlN0YXR1c1Jlc3VsdCIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUg"
"bmFtZT0iTGlzdE9mU3RhdHVzUmVzdWx0Ij4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6"
"ZWxlbWVudCBuYW1lPSJTdGF0dXNSZXN1bHQiIHR5cGU9InRuczpTdGF0dXNSZXN1bHQiIG1pbk9j"
"Y3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwv"
"eHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ikxp"
"c3RPZlN0YXR1c1Jlc3VsdCIgdHlwZT0idG5zOkxpc3RPZlN0YXR1c1Jlc3VsdCIgbmlsbGFibGU9"
"InRydWUiPjwveHM6ZWxlbWVudD4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iU3Vic2NyaXB0"
"aW9uRGlhZ25vc3RpY3NEYXRhVHlwZSI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVs"
"ZW1lbnQgbmFtZT0iU2Vzc2lvbklkIiB0eXBlPSJ1YTpOb2RlSWQiIG1pbk9jY3Vycz0iMCIgbmls"
"bGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJTdWJzY3JpcHRpb25JZCIg"
"dHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50"
"IG5hbWU9IlByaW9yaXR5IiB0eXBlPSJ4czp1bnNpZ25lZEJ5dGUiIG1pbk9jY3Vycz0iMCIgLz4N"
"CiAgICAgIDx4czplbGVtZW50IG5hbWU9IlB1Ymxpc2hpbmdJbnRlcnZhbCIgdHlwZT0ieHM6ZG91"
"YmxlIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJNYXhLZWVwQWxp"
"dmVDb3VudCIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4"
"czplbGVtZW50IG5hbWU9Ik1heExpZmV0aW1lQ291bnQiIHR5cGU9InhzOnVuc2lnbmVkSW50IiBt"
"aW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJNYXhOb3RpZmljYXRpb25z"
"UGVyUHVibGlzaCIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAg"
"IDx4czplbGVtZW50IG5hbWU9IlB1Ymxpc2hpbmdFbmFibGVkIiB0eXBlPSJ4czpib29sZWFuIiBt"
"aW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJNb2RpZnlDb3VudCIgdHlw"
"ZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5h"
"bWU9IkVuYWJsZUNvdW50IiB0eXBlPSJ4czp1bnNpZ25lZEludCIgbWluT2NjdXJzPSIwIiAvPg0K"
"ICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRGlzYWJsZUNvdW50IiB0eXBlPSJ4czp1bnNpZ25lZElu"
"dCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iUmVwdWJsaXNoUmVx"
"dWVzdENvdW50IiB0eXBlPSJ4czp1bnNpZ25lZEludCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAg"
"PHhzOmVsZW1lbnQgbmFtZT0iUmVwdWJsaXNoTWVzc2FnZVJlcXVlc3RDb3VudCIgdHlwZT0ieHM6"
"dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJl"
"cHVibGlzaE1lc3NhZ2VDb3VudCIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIg"
"Lz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlRyYW5zZmVyUmVxdWVzdENvdW50IiB0eXBlPSJ4"
"czp1bnNpZ25lZEludCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0i"
"VHJhbnNmZXJyZWRUb0FsdENsaWVudENvdW50IiB0eXBlPSJ4czp1bnNpZ25lZEludCIgbWluT2Nj"
"dXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iVHJhbnNmZXJyZWRUb1NhbWVDbGll"
"bnRDb3VudCIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4"
"czplbGVtZW50IG5hbWU9IlB1Ymxpc2hSZXF1ZXN0Q291bnQiIHR5cGU9InhzOnVuc2lnbmVkSW50"
"IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJEYXRhQ2hhbmdlTm90"
"aWZpY2F0aW9uc0NvdW50IiB0eXBlPSJ4czp1bnNpZ25lZEludCIgbWluT2NjdXJzPSIwIiAvPg0K"
"ICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRXZlbnROb3RpZmljYXRpb25zQ291bnQiIHR5cGU9Inhz"
"OnVuc2lnbmVkSW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJO"
"b3RpZmljYXRpb25zQ291bnQiIHR5cGU9InhzOnVuc2lnbmVkSW50IiBtaW5PY2N1cnM9IjAiIC8+"
"DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJMYXRlUHVibGlzaFJlcXVlc3RDb3VudCIgdHlwZT0i"
"eHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9"
"IkN1cnJlbnRLZWVwQWxpdmVDb3VudCIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0i"
"MCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkN1cnJlbnRMaWZldGltZUNvdW50IiB0eXBl"
"PSJ4czp1bnNpZ25lZEludCIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFt"
"ZT0iVW5hY2tub3dsZWRnZWRNZXNzYWdlQ291bnQiIHR5cGU9InhzOnVuc2lnbmVkSW50IiBtaW5P"
"Y2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJEaXNjYXJkZWRNZXNzYWdlQ291"
"bnQiIHR5cGU9InhzOnVuc2lnbmVkSW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxl"
"bWVudCBuYW1lPSJNb25pdG9yZWRJdGVtQ291bnQiIHR5cGU9InhzOnVuc2lnbmVkSW50IiBtaW5P"
"Y2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJEaXNhYmxlZE1vbml0b3JlZEl0"
"ZW1Db3VudCIgdHlwZT0ieHM6dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4"
"czplbGVtZW50IG5hbWU9Ik1vbml0b3JpbmdRdWV1ZU92ZXJmbG93Q291bnQiIHR5cGU9InhzOnVu"
"c2lnbmVkSW50IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJOZXh0"
"U2VxdWVuY2VOdW1iZXIiIHR5cGU9InhzOnVuc2lnbmVkSW50IiBtaW5PY2N1cnM9IjAiIC8+DQog"
"ICAgICA8eHM6ZWxlbWVudCBuYW1lPSJFdmVudFF1ZXVlT3ZlckZsb3dDb3VudCIgdHlwZT0ieHM6"
"dW5zaWduZWRJbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hz"
"OmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJTdWJzY3JpcHRpb25EaWFnbm9zdGlj"
"c0RhdGFUeXBlIiB0eXBlPSJ0bnM6U3Vic2NyaXB0aW9uRGlhZ25vc3RpY3NEYXRhVHlwZSIgLz4N"
"Cg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTGlzdE9mU3Vic2NyaXB0aW9uRGlhZ25vc3RpY3NE"
"YXRhVHlwZSI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iU3Vi"
"c2NyaXB0aW9uRGlhZ25vc3RpY3NEYXRhVHlwZSIgdHlwZT0idG5zOlN1YnNjcmlwdGlvbkRpYWdu"
"b3N0aWNzRGF0YVR5cGUiIG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIG5pbGxh"
"YmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQog"
"IDx4czplbGVtZW50IG5hbWU9Ikxpc3RPZlN1YnNjcmlwdGlvbkRpYWdub3N0aWNzRGF0YVR5cGUi"
"IHR5cGU9InRuczpMaXN0T2ZTdWJzY3JpcHRpb25EaWFnbm9zdGljc0RhdGFUeXBlIiBuaWxsYWJs"
"ZT0idHJ1ZSI+PC94czplbGVtZW50Pg0KDQogIDx4czpzaW1wbGVUeXBlICBuYW1lPSJNb2RlbENo"
"YW5nZVN0cnVjdHVyZVZlcmJNYXNrIj4NCiAgICA8eHM6cmVzdHJpY3Rpb24gYmFzZT0ieHM6c3Ry"
"aW5nIj4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iTm9kZUFkZGVkXzEiIC8+DQogICAg"
"ICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9Ik5vZGVEZWxldGVkXzIiIC8+DQogICAgICA8eHM6ZW51"
"bWVyYXRpb24gdmFsdWU9IlJlZmVyZW5jZUFkZGVkXzQiIC8+DQogICAgICA8eHM6ZW51bWVyYXRp"
"b24gdmFsdWU9IlJlZmVyZW5jZURlbGV0ZWRfOCIgLz4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2"
"YWx1ZT0iRGF0YVR5cGVDaGFuZ2VkXzE2IiAvPg0KICAgIDwveHM6cmVzdHJpY3Rpb24+DQogIDwv"
"eHM6c2ltcGxlVHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTW9kZWxDaGFuZ2VTdHJ1Y3R1cmVW"
"ZXJiTWFzayIgdHlwZT0idG5zOk1vZGVsQ2hhbmdlU3RydWN0dXJlVmVyYk1hc2siIC8+DQoNCiAg"
"PHhzOmNvbXBsZXhUeXBlIG5hbWU9Ik1vZGVsQ2hhbmdlU3RydWN0dXJlRGF0YVR5cGUiPg0KICAg"
"IDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkFmZmVjdGVkIiB0eXBlPSJ1"
"YTpOb2RlSWQiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxl"
"bWVudCBuYW1lPSJBZmZlY3RlZFR5cGUiIHR5cGU9InVhOk5vZGVJZCIgbWluT2NjdXJzPSIwIiBu"
"aWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlZlcmIiIHR5cGU9Inhz"
"OnVuc2lnbmVkQnl0ZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwv"
"eHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9Ik1vZGVsQ2hhbmdlU3RydWN0dXJl"
"RGF0YVR5cGUiIHR5cGU9InRuczpNb2RlbENoYW5nZVN0cnVjdHVyZURhdGFUeXBlIiAvPg0KDQog"
"IDx4czpjb21wbGV4VHlwZSBuYW1lPSJMaXN0T2ZNb2RlbENoYW5nZVN0cnVjdHVyZURhdGFUeXBl"
"Ij4NCiAgICA8eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJNb2RlbENoYW5n"
"ZVN0cnVjdHVyZURhdGFUeXBlIiB0eXBlPSJ0bnM6TW9kZWxDaGFuZ2VTdHJ1Y3R1cmVEYXRhVHlw"
"ZSIgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRlZCIgbmlsbGFibGU9InRydWUiIC8+"
"DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQg"
"bmFtZT0iTGlzdE9mTW9kZWxDaGFuZ2VTdHJ1Y3R1cmVEYXRhVHlwZSIgdHlwZT0idG5zOkxpc3RP"
"Zk1vZGVsQ2hhbmdlU3RydWN0dXJlRGF0YVR5cGUiIG5pbGxhYmxlPSJ0cnVlIj48L3hzOmVsZW1l"
"bnQ+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IlNlbWFudGljQ2hhbmdlU3RydWN0dXJlRGF0"
"YVR5cGUiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkFmZmVj"
"dGVkIiB0eXBlPSJ1YTpOb2RlSWQiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQog"
"ICAgICA8eHM6ZWxlbWVudCBuYW1lPSJBZmZlY3RlZFR5cGUiIHR5cGU9InVhOk5vZGVJZCIgbWlu"
"T2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hz"
"OmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1lPSJTZW1hbnRpY0NoYW5nZVN0cnVjdHVy"
"ZURhdGFUeXBlIiB0eXBlPSJ0bnM6U2VtYW50aWNDaGFuZ2VTdHJ1Y3R1cmVEYXRhVHlwZSIgLz4N"
"Cg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTGlzdE9mU2VtYW50aWNDaGFuZ2VTdHJ1Y3R1cmVE"
"YXRhVHlwZSI+DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iU2Vt"
"YW50aWNDaGFuZ2VTdHJ1Y3R1cmVEYXRhVHlwZSIgdHlwZT0idG5zOlNlbWFudGljQ2hhbmdlU3Ry"
"dWN0dXJlRGF0YVR5cGUiIG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIG5pbGxh"
"YmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5cGU+DQog"
"IDx4czplbGVtZW50IG5hbWU9Ikxpc3RPZlNlbWFudGljQ2hhbmdlU3RydWN0dXJlRGF0YVR5cGUi"
"IHR5cGU9InRuczpMaXN0T2ZTZW1hbnRpY0NoYW5nZVN0cnVjdHVyZURhdGFUeXBlIiBuaWxsYWJs"
"ZT0idHJ1ZSI+PC94czplbGVtZW50Pg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJSYW5nZSI+"
"DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iTG93IiB0eXBlPSJ4"
"czpkb3VibGUiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkhpZ2gi"
"IHR5cGU9InhzOmRvdWJsZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQog"
"IDwveHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IlJhbmdlIiB0eXBlPSJ0bnM6"
"UmFuZ2UiIC8+DQoNCiAgPHhzOmNvbXBsZXhUeXBlIG5hbWU9IkVVSW5mb3JtYXRpb24iPg0KICAg"
"IDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ik5hbWVzcGFjZVVyaSIgdHlw"
"ZT0ieHM6c3RyaW5nIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iVW5pdElkIiB0eXBlPSJ4czppbnQiIG1pbk9jY3Vycz0iMCIgLz4NCiAg"
"ICAgIDx4czplbGVtZW50IG5hbWU9IkRpc3BsYXlOYW1lIiB0eXBlPSJ1YTpMb2NhbGl6ZWRUZXh0"
"IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFt"
"ZT0iRGVzY3JpcHRpb24iIHR5cGU9InVhOkxvY2FsaXplZFRleHQiIG1pbk9jY3Vycz0iMCIgbmls"
"bGFibGU9InRydWUiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21wbGV4VHlwZT4N"
"CiAgPHhzOmVsZW1lbnQgbmFtZT0iRVVJbmZvcm1hdGlvbiIgdHlwZT0idG5zOkVVSW5mb3JtYXRp"
"b24iIC8+DQoNCiAgPHhzOnNpbXBsZVR5cGUgIG5hbWU9IkF4aXNTY2FsZUVudW1lcmF0aW9uIj4N"
"CiAgICA8eHM6cmVzdHJpY3Rpb24gYmFzZT0ieHM6c3RyaW5nIj4NCiAgICAgIDx4czplbnVtZXJh"
"dGlvbiB2YWx1ZT0iTGluZWFyXzAiIC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9Ikxv"
"Z18xIiAvPg0KICAgICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJMbl8yIiAvPg0KICAgIDwveHM6"
"cmVzdHJpY3Rpb24+DQogIDwveHM6c2ltcGxlVHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iQXhp"
"c1NjYWxlRW51bWVyYXRpb24iIHR5cGU9InRuczpBeGlzU2NhbGVFbnVtZXJhdGlvbiIgLz4NCg0K"
"ICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iQ29tcGxleE51bWJlclR5cGUiPg0KICAgIDx4czpzZXF1"
"ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlJlYWwiIHR5cGU9InhzOmZsb2F0IiBtaW5P"
"Y2N1cnM9IjAiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJJbWFnaW5hcnkiIHR5cGU9Inhz"
"OmZsb2F0IiBtaW5PY2N1cnM9IjAiIC8+DQogICAgPC94czpzZXF1ZW5jZT4NCiAgPC94czpjb21w"
"bGV4VHlwZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iQ29tcGxleE51bWJlclR5cGUiIHR5cGU9InRu"
"czpDb21wbGV4TnVtYmVyVHlwZSIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iRG91Ymxl"
"Q29tcGxleE51bWJlclR5cGUiPg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50"
"IG5hbWU9IlJlYWwiIHR5cGU9InhzOmRvdWJsZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhz"
"OmVsZW1lbnQgbmFtZT0iSW1hZ2luYXJ5IiB0eXBlPSJ4czpkb3VibGUiIG1pbk9jY3Vycz0iMCIg"
"Lz4NCiAgICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVu"
"dCBuYW1lPSJEb3VibGVDb21wbGV4TnVtYmVyVHlwZSIgdHlwZT0idG5zOkRvdWJsZUNvbXBsZXhO"
"dW1iZXJUeXBlIiAvPg0KDQogIDx4czpjb21wbGV4VHlwZSBuYW1lPSJBeGlzSW5mb3JtYXRpb24i"
"Pg0KICAgIDx4czpzZXF1ZW5jZT4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkVuZ2luZWVyaW5n"
"VW5pdHMiIHR5cGU9InRuczpFVUluZm9ybWF0aW9uIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0"
"cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRVVSYW5nZSIgdHlwZT0idG5zOlJhbmdl"
"IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFt"
"ZT0iVGl0bGUiIHR5cGU9InVhOkxvY2FsaXplZFRleHQiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9"
"InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJBeGlzU2NhbGVUeXBlIiB0eXBlPSJ0"
"bnM6QXhpc1NjYWxlRW51bWVyYXRpb24iIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVt"
"ZW50IG5hbWU9IkF4aXNTdGVwcyIgdHlwZT0idWE6TGlzdE9mRG91YmxlIiBtaW5PY2N1cnM9IjAi"
"IG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29tcGxleFR5"
"cGU+DQogIDx4czplbGVtZW50IG5hbWU9IkF4aXNJbmZvcm1hdGlvbiIgdHlwZT0idG5zOkF4aXNJ"
"bmZvcm1hdGlvbiIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iWFZUeXBlIj4NCiAgICA8"
"eHM6c2VxdWVuY2U+DQogICAgICA8eHM6ZWxlbWVudCBuYW1lPSJYIiB0eXBlPSJ4czpkb3VibGUi"
"IG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IlZhbHVlIiB0eXBlPSJ4"
"czpmbG9hdCIgbWluT2NjdXJzPSIwIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwveHM6Y29t"
"cGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IlhWVHlwZSIgdHlwZT0idG5zOlhWVHlwZSIg"
"Lz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iUHJvZ3JhbURpYWdub3N0aWNEYXRhVHlwZSI+"
"DQogICAgPHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iQ3JlYXRlU2Vzc2lv"
"bklkIiB0eXBlPSJ1YTpOb2RlSWQiIG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQog"
"ICAgICA8eHM6ZWxlbWVudCBuYW1lPSJDcmVhdGVDbGllbnROYW1lIiB0eXBlPSJ4czpzdHJpbmci"
"IG1pbk9jY3Vycz0iMCIgbmlsbGFibGU9InRydWUiIC8+DQogICAgICA8eHM6ZWxlbWVudCBuYW1l"
"PSJJbnZvY2F0aW9uQ3JlYXRpb25UaW1lIiB0eXBlPSJ4czpkYXRlVGltZSIgbWluT2NjdXJzPSIw"
"IiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iTGFzdFRyYW5zaXRpb25UaW1lIiB0eXBlPSJ4"
"czpkYXRlVGltZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iTGFz"
"dE1ldGhvZENhbGwiIHR5cGU9InhzOnN0cmluZyIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1"
"ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9Ikxhc3RNZXRob2RTZXNzaW9uSWQiIHR5cGU9"
"InVhOk5vZGVJZCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAgICAgIDx4czpl"
"bGVtZW50IG5hbWU9Ikxhc3RNZXRob2RJbnB1dEFyZ3VtZW50cyIgdHlwZT0idG5zOkxpc3RPZkFy"
"Z3VtZW50IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1l"
"bnQgbmFtZT0iTGFzdE1ldGhvZE91dHB1dEFyZ3VtZW50cyIgdHlwZT0idG5zOkxpc3RPZkFyZ3Vt"
"ZW50IiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1lbnQg"
"bmFtZT0iTGFzdE1ldGhvZENhbGxUaW1lIiB0eXBlPSJ4czpkYXRlVGltZSIgbWluT2NjdXJzPSIw"
"IiAvPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iTGFzdE1ldGhvZFJldHVyblN0YXR1cyIgdHlw"
"ZT0idG5zOlN0YXR1c1Jlc3VsdCIgbWluT2NjdXJzPSIwIiBuaWxsYWJsZT0idHJ1ZSIgLz4NCiAg"
"ICA8L3hzOnNlcXVlbmNlPg0KICA8L3hzOmNvbXBsZXhUeXBlPg0KICA8eHM6ZWxlbWVudCBuYW1l"
"PSJQcm9ncmFtRGlhZ25vc3RpY0RhdGFUeXBlIiB0eXBlPSJ0bnM6UHJvZ3JhbURpYWdub3N0aWNE"
"YXRhVHlwZSIgLz4NCg0KICA8eHM6Y29tcGxleFR5cGUgbmFtZT0iQW5ub3RhdGlvbiI+DQogICAg"
"PHhzOnNlcXVlbmNlPg0KICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iTWVzc2FnZSIgdHlwZT0ieHM6"
"c3RyaW5nIiBtaW5PY2N1cnM9IjAiIG5pbGxhYmxlPSJ0cnVlIiAvPg0KICAgICAgPHhzOmVsZW1l"
"bnQgbmFtZT0iVXNlck5hbWUiIHR5cGU9InhzOnN0cmluZyIgbWluT2NjdXJzPSIwIiBuaWxsYWJs"
"ZT0idHJ1ZSIgLz4NCiAgICAgIDx4czplbGVtZW50IG5hbWU9IkFubm90YXRpb25UaW1lIiB0eXBl"
"PSJ4czpkYXRlVGltZSIgbWluT2NjdXJzPSIwIiAvPg0KICAgIDwveHM6c2VxdWVuY2U+DQogIDwv"
"eHM6Y29tcGxleFR5cGU+DQogIDx4czplbGVtZW50IG5hbWU9IkFubm90YXRpb24iIHR5cGU9InRu"
"czpBbm5vdGF0aW9uIiAvPg0KDQogIDx4czpzaW1wbGVUeXBlICBuYW1lPSJFeGNlcHRpb25EZXZp"
"YXRpb25Gb3JtYXQiPg0KICAgIDx4czpyZXN0cmljdGlvbiBiYXNlPSJ4czpzdHJpbmciPg0KICAg"
"ICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJBYnNvbHV0ZVZhbHVlXzAiIC8+DQogICAgICA8eHM6"
"ZW51bWVyYXRpb24gdmFsdWU9IlBlcmNlbnRPZlJhbmdlXzEiIC8+DQogICAgICA8eHM6ZW51bWVy"
"YXRpb24gdmFsdWU9IlBlcmNlbnRPZlZhbHVlXzIiIC8+DQogICAgICA8eHM6ZW51bWVyYXRpb24g"
"dmFsdWU9IlBlcmNlbnRPZkVVUmFuZ2VfMyIgLz4NCiAgICAgIDx4czplbnVtZXJhdGlvbiB2YWx1"
"ZT0iVW5rbm93bl80IiAvPg0KICAgIDwveHM6cmVzdHJpY3Rpb24+DQogIDwveHM6c2ltcGxlVHlw"
"ZT4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iRXhjZXB0aW9uRGV2aWF0aW9uRm9ybWF0IiB0eXBlPSJ0"
"bnM6RXhjZXB0aW9uRGV2aWF0aW9uRm9ybWF0IiAvPg0KDQo8L3hzOnNjaGVtYT4="";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8254");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8285");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8291");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8918");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8300");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8297");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8303");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8417");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8333");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8306");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8309");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8312");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8315");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8318");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8363");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8366");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8369");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8372");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8321");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8324");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8330");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8564");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8567");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8570");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8573");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8576");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8579");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8582");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8639");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8702");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8708");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8711");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8807");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8384");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8387");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8390");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8327");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8843");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11951");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11954");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8846");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8849");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8852");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8855");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8858");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8861");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8294");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8864");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8867");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8870");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8873");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8876");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12175");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12178");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12083");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12086");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8882");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=8252");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8879");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8254");
        node.BrowseName = ToQualifiedName("NamespaceUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A URI that uniquely identifies the dictionary.");
        attrs.DisplayName = LocalizedText("NamespaceUri");
        attrs.Type = ObjectId::String;
        attrs.Value = +""http://opcfoundation.org/UA/2008/02/Types.xsd"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8285");
        node.BrowseName = ToQualifiedName("Argument");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Argument");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='Argument']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8291");
        node.BrowseName = ToQualifiedName("EnumValueType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EnumValueType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='EnumValueType']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8918");
        node.BrowseName = ToQualifiedName("TimeZoneDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TimeZoneDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='TimeZoneDataType']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8300");
        node.BrowseName = ToQualifiedName("ApplicationDescription");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ApplicationDescription");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='ApplicationDescription']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8297");
        node.BrowseName = ToQualifiedName("UserTokenPolicy");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UserTokenPolicy");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='UserTokenPolicy']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8303");
        node.BrowseName = ToQualifiedName("EndpointDescription");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointDescription");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='EndpointDescription']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8417");
        node.BrowseName = ToQualifiedName("RegisteredServer");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RegisteredServer");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='RegisteredServer']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8333");
        node.BrowseName = ToQualifiedName("SignedSoftwareCertificate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SignedSoftwareCertificate");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='SignedSoftwareCertificate']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8306");
        node.BrowseName = ToQualifiedName("UserIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UserIdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='UserIdentityToken']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8309");
        node.BrowseName = ToQualifiedName("AnonymousIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AnonymousIdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='AnonymousIdentityToken']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8312");
        node.BrowseName = ToQualifiedName("UserNameIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UserNameIdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='UserNameIdentityToken']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8315");
        node.BrowseName = ToQualifiedName("X509IdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("X509IdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='X509IdentityToken']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8318");
        node.BrowseName = ToQualifiedName("IssuedIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("IssuedIdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='IssuedIdentityToken']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8363");
        node.BrowseName = ToQualifiedName("AddNodesItem");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddNodesItem");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='AddNodesItem']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8366");
        node.BrowseName = ToQualifiedName("AddReferencesItem");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddReferencesItem");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='AddReferencesItem']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8369");
        node.BrowseName = ToQualifiedName("DeleteNodesItem");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteNodesItem");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='DeleteNodesItem']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8372");
        node.BrowseName = ToQualifiedName("DeleteReferencesItem");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteReferencesItem");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='DeleteReferencesItem']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8321");
        node.BrowseName = ToQualifiedName("EndpointConfiguration");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointConfiguration");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='EndpointConfiguration']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8324");
        node.BrowseName = ToQualifiedName("SupportedProfile");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SupportedProfile");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='SupportedProfile']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8330");
        node.BrowseName = ToQualifiedName("SoftwareCertificate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SoftwareCertificate");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='SoftwareCertificate']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8564");
        node.BrowseName = ToQualifiedName("ContentFilterElement");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ContentFilterElement");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='ContentFilterElement']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8567");
        node.BrowseName = ToQualifiedName("ContentFilter");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ContentFilter");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='ContentFilter']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8570");
        node.BrowseName = ToQualifiedName("FilterOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("FilterOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='FilterOperand']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8573");
        node.BrowseName = ToQualifiedName("ElementOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ElementOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='ElementOperand']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8576");
        node.BrowseName = ToQualifiedName("LiteralOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("LiteralOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='LiteralOperand']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8579");
        node.BrowseName = ToQualifiedName("AttributeOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AttributeOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='AttributeOperand']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8582");
        node.BrowseName = ToQualifiedName("SimpleAttributeOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SimpleAttributeOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='SimpleAttributeOperand']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8639");
        node.BrowseName = ToQualifiedName("HistoryEvent");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryEvent");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='HistoryEvent']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8702");
        node.BrowseName = ToQualifiedName("MonitoringFilter");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MonitoringFilter");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='MonitoringFilter']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8708");
        node.BrowseName = ToQualifiedName("EventFilter");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EventFilter");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='EventFilter']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8711");
        node.BrowseName = ToQualifiedName("AggregateConfiguration");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AggregateConfiguration");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='AggregateConfiguration']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8807");
        node.BrowseName = ToQualifiedName("HistoryEventFieldList");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryEventFieldList");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='HistoryEventFieldList']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8384");
        node.BrowseName = ToQualifiedName("ScalarTestType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ScalarTestType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='ScalarTestType']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8387");
        node.BrowseName = ToQualifiedName("ArrayTestType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ArrayTestType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='ArrayTestType']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8390");
        node.BrowseName = ToQualifiedName("CompositeTestType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CompositeTestType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='CompositeTestType']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8327");
        node.BrowseName = ToQualifiedName("BuildInfo");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildInfo");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='BuildInfo']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8843");
        node.BrowseName = ToQualifiedName("RedundantServerDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RedundantServerDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='RedundantServerDataType']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11951");
        node.BrowseName = ToQualifiedName("EndpointUrlListDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointUrlListDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='EndpointUrlListDataType']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11954");
        node.BrowseName = ToQualifiedName("NetworkGroupDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("NetworkGroupDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='NetworkGroupDataType']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8846");
        node.BrowseName = ToQualifiedName("SamplingIntervalDiagnosticsDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SamplingIntervalDiagnosticsDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='SamplingIntervalDiagnosticsDataType']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8849");
        node.BrowseName = ToQualifiedName("ServerDiagnosticsSummaryDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerDiagnosticsSummaryDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='ServerDiagnosticsSummaryDataType']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8852");
        node.BrowseName = ToQualifiedName("ServerStatusDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerStatusDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='ServerStatusDataType']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8855");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionDiagnosticsDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='SessionDiagnosticsDataType']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8858");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnosticsDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnosticsDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='SessionSecurityDiagnosticsDataType']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8861");
        node.BrowseName = ToQualifiedName("ServiceCounterDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServiceCounterDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='ServiceCounterDataType']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8294");
        node.BrowseName = ToQualifiedName("StatusResult");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("StatusResult");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='StatusResult']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8864");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='SubscriptionDiagnosticsDataType']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8867");
        node.BrowseName = ToQualifiedName("ModelChangeStructureDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ModelChangeStructureDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='ModelChangeStructureDataType']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8870");
        node.BrowseName = ToQualifiedName("SemanticChangeStructureDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SemanticChangeStructureDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='SemanticChangeStructureDataType']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8873");
        node.BrowseName = ToQualifiedName("Range");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Range");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='Range']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8876");
        node.BrowseName = ToQualifiedName("EUInformation");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EUInformation");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='EUInformation']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12175");
        node.BrowseName = ToQualifiedName("ComplexNumberType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ComplexNumberType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='ComplexNumberType']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12178");
        node.BrowseName = ToQualifiedName("DoubleComplexNumberType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DoubleComplexNumberType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='DoubleComplexNumberType']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12083");
        node.BrowseName = ToQualifiedName("AxisInformation");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AxisInformation");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='AxisInformation']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12086");
        node.BrowseName = ToQualifiedName("XVType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("XVType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='XVType']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8882");
        node.BrowseName = ToQualifiedName("ProgramDiagnosticDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProgramDiagnosticDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='ProgramDiagnosticDataType']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8879");
        node.BrowseName = ToQualifiedName("Annotation");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=8252");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Annotation");
        attrs.Type = ObjectId::String;
        attrs.Value = +""//xs:element[@name='Annotation']"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=340");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=338");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=340");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7692");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=855");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=853");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=855");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8208");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11957");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=11943");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=11957");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11959");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11958");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=11944");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=11958");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11962");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=858");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=856");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=858");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8211");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=861");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=859");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=861");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8214");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=864");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=862");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=864");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8217");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=867");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=865");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=867");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8220");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=870");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=868");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=870");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8223");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=873");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=871");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=873");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8226");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=301");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=299");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=301");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7659");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=876");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=874");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=876");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8229");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=879");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=877");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=879");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8232");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=899");
        node.BrowseName = ToQualifiedName("Default Binary");
        node.Class = NodeClass::Object;
        node.ParentNodeId = ToNodeId("i=897");
        node.ReferenceTypeId = ReferenceId::HasEncoding;
        node.TypeDefinition = ToNodeId("i=76");
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("Default Binary");
        attrs.EventNotifier = 0;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasDescription;
        ref.SourceNodeId = ToNodeId("i=899");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8235");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7617");
        node.BrowseName = ToQualifiedName("Opc.Ua");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=93");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=72");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Opc.Ua");
        attrs.Type = ObjectId::ByteString;
        attrs.Value = +""PG9wYzpUeXBlRGljdGlvbmFyeQ0KICB4bWxuczpvcGM9Imh0dHA6Ly9vcGNmb3VuZGF0aW9uLm9y"
"Zy9CaW5hcnlTY2hlbWEvIg0KICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1M"
"U2NoZW1hLWluc3RhbmNlIg0KICB4bWxuczp1YT0iaHR0cDovL29wY2ZvdW5kYXRpb24ub3JnL1VB"
"LyINCiAgeG1sbnM6dG5zPSJodHRwOi8vb3BjZm91bmRhdGlvbi5vcmcvVUEvIg0KICBEZWZhdWx0"
"Qnl0ZU9yZGVyPSJMaXR0bGVFbmRpYW4iDQogIFRhcmdldE5hbWVzcGFjZT0iaHR0cDovL29wY2Zv"
"dW5kYXRpb24ub3JnL1VBLyINCj4NCiAgPCEtLSBUaGlzIEZpbGUgd2FzIGdlbmVyYXRlZCBvbiAy"
"MDEzLTAzLTA2IGFuZCBzdXBwb3J0cyB0aGUgc3BlY2lmaWNhdGlvbnMgc3VwcG9ydGVkIGJ5IHZl"
"cnNpb24gMS4xLjMzNC40IG9mIHRoZSBPUEMgVUEgZGVsaXZlcmFibGVzLiAtLT4NCg0KICA8b3Bj"
"OkltcG9ydCBOYW1lc3BhY2U9Imh0dHA6Ly9vcGNmb3VuZGF0aW9uLm9yZy9CaW5hcnlTY2hlbWEv"
"IiAvPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iWG1sRWxlbWVudCI+DQogICAgPG9w"
"YzpEb2N1bWVudGF0aW9uPkFuIFhNTCBlbGVtZW50IGVuY29kZWQgYXMgYSBVVEYtOCBzdHJpbmcu"
"PC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ikxlbmd0aCIgVHlwZU5h"
"bWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlZhbHVlIiBUeXBlTmFtZT0i"
"b3BjOkNoYXIiIExlbmd0aEZpZWxkPSJMZW5ndGgiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBl"
"Pg0KDQogIDxvcGM6RW51bWVyYXRlZFR5cGUgTmFtZT0iTm9kZUlkVHlwZSIgTGVuZ3RoSW5CaXRz"
"PSI2Ij4NCiAgICA8b3BjOkRvY3VtZW50YXRpb24+VGhlIHBvc3NpYmxlIGVuY29kaW5ncyBmb3Ig"
"YSBOb2RlSWQgdmFsdWUuPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8b3BjOkVudW1lcmF0ZWRW"
"YWx1ZSBOYW1lPSJUd29CeXRlIiBWYWx1ZT0iMCIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1"
"ZSBOYW1lPSJGb3VyQnl0ZSIgVmFsdWU9IjEiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUg"
"TmFtZT0iTnVtZXJpYyIgVmFsdWU9IjIiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFt"
"ZT0iU3RyaW5nIiBWYWx1ZT0iMyIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJH"
"dWlkIiBWYWx1ZT0iNCIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJCeXRlU3Ry"
"aW5nIiBWYWx1ZT0iNSIgLz4NCiAgPC9vcGM6RW51bWVyYXRlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1"
"Y3R1cmVkVHlwZSBOYW1lPSJUd29CeXRlTm9kZUlkIj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Iklk"
"ZW50aWZpZXIiIFR5cGVOYW1lPSJvcGM6Qnl0ZSIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+"
"DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJGb3VyQnl0ZU5vZGVJZCI+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJOYW1lc3BhY2VJbmRleCIgVHlwZU5hbWU9Im9wYzpCeXRlIiAvPg0KICAg"
"IDxvcGM6RmllbGQgTmFtZT0iSWRlbnRpZmllciIgVHlwZU5hbWU9Im9wYzpVSW50MTYiIC8+DQog"
"IDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iTnVt"
"ZXJpY05vZGVJZCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOYW1lc3BhY2VJbmRleCIgVHlwZU5h"
"bWU9Im9wYzpVSW50MTYiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJJZGVudGlmaWVyIiBUeXBl"
"TmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpT"
"dHJ1Y3R1cmVkVHlwZSBOYW1lPSJTdHJpbmdOb2RlSWQiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0i"
"TmFtZXNwYWNlSW5kZXgiIFR5cGVOYW1lPSJvcGM6VUludDE2IiAvPg0KICAgIDxvcGM6RmllbGQg"
"TmFtZT0iSWRlbnRpZmllciIgVHlwZU5hbWU9Im9wYzpDaGFyQXJyYXkiIC8+DQogIDwvb3BjOlN0"
"cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iR3VpZE5vZGVJZCI+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOYW1lc3BhY2VJbmRleCIgVHlwZU5hbWU9Im9wYzpVSW50"
"MTYiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJJZGVudGlmaWVyIiBUeXBlTmFtZT0ib3BjOkd1"
"aWQiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUg"
"TmFtZT0iQnl0ZVN0cmluZ05vZGVJZCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOYW1lc3BhY2VJ"
"bmRleCIgVHlwZU5hbWU9Im9wYzpVSW50MTYiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJJZGVu"
"dGlmaWVyIiBUeXBlTmFtZT0ib3BjOkJ5dGVTdHJpbmciIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRU"
"eXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iTm9kZUlkIj4NCiAgICA8b3BjOkRv"
"Y3VtZW50YXRpb24+QW4gaWRlbnRpZmllciBmb3IgYSBub2RlIGluIGEgVUEgc2VydmVyIGFkZHJl"
"c3Mgc3BhY2UuPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vZGVJ"
"ZFR5cGUiIFR5cGVOYW1lPSJ1YTpOb2RlSWRUeXBlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0i"
"UmVzZXJ2ZWQxIiBUeXBlTmFtZT0ib3BjOkJpdCIgTGVuZ3RoPSIyIiAvPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iVHdvQnl0ZSIgVHlwZU5hbWU9InVhOlR3b0J5dGVOb2RlSWQiIFN3aXRjaEZpZWxk"
"PSJOb2RlSWRUeXBlIiBTd2l0Y2hWYWx1ZT0iMCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkZv"
"dXJCeXRlIiBUeXBlTmFtZT0idWE6Rm91ckJ5dGVOb2RlSWQiIFN3aXRjaEZpZWxkPSJOb2RlSWRU"
"eXBlIiBTd2l0Y2hWYWx1ZT0iMSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik51bWVyaWMiIFR5"
"cGVOYW1lPSJ1YTpOdW1lcmljTm9kZUlkIiBTd2l0Y2hGaWVsZD0iTm9kZUlkVHlwZSIgU3dpdGNo"
"VmFsdWU9IjIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTdHJpbmciIFR5cGVOYW1lPSJ1YTpT"
"dHJpbmdOb2RlSWQiIFN3aXRjaEZpZWxkPSJOb2RlSWRUeXBlIiBTd2l0Y2hWYWx1ZT0iMyIgLz4N"
"CiAgICA8b3BjOkZpZWxkIE5hbWU9Ikd1aWQiIFR5cGVOYW1lPSJ1YTpHdWlkTm9kZUlkIiBTd2l0"
"Y2hGaWVsZD0iTm9kZUlkVHlwZSIgU3dpdGNoVmFsdWU9IjQiIC8+DQogICAgPG9wYzpGaWVsZCBO"
"YW1lPSJCeXRlU3RyaW5nIiBUeXBlTmFtZT0idWE6Qnl0ZVN0cmluZ05vZGVJZCIgU3dpdGNoRmll"
"bGQ9Ik5vZGVJZFR5cGUiIFN3aXRjaFZhbHVlPSI1IiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlw"
"ZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IkV4cGFuZGVkTm9kZUlkIj4NCiAgICA8"
"b3BjOkRvY3VtZW50YXRpb24+QW4gaWRlbnRpZmllciBmb3IgYSBub2RlIGluIGEgVUEgc2VydmVy"
"IGFkZHJlc3Mgc3BhY2UgcXVhbGlmaWVkIHdpdGggYSBjb21wbGV0ZSBuYW1lc3BhY2Ugc3RyaW5n"
"Ljwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb2RlSWRUeXBlIiBU"
"eXBlTmFtZT0idWE6Tm9kZUlkVHlwZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlNlcnZlcklu"
"ZGV4U3BlY2lmaWVkIiBUeXBlTmFtZT0ib3BjOkJpdCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9"
"Ik5hbWVzcGFjZVVSSVNwZWNpZmllZCIgVHlwZU5hbWU9Im9wYzpCaXQiIC8+DQogICAgPG9wYzpG"
"aWVsZCBOYW1lPSJUd29CeXRlIiBUeXBlTmFtZT0idWE6VHdvQnl0ZU5vZGVJZCIgU3dpdGNoRmll"
"bGQ9Ik5vZGVJZFR5cGUiIFN3aXRjaFZhbHVlPSIwIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0i"
"Rm91ckJ5dGUiIFR5cGVOYW1lPSJ1YTpGb3VyQnl0ZU5vZGVJZCIgU3dpdGNoRmllbGQ9Ik5vZGVJ"
"ZFR5cGUiIFN3aXRjaFZhbHVlPSIxIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTnVtZXJpYyIg"
"VHlwZU5hbWU9InVhOk51bWVyaWNOb2RlSWQiIFN3aXRjaEZpZWxkPSJOb2RlSWRUeXBlIiBTd2l0"
"Y2hWYWx1ZT0iMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlN0cmluZyIgVHlwZU5hbWU9InVh"
"OlN0cmluZ05vZGVJZCIgU3dpdGNoRmllbGQ9Ik5vZGVJZFR5cGUiIFN3aXRjaFZhbHVlPSIzIiAv"
"Pg0KICAgIDxvcGM6RmllbGQgTmFtZT0iR3VpZCIgVHlwZU5hbWU9InVhOkd1aWROb2RlSWQiIFN3"
"aXRjaEZpZWxkPSJOb2RlSWRUeXBlIiBTd2l0Y2hWYWx1ZT0iNCIgLz4NCiAgICA8b3BjOkZpZWxk"
"IE5hbWU9IkJ5dGVTdHJpbmciIFR5cGVOYW1lPSJ1YTpCeXRlU3RyaW5nTm9kZUlkIiBTd2l0Y2hG"
"aWVsZD0iTm9kZUlkVHlwZSIgU3dpdGNoVmFsdWU9IjUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1l"
"PSJOYW1lc3BhY2VVUkkiIFR5cGVOYW1lPSJvcGM6Q2hhckFycmF5IiBTd2l0Y2hGaWVsZD0iTmFt"
"ZXNwYWNlVVJJU3BlY2lmaWVkIi8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTZXJ2ZXJJbmRleCIg"
"VHlwZU5hbWU9Im9wYzpVSW50MzIiIFN3aXRjaEZpZWxkPSJTZXJ2ZXJJbmRleFNwZWNpZmllZCIv"
"Pg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOk9wYXF1ZVR5cGUgTmFtZT0iU3Rh"
"dHVzQ29kZSIgTGVuZ3RoSW5CaXRzPSIzMiIgQnl0ZU9yZGVyU2lnbmlmaWNhbnQ9InRydWUiPg0K"
"ICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5BIDMyLWJpdCBzdGF0dXMgY29kZSB2YWx1ZS48L29wYzpE"
"b2N1bWVudGF0aW9uPg0KICA8L29wYzpPcGFxdWVUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5"
"cGUgTmFtZT0iRGlhZ25vc3RpY0luZm8iPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5BIHJlY3Vy"
"c2l2ZSBzdHJ1Y3R1cmUgY29udGFpbmluZyBkaWFnbm9zdGljIGluZm9ybWF0aW9uIGFzc29jaWF0"
"ZWQgd2l0aCBhIHN0YXR1cyBjb2RlLjwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpGaWVs"
"ZCBOYW1lPSJTeW1ib2xpY0lkU3BlY2lmaWVkIiBUeXBlTmFtZT0ib3BjOkJpdCIgLz4NCiAgICA8"
"b3BjOkZpZWxkIE5hbWU9Ik5hbWVzcGFjZVVSSVNwZWNpZmllZCIgVHlwZU5hbWU9Im9wYzpCaXQi"
"IC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJMb2NhbGl6ZWRUZXh0U3BlY2lmaWVkIiBUeXBlTmFt"
"ZT0ib3BjOkJpdCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkxvY2FsZVNwZWNpZmllZCIgVHlw"
"ZU5hbWU9Im9wYzpCaXQiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJBZGRpdGlvbmFsSW5mb1Nw"
"ZWNpZmllZCIgVHlwZU5hbWU9Im9wYzpCaXQiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJJbm5l"
"clN0YXR1c0NvZGVTcGVjaWZpZWQiIFR5cGVOYW1lPSJvcGM6Qml0IiAvPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iSW5uZXJEaWFnbm9zdGljSW5mb1NwZWNpZmllZCIgVHlwZU5hbWU9Im9wYzpCaXQi"
"IC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXNlcnZlZDEiIFR5cGVOYW1lPSJvcGM6Qml0IiBM"
"ZW5ndGg9IjEiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTeW1ib2xpY0lkIiBUeXBlTmFtZT0i"
"b3BjOkludDMyIiBTd2l0Y2hGaWVsZD0iU3ltYm9saWNJZFNwZWNpZmllZCIgLz4NCiAgICA8b3Bj"
"OkZpZWxkIE5hbWU9Ik5hbWVzcGFjZVVSSSIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgU3dpdGNoRmll"
"bGQ9Ik5hbWVzcGFjZVVSSVNwZWNpZmllZCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkxvY2Fs"
"aXplZFRleHQiIFR5cGVOYW1lPSJvcGM6SW50MzIiIFN3aXRjaEZpZWxkPSJMb2NhbGl6ZWRUZXh0"
"U3BlY2lmaWVkIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iQWRkaXRpb25hbEluZm8iIFR5cGVO"
"YW1lPSJvcGM6Q2hhckFycmF5IiBTd2l0Y2hGaWVsZD0iQWRkaXRpb25hbEluZm9TcGVjaWZpZWQi"
"IC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJJbm5lclN0YXR1c0NvZGUiIFR5cGVOYW1lPSJ1YTpT"
"dGF0dXNDb2RlIiBTd2l0Y2hGaWVsZD0iSW5uZXJTdGF0dXNDb2RlU3BlY2lmaWVkIiAvPg0KICAg"
"IDxvcGM6RmllbGQgTmFtZT0iSW5uZXJEaWFnbm9zdGljSW5mbyIgVHlwZU5hbWU9InVhOkRpYWdu"
"b3N0aWNJbmZvIiBTd2l0Y2hGaWVsZD0iSW5uZXJEaWFnbm9zdGljSW5mb1NwZWNpZmllZCIgLz4N"
"CiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJR"
"dWFsaWZpZWROYW1lIj4NCiAgICA8b3BjOkRvY3VtZW50YXRpb24+QSBzdHJpbmcgcXVhbGlmaWVk"
"IHdpdGggYSBuYW1lc3BhY2UgaW5kZXguPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9Ik5hbWVzcGFjZUluZGV4IiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxv"
"cGM6RmllbGQgTmFtZT0iTmFtZSIgVHlwZU5hbWU9Im9wYzpDaGFyQXJyYXkiIC8+DQogIDwvb3Bj"
"OlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iTG9jYWxpemVk"
"VGV4dCI+DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPkEgc3RyaW5nIHF1YWxpZmllZCB3aXRoIGEg"
"bmFtZXNwYWNlIGluZGV4Ljwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpGaWVsZCBOYW1l"
"PSJMb2NhbGVTcGVjaWZpZWQiIFR5cGVOYW1lPSJvcGM6Qml0IiAvPg0KICAgIDxvcGM6RmllbGQg"
"TmFtZT0iVGV4dFNwZWNpZmllZCIgVHlwZU5hbWU9Im9wYzpCaXQiIC8+DQogICAgPG9wYzpGaWVs"
"ZCBOYW1lPSJSZXNlcnZlZDEiIFR5cGVOYW1lPSJvcGM6Qml0IiBMZW5ndGg9IjYiIC8+DQogICAg"
"PG9wYzpGaWVsZCBOYW1lPSJMb2NhbGUiIFR5cGVOYW1lPSJvcGM6Q2hhckFycmF5IiBTd2l0Y2hG"
"aWVsZD0iTG9jYWxlU3BlY2lmaWVkIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iVGV4dCIgVHlw"
"ZU5hbWU9Im9wYzpDaGFyQXJyYXkiIFN3aXRjaEZpZWxkPSJUZXh0U3BlY2lmaWVkIiAvPg0KICA8"
"L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IkRhdGFW"
"YWx1ZSI+DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPkEgdmFsdWUgd2l0aCBhbiBhc3NvY2lhdGVk"
"IHRpbWVzdGFtcCwgYW5kIHF1YWxpdHkuPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9IlZhbHVlU3BlY2lmaWVkIiBUeXBlTmFtZT0ib3BjOkJpdCIgLz4NCiAgICA8b3Bj"
"OkZpZWxkIE5hbWU9IlN0YXR1c0NvZGVTcGVjaWZpZWQiIFR5cGVOYW1lPSJvcGM6Qml0IiAvPg0K"
"ICAgIDxvcGM6RmllbGQgTmFtZT0iU291cmNlVGltZXN0YW1wU3BlY2lmaWVkIiBUeXBlTmFtZT0i"
"b3BjOkJpdCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlNvdXJjZVBpY29zZWNvbmRzU3BlY2lm"
"aWVkIiBUeXBlTmFtZT0ib3BjOkJpdCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlNlcnZlclRp"
"bWVzdGFtcFNwZWNpZmllZCIgVHlwZU5hbWU9Im9wYzpCaXQiIC8+DQogICAgPG9wYzpGaWVsZCBO"
"YW1lPSJTZXJ2ZXJQaWNvc2Vjb25kc1NwZWNpZmllZCIgVHlwZU5hbWU9Im9wYzpCaXQiIC8+DQog"
"ICAgPG9wYzpGaWVsZCBOYW1lPSJSZXNlcnZlZDEiIFR5cGVOYW1lPSJvcGM6Qml0IiBMZW5ndGg9"
"IjIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJWYWx1ZSIgVHlwZU5hbWU9InVhOlZhcmlhbnQi"
"IFN3aXRjaEZpZWxkPSJWYWx1ZVNwZWNpZmllZCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlN0"
"YXR1c0NvZGUiIFR5cGVOYW1lPSJ1YTpTdGF0dXNDb2RlIiBTd2l0Y2hGaWVsZD0iU3RhdHVzQ29k"
"ZVNwZWNpZmllZCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlNvdXJjZVRpbWVzdGFtcCIgVHlw"
"ZU5hbWU9Im9wYzpEYXRlVGltZSIgU3dpdGNoRmllbGQ9IlNvdXJjZVRpbWVzdGFtcFNwZWNpZmll"
"ZCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlNvdXJjZVBpY29zZWNvbmRzIiBUeXBlTmFtZT0i"
"b3BjOlVJbnQxNiIgU3dpdGNoRmllbGQ9IlNvdXJjZVBpY29zZWNvbmRzU3BlY2lmaWVkIiAvPg0K"
"ICAgIDxvcGM6RmllbGQgTmFtZT0iU2VydmVyVGltZXN0YW1wIiBUeXBlTmFtZT0ib3BjOkRhdGVU"
"aW1lIiBTd2l0Y2hGaWVsZD0iU2VydmVyVGltZXN0YW1wU3BlY2lmaWVkIiAvPg0KICAgIDxvcGM6"
"RmllbGQgTmFtZT0iU2VydmVyUGljb3NlY29uZHMiIFR5cGVOYW1lPSJvcGM6VUludDE2IiBTd2l0"
"Y2hGaWVsZD0iU2VydmVyUGljb3NlY29uZHNTcGVjaWZpZWQiIC8+DQogIDwvb3BjOlN0cnVjdHVy"
"ZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iRXh0ZW5zaW9uT2JqZWN0Ij4N"
"CiAgICA8b3BjOkRvY3VtZW50YXRpb24+QSBzZXJpYWxpemVkIG9iamVjdCBwcmVmaXhlZCB3aXRo"
"IGl0cyBkYXRhIHR5cGUgaWRlbnRpZmllci48L29wYzpEb2N1bWVudGF0aW9uPg0KICAgIDxvcGM6"
"RmllbGQgTmFtZT0iVHlwZUlkU3BlY2lmaWVkIiBUeXBlTmFtZT0ib3BjOkJpdCIgLz4NCiAgICA8"
"b3BjOkZpZWxkIE5hbWU9IkJpbmFyeUJvZHkiIFR5cGVOYW1lPSJvcGM6Qml0IiAvPg0KICAgIDxv"
"cGM6RmllbGQgTmFtZT0iWG1sQm9keSIgVHlwZU5hbWU9Im9wYzpCaXQiIC8+DQogICAgPG9wYzpG"
"aWVsZCBOYW1lPSJSZXNlcnZlZDEiIFR5cGVOYW1lPSJvcGM6Qml0IiBMZW5ndGg9IjUiIC8+DQog"
"ICAgPG9wYzpGaWVsZCBOYW1lPSJUeXBlSWQiIFR5cGVOYW1lPSJ1YTpFeHBhbmRlZE5vZGVJZCIg"
"U3dpdGNoRmllbGQ9IlR5cGVJZFNwZWNpZmllZCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkJv"
"ZHlMZW5ndGgiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJC"
"b2R5IiBUeXBlTmFtZT0ib3BjOkJ5dGUiIExlbmd0aEZpZWxkPSJCb2R5TGVuZ3RoIiAvPg0KICA8"
"L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IlZhcmlh"
"bnQiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5BIHVuaW9uIG9mIHNldmVyYWwgdHlwZXMuPC9v"
"cGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlZhcmlhbnRUeXBlIiBUeXBl"
"TmFtZT0ib3BjOkJpdCIgTGVuZ3RoPSI3IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iQXJyYXlM"
"ZW5ndGhTcGVjaWZpZWQiIFR5cGVOYW1lPSJvcGM6Qml0IiBMZW5ndGg9IjEiLz4NCiAgICA8b3Bj"
"OkZpZWxkIE5hbWU9IkFycmF5TGVuZ3RoIiBUeXBlTmFtZT0ib3BjOkludDMyIiBTd2l0Y2hGaWVs"
"ZD0iQXJyYXlMZW5ndGhTcGVjaWZpZWQiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJCb29sZWFu"
"IiBUeXBlTmFtZT0ib3BjOkJvb2xlYW4iIExlbmd0aEZpZWxkPSJBcnJheUxlbmd0aCIgU3dpdGNo"
"RmllbGQ9IlZhcmlhbnRUeXBlIiBTd2l0Y2hWYWx1ZT0iMSIgLz4NCiAgICA8b3BjOkZpZWxkIE5h"
"bWU9IlNCeXRlIiBUeXBlTmFtZT0ib3BjOlNCeXRlIiBMZW5ndGhGaWVsZD0iQXJyYXlMZW5ndGgi"
"IFN3aXRjaEZpZWxkPSJWYXJpYW50VHlwZSIgU3dpdGNoVmFsdWU9IjIiIC8+DQogICAgPG9wYzpG"
"aWVsZCBOYW1lPSJCeXRlIiBUeXBlTmFtZT0ib3BjOkJ5dGUiIExlbmd0aEZpZWxkPSJBcnJheUxl"
"bmd0aCIgU3dpdGNoRmllbGQ9IlZhcmlhbnRUeXBlIiBTd2l0Y2hWYWx1ZT0iMyIgLz4NCiAgICA8"
"b3BjOkZpZWxkIE5hbWU9IkludDE2IiBUeXBlTmFtZT0ib3BjOkludDE2IiBMZW5ndGhGaWVsZD0i"
"QXJyYXlMZW5ndGgiIFN3aXRjaEZpZWxkPSJWYXJpYW50VHlwZSIgU3dpdGNoVmFsdWU9IjQiIC8+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJVSW50MTYiIFR5cGVOYW1lPSJvcGM6VUludDE2IiBMZW5n"
"dGhGaWVsZD0iQXJyYXlMZW5ndGgiIFN3aXRjaEZpZWxkPSJWYXJpYW50VHlwZSIgU3dpdGNoVmFs"
"dWU9IjUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJJbnQzMiIgVHlwZU5hbWU9Im9wYzpJbnQz"
"MiIgTGVuZ3RoRmllbGQ9IkFycmF5TGVuZ3RoIiBTd2l0Y2hGaWVsZD0iVmFyaWFudFR5cGUiIFN3"
"aXRjaFZhbHVlPSI2IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iVUludDMyIiBUeXBlTmFtZT0i"
"b3BjOlVJbnQzMiIgTGVuZ3RoRmllbGQ9IkFycmF5TGVuZ3RoIiBTd2l0Y2hGaWVsZD0iVmFyaWFu"
"dFR5cGUiIFN3aXRjaFZhbHVlPSI3IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iSW50NjQiIFR5"
"cGVOYW1lPSJvcGM6SW50NjQiIExlbmd0aEZpZWxkPSJBcnJheUxlbmd0aCIgU3dpdGNoRmllbGQ9"
"IlZhcmlhbnRUeXBlIiBTd2l0Y2hWYWx1ZT0iOCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlVJ"
"bnQ2NCIgVHlwZU5hbWU9Im9wYzpVSW50NjQiIExlbmd0aEZpZWxkPSJBcnJheUxlbmd0aCIgU3dp"
"dGNoRmllbGQ9IlZhcmlhbnRUeXBlIiBTd2l0Y2hWYWx1ZT0iOSIgLz4NCiAgICA8b3BjOkZpZWxk"
"IE5hbWU9IkZsb2F0IiBUeXBlTmFtZT0ib3BjOkZsb2F0IiBMZW5ndGhGaWVsZD0iQXJyYXlMZW5n"
"dGgiIFN3aXRjaEZpZWxkPSJWYXJpYW50VHlwZSIgU3dpdGNoVmFsdWU9IjEwIiAvPg0KICAgIDxv"
"cGM6RmllbGQgTmFtZT0iRG91YmxlIiBUeXBlTmFtZT0ib3BjOkRvdWJsZSIgTGVuZ3RoRmllbGQ9"
"IkFycmF5TGVuZ3RoIiBTd2l0Y2hGaWVsZD0iVmFyaWFudFR5cGUiIFN3aXRjaFZhbHVlPSIxMSIg"
"Lz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlN0cmluZyIgVHlwZU5hbWU9Im9wYzpTdHJpbmciIExl"
"bmd0aEZpZWxkPSJBcnJheUxlbmd0aCIgU3dpdGNoRmllbGQ9IlZhcmlhbnRUeXBlIiBTd2l0Y2hW"
"YWx1ZT0iMTIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJEYXRlVGltZSIgVHlwZU5hbWU9Im9w"
"YzpEYXRlVGltZSIgTGVuZ3RoRmllbGQ9IkFycmF5TGVuZ3RoIiBTd2l0Y2hGaWVsZD0iVmFyaWFu"
"dFR5cGUiIFN3aXRjaFZhbHVlPSIxMyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ikd1aWQiIFR5"
"cGVOYW1lPSJvcGM6R3VpZCIgTGVuZ3RoRmllbGQ9IkFycmF5TGVuZ3RoIiBTd2l0Y2hGaWVsZD0i"
"VmFyaWFudFR5cGUiIFN3aXRjaFZhbHVlPSIxNCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkJ5"
"dGVTdHJpbmciIFR5cGVOYW1lPSJvcGM6Qnl0ZVN0cmluZyIgTGVuZ3RoRmllbGQ9IkFycmF5TGVu"
"Z3RoIiBTd2l0Y2hGaWVsZD0iVmFyaWFudFR5cGUiIFN3aXRjaFZhbHVlPSIxNSIgLz4NCiAgICA8"
"b3BjOkZpZWxkIE5hbWU9IlhtbEVsZW1lbnQiIFR5cGVOYW1lPSJ1YTpYbWxFbGVtZW50IiBMZW5n"
"dGhGaWVsZD0iQXJyYXlMZW5ndGgiIFN3aXRjaEZpZWxkPSJWYXJpYW50VHlwZSIgU3dpdGNoVmFs"
"dWU9IjE2IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9kZUlkIiBUeXBlTmFtZT0idWE6Tm9k"
"ZUlkIiBMZW5ndGhGaWVsZD0iQXJyYXlMZW5ndGgiIFN3aXRjaEZpZWxkPSJWYXJpYW50VHlwZSIg"
"U3dpdGNoVmFsdWU9IjE3IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRXhwYW5kZWROb2RlSWQi"
"IFR5cGVOYW1lPSJ1YTpFeHBhbmRlZE5vZGVJZCIgTGVuZ3RoRmllbGQ9IkFycmF5TGVuZ3RoIiBT"
"d2l0Y2hGaWVsZD0iVmFyaWFudFR5cGUiIFN3aXRjaFZhbHVlPSIxOCIgLz4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9IlN0YXR1c0NvZGUiIFR5cGVOYW1lPSJ1YTpTdGF0dXNDb2RlIiBMZW5ndGhGaWVs"
"ZD0iQXJyYXlMZW5ndGgiIFN3aXRjaEZpZWxkPSJWYXJpYW50VHlwZSIgU3dpdGNoVmFsdWU9IjE5"
"IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRGlhZ25vc3RpY0luZm8iIFR5cGVOYW1lPSJ1YTpE"
"aWFnbm9zdGljSW5mbyIgTGVuZ3RoRmllbGQ9IkFycmF5TGVuZ3RoIiBTd2l0Y2hGaWVsZD0iVmFy"
"aWFudFR5cGUiIFN3aXRjaFZhbHVlPSIyMCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlF1YWxp"
"ZmllZE5hbWUiIFR5cGVOYW1lPSJ1YTpRdWFsaWZpZWROYW1lIiBMZW5ndGhGaWVsZD0iQXJyYXlM"
"ZW5ndGgiIFN3aXRjaEZpZWxkPSJWYXJpYW50VHlwZSIgU3dpdGNoVmFsdWU9IjIxIiAvPg0KICAg"
"IDxvcGM6RmllbGQgTmFtZT0iTG9jYWxpemVkVGV4dCIgVHlwZU5hbWU9InVhOkxvY2FsaXplZFRl"
"eHQiIExlbmd0aEZpZWxkPSJBcnJheUxlbmd0aCIgU3dpdGNoRmllbGQ9IlZhcmlhbnRUeXBlIiBT"
"d2l0Y2hWYWx1ZT0iMjIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJFeHRlbnNpb25PYmplY3Qi"
"IFR5cGVOYW1lPSJ1YTpFeHRlbnNpb25PYmplY3QiIExlbmd0aEZpZWxkPSJBcnJheUxlbmd0aCIg"
"U3dpdGNoRmllbGQ9IlZhcmlhbnRUeXBlIiBTd2l0Y2hWYWx1ZT0iMjMiIC8+DQogICAgPG9wYzpG"
"aWVsZCBOYW1lPSJEYXRhVmFsdWUiIFR5cGVOYW1lPSJ1YTpEYXRhVmFsdWUiIExlbmd0aEZpZWxk"
"PSJBcnJheUxlbmd0aCIgU3dpdGNoRmllbGQ9IlZhcmlhbnRUeXBlIiBTd2l0Y2hWYWx1ZT0iMjQi"
"IC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJWYXJpYW50IiBUeXBlTmFtZT0idWE6VmFyaWFudCIg"
"TGVuZ3RoRmllbGQ9IkFycmF5TGVuZ3RoIiBTd2l0Y2hGaWVsZD0iVmFyaWFudFR5cGUiIFN3aXRj"
"aFZhbHVlPSIyNSIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpPcGFxdWVU"
"eXBlIE5hbWU9IkltYWdlQk1QIj4NCiAgICA8b3BjOkRvY3VtZW50YXRpb24+QW4gaW1hZ2UgZW5j"
"b2RlZCBpbiBCTVAgZm9ybWF0Ljwvb3BjOkRvY3VtZW50YXRpb24+DQogIDwvb3BjOk9wYXF1ZVR5"
"cGU+DQoNCiAgPG9wYzpPcGFxdWVUeXBlIE5hbWU9IkltYWdlR0lGIj4NCiAgICA8b3BjOkRvY3Vt"
"ZW50YXRpb24+QW4gaW1hZ2UgZW5jb2RlZCBpbiBHSUYgZm9ybWF0Ljwvb3BjOkRvY3VtZW50YXRp"
"b24+DQogIDwvb3BjOk9wYXF1ZVR5cGU+DQoNCiAgPG9wYzpPcGFxdWVUeXBlIE5hbWU9IkltYWdl"
"SlBHIj4NCiAgICA8b3BjOkRvY3VtZW50YXRpb24+QW4gaW1hZ2UgZW5jb2RlZCBpbiBKUEVHIGZv"
"cm1hdC48L29wYzpEb2N1bWVudGF0aW9uPg0KICA8L29wYzpPcGFxdWVUeXBlPg0KDQogIDxvcGM6"
"T3BhcXVlVHlwZSBOYW1lPSJJbWFnZVBORyI+DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPkFuIGlt"
"YWdlIGVuY29kZWQgaW4gUE5HIGZvcm1hdC48L29wYzpEb2N1bWVudGF0aW9uPg0KICA8L29wYzpP"
"cGFxdWVUeXBlPg0KDQogIDxvcGM6T3BhcXVlVHlwZSBOYW1lPSJCaXRGaWVsZE1hc2tEYXRhVHlw"
"ZSI+DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPkEgbWFzayBvZiAzMiBiaXRzIHRoYXQgY2FuIGJl"
"IHVwZGF0ZWQgaW5kaXZpZHVhbGx5IGJ5IHVzaW5nIHRoZSB0b3AgMzIgYml0cyBhcyBhIG1hc2su"
"PC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgPC9vcGM6T3BhcXVlVHlwZT4NCg0KICA8b3BjOkVudW1l"
"cmF0ZWRUeXBlIE5hbWU9Ik9wZW5GaWxlTW9kZSIgTGVuZ3RoSW5CaXRzPSIzMiI+DQogICAgPG9w"
"YzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iUmVhZCIgVmFsdWU9IjEiIC8+DQogICAgPG9wYzpFbnVt"
"ZXJhdGVkVmFsdWUgTmFtZT0iV3JpdGUiIFZhbHVlPSIyIiAvPg0KICAgIDxvcGM6RW51bWVyYXRl"
"ZFZhbHVlIE5hbWU9IkVyYXNlRXhpc2l0aW5nIiBWYWx1ZT0iNCIgLz4NCiAgICA8b3BjOkVudW1l"
"cmF0ZWRWYWx1ZSBOYW1lPSJBcHBlbmQiIFZhbHVlPSI4IiAvPg0KICA8L29wYzpFbnVtZXJhdGVk"
"VHlwZT4NCg0KICA8b3BjOkVudW1lcmF0ZWRUeXBlIE5hbWU9IklkVHlwZSIgTGVuZ3RoSW5CaXRz"
"PSIzMiI+DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPlRoZSB0eXBlIG9mIGlkZW50aWZpZXIgdXNl"
"ZCBpbiBhIG5vZGUgaWQuPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8b3BjOkVudW1lcmF0ZWRW"
"YWx1ZSBOYW1lPSJOdW1lcmljIiBWYWx1ZT0iMCIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1"
"ZSBOYW1lPSJTdHJpbmciIFZhbHVlPSIxIiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5h"
"bWU9Ikd1aWQiIFZhbHVlPSIyIiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9Ik9w"
"YXF1ZSIgVmFsdWU9IjMiIC8+DQogIDwvb3BjOkVudW1lcmF0ZWRUeXBlPg0KDQogIDxvcGM6RW51"
"bWVyYXRlZFR5cGUgTmFtZT0iTm9kZUNsYXNzIiBMZW5ndGhJbkJpdHM9IjMyIj4NCiAgICA8b3Bj"
"OkRvY3VtZW50YXRpb24+QSBtYXNrIHNwZWNpZnlpbmcgdGhlIGNsYXNzIG9mIHRoZSBub2RlLjwv"
"b3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iVW5zcGVj"
"aWZpZWQiIFZhbHVlPSIwIiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9Ik9iamVj"
"dCIgVmFsdWU9IjEiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iVmFyaWFibGUi"
"IFZhbHVlPSIyIiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9Ik1ldGhvZCIgVmFs"
"dWU9IjQiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iT2JqZWN0VHlwZSIgVmFs"
"dWU9IjgiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iVmFyaWFibGVUeXBlIiBW"
"YWx1ZT0iMTYiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iUmVmZXJlbmNlVHlw"
"ZSIgVmFsdWU9IjMyIiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IkRhdGFUeXBl"
"IiBWYWx1ZT0iNjQiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iVmlldyIgVmFs"
"dWU9IjEyOCIgLz4NCiAgPC9vcGM6RW51bWVyYXRlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVk"
"VHlwZSBOYW1lPSJOb2RlIiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3Bj"
"OkRvY3VtZW50YXRpb24+U3BlY2lmaWVzIHRoZSBhdHRyaWJ1dGVzIHdoaWNoIGJlbG9uZyB0byBh"
"bGwgbm9kZXMuPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vZGVJ"
"ZCIgVHlwZU5hbWU9InVhOk5vZGVJZCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vZGVDbGFz"
"cyIgVHlwZU5hbWU9InRuczpOb2RlQ2xhc3MiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJCcm93"
"c2VOYW1lIiBUeXBlTmFtZT0idWE6UXVhbGlmaWVkTmFtZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5h"
"bWU9IkRpc3BsYXlOYW1lIiBUeXBlTmFtZT0idWE6TG9jYWxpemVkVGV4dCIgLz4NCiAgICA8b3Bj"
"OkZpZWxkIE5hbWU9IkRlc2NyaXB0aW9uIiBUeXBlTmFtZT0idWE6TG9jYWxpemVkVGV4dCIgLz4N"
"CiAgICA8b3BjOkZpZWxkIE5hbWU9IldyaXRlTWFzayIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIC8+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJVc2VyV3JpdGVNYXNrIiBUeXBlTmFtZT0ib3BjOlVJbnQz"
"MiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZSZWZlcmVuY2VzIiBUeXBlTmFtZT0ib3Bj"
"OkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVmZXJlbmNlcyIgVHlwZU5hbWU9InRu"
"czpSZWZlcmVuY2VOb2RlIiBMZW5ndGhGaWVsZD0iTm9PZlJlZmVyZW5jZXMiIC8+DQogIDwvb3Bj"
"OlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iSW5zdGFuY2VO"
"b2RlIiBCYXNlVHlwZT0idG5zOk5vZGUiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9kZUlkIiBU"
"eXBlTmFtZT0idWE6Tm9kZUlkIiBTb3VyY2VUeXBlPSJ0bnM6Tm9kZSIgLz4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9Ik5vZGVDbGFzcyIgVHlwZU5hbWU9InRuczpOb2RlQ2xhc3MiIFNvdXJjZVR5cGU9"
"InRuczpOb2RlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iQnJvd3NlTmFtZSIgVHlwZU5hbWU9"
"InVhOlF1YWxpZmllZE5hbWUiIFNvdXJjZVR5cGU9InRuczpOb2RlIiAvPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iRGlzcGxheU5hbWUiIFR5cGVOYW1lPSJ1YTpMb2NhbGl6ZWRUZXh0IiBTb3VyY2VU"
"eXBlPSJ0bnM6Tm9kZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkRlc2NyaXB0aW9uIiBUeXBl"
"TmFtZT0idWE6TG9jYWxpemVkVGV4dCIgU291cmNlVHlwZT0idG5zOk5vZGUiIC8+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJXcml0ZU1hc2siIFR5cGVOYW1lPSJvcGM6VUludDMyIiBTb3VyY2VUeXBl"
"PSJ0bnM6Tm9kZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlVzZXJXcml0ZU1hc2siIFR5cGVO"
"YW1lPSJvcGM6VUludDMyIiBTb3VyY2VUeXBlPSJ0bnM6Tm9kZSIgLz4NCiAgICA8b3BjOkZpZWxk"
"IE5hbWU9Ik5vT2ZSZWZlcmVuY2VzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6"
"RmllbGQgTmFtZT0iUmVmZXJlbmNlcyIgVHlwZU5hbWU9InRuczpSZWZlcmVuY2VOb2RlIiBMZW5n"
"dGhGaWVsZD0iTm9PZlJlZmVyZW5jZXMiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQog"
"IDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iVHlwZU5vZGUiIEJhc2VUeXBlPSJ0bnM6Tm9kZSI+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb2RlSWQiIFR5cGVOYW1lPSJ1YTpOb2RlSWQiIFNvdXJj"
"ZVR5cGU9InRuczpOb2RlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9kZUNsYXNzIiBUeXBl"
"TmFtZT0idG5zOk5vZGVDbGFzcyIgU291cmNlVHlwZT0idG5zOk5vZGUiIC8+DQogICAgPG9wYzpG"
"aWVsZCBOYW1lPSJCcm93c2VOYW1lIiBUeXBlTmFtZT0idWE6UXVhbGlmaWVkTmFtZSIgU291cmNl"
"VHlwZT0idG5zOk5vZGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJEaXNwbGF5TmFtZSIgVHlw"
"ZU5hbWU9InVhOkxvY2FsaXplZFRleHQiIFNvdXJjZVR5cGU9InRuczpOb2RlIiAvPg0KICAgIDxv"
"cGM6RmllbGQgTmFtZT0iRGVzY3JpcHRpb24iIFR5cGVOYW1lPSJ1YTpMb2NhbGl6ZWRUZXh0IiBT"
"b3VyY2VUeXBlPSJ0bnM6Tm9kZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IldyaXRlTWFzayIg"
"VHlwZU5hbWU9Im9wYzpVSW50MzIiIFNvdXJjZVR5cGU9InRuczpOb2RlIiAvPg0KICAgIDxvcGM6"
"RmllbGQgTmFtZT0iVXNlcldyaXRlTWFzayIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIFNvdXJjZVR5"
"cGU9InRuczpOb2RlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZlJlZmVyZW5jZXMiIFR5"
"cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZWZlcmVuY2VzIiBU"
"eXBlTmFtZT0idG5zOlJlZmVyZW5jZU5vZGUiIExlbmd0aEZpZWxkPSJOb09mUmVmZXJlbmNlcyIg"
"Lz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1l"
"PSJPYmplY3ROb2RlIiBCYXNlVHlwZT0idG5zOkluc3RhbmNlTm9kZSI+DQogICAgPG9wYzpEb2N1"
"bWVudGF0aW9uPlNwZWNpZmllcyB0aGUgYXR0cmlidXRlcyB3aGljaCBiZWxvbmcgdG8gb2JqZWN0"
"IG5vZGVzLjwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb2RlSWQi"
"IFR5cGVOYW1lPSJ1YTpOb2RlSWQiIFNvdXJjZVR5cGU9InRuczpOb2RlIiAvPg0KICAgIDxvcGM6"
"RmllbGQgTmFtZT0iTm9kZUNsYXNzIiBUeXBlTmFtZT0idG5zOk5vZGVDbGFzcyIgU291cmNlVHlw"
"ZT0idG5zOk5vZGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJCcm93c2VOYW1lIiBUeXBlTmFt"
"ZT0idWE6UXVhbGlmaWVkTmFtZSIgU291cmNlVHlwZT0idG5zOk5vZGUiIC8+DQogICAgPG9wYzpG"
"aWVsZCBOYW1lPSJEaXNwbGF5TmFtZSIgVHlwZU5hbWU9InVhOkxvY2FsaXplZFRleHQiIFNvdXJj"
"ZVR5cGU9InRuczpOb2RlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRGVzY3JpcHRpb24iIFR5"
"cGVOYW1lPSJ1YTpMb2NhbGl6ZWRUZXh0IiBTb3VyY2VUeXBlPSJ0bnM6Tm9kZSIgLz4NCiAgICA8"
"b3BjOkZpZWxkIE5hbWU9IldyaXRlTWFzayIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIFNvdXJjZVR5"
"cGU9InRuczpOb2RlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iVXNlcldyaXRlTWFzayIgVHlw"
"ZU5hbWU9Im9wYzpVSW50MzIiIFNvdXJjZVR5cGU9InRuczpOb2RlIiAvPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iTm9PZlJlZmVyZW5jZXMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJSZWZlcmVuY2VzIiBUeXBlTmFtZT0idG5zOlJlZmVyZW5jZU5vZGUiIExl"
"bmd0aEZpZWxkPSJOb09mUmVmZXJlbmNlcyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkV2ZW50"
"Tm90aWZpZXIiIFR5cGVOYW1lPSJvcGM6Qnl0ZSIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+"
"DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJPYmplY3RUeXBlTm9kZSIgQmFzZVR5cGU9"
"InRuczpUeXBlTm9kZSI+DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPlNwZWNpZmllcyB0aGUgYXR0"
"cmlidXRlcyB3aGljaCBiZWxvbmcgdG8gb2JqZWN0IHR5cGUgbm9kZXMuPC9vcGM6RG9jdW1lbnRh"
"dGlvbj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vZGVJZCIgVHlwZU5hbWU9InVhOk5vZGVJZCIg"
"U291cmNlVHlwZT0idG5zOk5vZGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb2RlQ2xhc3Mi"
"IFR5cGVOYW1lPSJ0bnM6Tm9kZUNsYXNzIiBTb3VyY2VUeXBlPSJ0bnM6Tm9kZSIgLz4NCiAgICA8"
"b3BjOkZpZWxkIE5hbWU9IkJyb3dzZU5hbWUiIFR5cGVOYW1lPSJ1YTpRdWFsaWZpZWROYW1lIiBT"
"b3VyY2VUeXBlPSJ0bnM6Tm9kZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkRpc3BsYXlOYW1l"
"IiBUeXBlTmFtZT0idWE6TG9jYWxpemVkVGV4dCIgU291cmNlVHlwZT0idG5zOk5vZGUiIC8+DQog"
"ICAgPG9wYzpGaWVsZCBOYW1lPSJEZXNjcmlwdGlvbiIgVHlwZU5hbWU9InVhOkxvY2FsaXplZFRl"
"eHQiIFNvdXJjZVR5cGU9InRuczpOb2RlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iV3JpdGVN"
"YXNrIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgU291cmNlVHlwZT0idG5zOk5vZGUiIC8+DQogICAg"
"PG9wYzpGaWVsZCBOYW1lPSJVc2VyV3JpdGVNYXNrIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgU291"
"cmNlVHlwZT0idG5zOk5vZGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mUmVmZXJlbmNl"
"cyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlZmVyZW5j"
"ZXMiIFR5cGVOYW1lPSJ0bnM6UmVmZXJlbmNlTm9kZSIgTGVuZ3RoRmllbGQ9Ik5vT2ZSZWZlcmVu"
"Y2VzIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iSXNBYnN0cmFjdCIgVHlwZU5hbWU9Im9wYzpC"
"b29sZWFuIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRU"
"eXBlIE5hbWU9IlZhcmlhYmxlTm9kZSIgQmFzZVR5cGU9InRuczpJbnN0YW5jZU5vZGUiPg0KICAg"
"IDxvcGM6RG9jdW1lbnRhdGlvbj5TcGVjaWZpZXMgdGhlIGF0dHJpYnV0ZXMgd2hpY2ggYmVsb25n"
"IHRvIHZhcmlhYmxlIG5vZGVzLjwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpGaWVsZCBO"
"YW1lPSJOb2RlSWQiIFR5cGVOYW1lPSJ1YTpOb2RlSWQiIFNvdXJjZVR5cGU9InRuczpOb2RlIiAv"
"Pg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9kZUNsYXNzIiBUeXBlTmFtZT0idG5zOk5vZGVDbGFz"
"cyIgU291cmNlVHlwZT0idG5zOk5vZGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJCcm93c2VO"
"YW1lIiBUeXBlTmFtZT0idWE6UXVhbGlmaWVkTmFtZSIgU291cmNlVHlwZT0idG5zOk5vZGUiIC8+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJEaXNwbGF5TmFtZSIgVHlwZU5hbWU9InVhOkxvY2FsaXpl"
"ZFRleHQiIFNvdXJjZVR5cGU9InRuczpOb2RlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRGVz"
"Y3JpcHRpb24iIFR5cGVOYW1lPSJ1YTpMb2NhbGl6ZWRUZXh0IiBTb3VyY2VUeXBlPSJ0bnM6Tm9k"
"ZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IldyaXRlTWFzayIgVHlwZU5hbWU9Im9wYzpVSW50"
"MzIiIFNvdXJjZVR5cGU9InRuczpOb2RlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iVXNlcldy"
"aXRlTWFzayIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIFNvdXJjZVR5cGU9InRuczpOb2RlIiAvPg0K"
"ICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZlJlZmVyZW5jZXMiIFR5cGVOYW1lPSJvcGM6SW50MzIi"
"IC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZWZlcmVuY2VzIiBUeXBlTmFtZT0idG5zOlJlZmVy"
"ZW5jZU5vZGUiIExlbmd0aEZpZWxkPSJOb09mUmVmZXJlbmNlcyIgLz4NCiAgICA8b3BjOkZpZWxk"
"IE5hbWU9IlZhbHVlIiBUeXBlTmFtZT0idWE6VmFyaWFudCIgLz4NCiAgICA8b3BjOkZpZWxkIE5h"
"bWU9IkRhdGFUeXBlIiBUeXBlTmFtZT0idWE6Tm9kZUlkIiAvPg0KICAgIDxvcGM6RmllbGQgTmFt"
"ZT0iVmFsdWVSYW5rIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFt"
"ZT0iTm9PZkFycmF5RGltZW5zaW9ucyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3Bj"
"OkZpZWxkIE5hbWU9IkFycmF5RGltZW5zaW9ucyIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIExlbmd0"
"aEZpZWxkPSJOb09mQXJyYXlEaW1lbnNpb25zIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iQWNj"
"ZXNzTGV2ZWwiIFR5cGVOYW1lPSJvcGM6Qnl0ZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlVz"
"ZXJBY2Nlc3NMZXZlbCIgVHlwZU5hbWU9Im9wYzpCeXRlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFt"
"ZT0iTWluaW11bVNhbXBsaW5nSW50ZXJ2YWwiIFR5cGVOYW1lPSJvcGM6RG91YmxlIiAvPg0KICAg"
"IDxvcGM6RmllbGQgTmFtZT0iSGlzdG9yaXppbmciIFR5cGVOYW1lPSJvcGM6Qm9vbGVhbiIgLz4N"
"CiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJW"
"YXJpYWJsZVR5cGVOb2RlIiBCYXNlVHlwZT0idG5zOlR5cGVOb2RlIj4NCiAgICA8b3BjOkRvY3Vt"
"ZW50YXRpb24+U3BlY2lmaWVzIHRoZSBhdHRyaWJ1dGVzIHdoaWNoIGJlbG9uZyB0byB2YXJpYWJs"
"ZSB0eXBlIG5vZGVzLjwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJO"
"b2RlSWQiIFR5cGVOYW1lPSJ1YTpOb2RlSWQiIFNvdXJjZVR5cGU9InRuczpOb2RlIiAvPg0KICAg"
"IDxvcGM6RmllbGQgTmFtZT0iTm9kZUNsYXNzIiBUeXBlTmFtZT0idG5zOk5vZGVDbGFzcyIgU291"
"cmNlVHlwZT0idG5zOk5vZGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJCcm93c2VOYW1lIiBU"
"eXBlTmFtZT0idWE6UXVhbGlmaWVkTmFtZSIgU291cmNlVHlwZT0idG5zOk5vZGUiIC8+DQogICAg"
"PG9wYzpGaWVsZCBOYW1lPSJEaXNwbGF5TmFtZSIgVHlwZU5hbWU9InVhOkxvY2FsaXplZFRleHQi"
"IFNvdXJjZVR5cGU9InRuczpOb2RlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRGVzY3JpcHRp"
"b24iIFR5cGVOYW1lPSJ1YTpMb2NhbGl6ZWRUZXh0IiBTb3VyY2VUeXBlPSJ0bnM6Tm9kZSIgLz4N"
"CiAgICA8b3BjOkZpZWxkIE5hbWU9IldyaXRlTWFzayIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIFNv"
"dXJjZVR5cGU9InRuczpOb2RlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iVXNlcldyaXRlTWFz"
"ayIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIFNvdXJjZVR5cGU9InRuczpOb2RlIiAvPg0KICAgIDxv"
"cGM6RmllbGQgTmFtZT0iTm9PZlJlZmVyZW5jZXMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQog"
"ICAgPG9wYzpGaWVsZCBOYW1lPSJSZWZlcmVuY2VzIiBUeXBlTmFtZT0idG5zOlJlZmVyZW5jZU5v"
"ZGUiIExlbmd0aEZpZWxkPSJOb09mUmVmZXJlbmNlcyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9"
"IlZhbHVlIiBUeXBlTmFtZT0idWE6VmFyaWFudCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkRh"
"dGFUeXBlIiBUeXBlTmFtZT0idWE6Tm9kZUlkIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iVmFs"
"dWVSYW5rIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9P"
"ZkFycmF5RGltZW5zaW9ucyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxk"
"IE5hbWU9IkFycmF5RGltZW5zaW9ucyIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIExlbmd0aEZpZWxk"
"PSJOb09mQXJyYXlEaW1lbnNpb25zIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iSXNBYnN0cmFj"
"dCIgVHlwZU5hbWU9Im9wYzpCb29sZWFuIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0K"
"ICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IlJlZmVyZW5jZVR5cGVOb2RlIiBCYXNlVHlwZT0i"
"dG5zOlR5cGVOb2RlIj4NCiAgICA8b3BjOkRvY3VtZW50YXRpb24+U3BlY2lmaWVzIHRoZSBhdHRy"
"aWJ1dGVzIHdoaWNoIGJlbG9uZyB0byByZWZlcmVuY2UgdHlwZSBub2Rlcy48L29wYzpEb2N1bWVu"
"dGF0aW9uPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9kZUlkIiBUeXBlTmFtZT0idWE6Tm9kZUlk"
"IiBTb3VyY2VUeXBlPSJ0bnM6Tm9kZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vZGVDbGFz"
"cyIgVHlwZU5hbWU9InRuczpOb2RlQ2xhc3MiIFNvdXJjZVR5cGU9InRuczpOb2RlIiAvPg0KICAg"
"IDxvcGM6RmllbGQgTmFtZT0iQnJvd3NlTmFtZSIgVHlwZU5hbWU9InVhOlF1YWxpZmllZE5hbWUi"
"IFNvdXJjZVR5cGU9InRuczpOb2RlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRGlzcGxheU5h"
"bWUiIFR5cGVOYW1lPSJ1YTpMb2NhbGl6ZWRUZXh0IiBTb3VyY2VUeXBlPSJ0bnM6Tm9kZSIgLz4N"
"CiAgICA8b3BjOkZpZWxkIE5hbWU9IkRlc2NyaXB0aW9uIiBUeXBlTmFtZT0idWE6TG9jYWxpemVk"
"VGV4dCIgU291cmNlVHlwZT0idG5zOk5vZGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJXcml0"
"ZU1hc2siIFR5cGVOYW1lPSJvcGM6VUludDMyIiBTb3VyY2VUeXBlPSJ0bnM6Tm9kZSIgLz4NCiAg"
"ICA8b3BjOkZpZWxkIE5hbWU9IlVzZXJXcml0ZU1hc2siIFR5cGVOYW1lPSJvcGM6VUludDMyIiBT"
"b3VyY2VUeXBlPSJ0bnM6Tm9kZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZSZWZlcmVu"
"Y2VzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVmZXJl"
"bmNlcyIgVHlwZU5hbWU9InRuczpSZWZlcmVuY2VOb2RlIiBMZW5ndGhGaWVsZD0iTm9PZlJlZmVy"
"ZW5jZXMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJJc0Fic3RyYWN0IiBUeXBlTmFtZT0ib3Bj"
"OkJvb2xlYW4iIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTeW1tZXRyaWMiIFR5cGVOYW1lPSJv"
"cGM6Qm9vbGVhbiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkludmVyc2VOYW1lIiBUeXBlTmFt"
"ZT0idWE6TG9jYWxpemVkVGV4dCIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9w"
"YzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJNZXRob2ROb2RlIiBCYXNlVHlwZT0idG5zOkluc3RhbmNl"
"Tm9kZSI+DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPlNwZWNpZmllcyB0aGUgYXR0cmlidXRlcyB3"
"aGljaCBiZWxvbmcgdG8gbWV0aG9kIG5vZGVzLjwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJOb2RlSWQiIFR5cGVOYW1lPSJ1YTpOb2RlSWQiIFNvdXJjZVR5cGU9InRu"
"czpOb2RlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9kZUNsYXNzIiBUeXBlTmFtZT0idG5z"
"Ok5vZGVDbGFzcyIgU291cmNlVHlwZT0idG5zOk5vZGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1l"
"PSJCcm93c2VOYW1lIiBUeXBlTmFtZT0idWE6UXVhbGlmaWVkTmFtZSIgU291cmNlVHlwZT0idG5z"
"Ok5vZGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJEaXNwbGF5TmFtZSIgVHlwZU5hbWU9InVh"
"OkxvY2FsaXplZFRleHQiIFNvdXJjZVR5cGU9InRuczpOb2RlIiAvPg0KICAgIDxvcGM6RmllbGQg"
"TmFtZT0iRGVzY3JpcHRpb24iIFR5cGVOYW1lPSJ1YTpMb2NhbGl6ZWRUZXh0IiBTb3VyY2VUeXBl"
"PSJ0bnM6Tm9kZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IldyaXRlTWFzayIgVHlwZU5hbWU9"
"Im9wYzpVSW50MzIiIFNvdXJjZVR5cGU9InRuczpOb2RlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFt"
"ZT0iVXNlcldyaXRlTWFzayIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIFNvdXJjZVR5cGU9InRuczpO"
"b2RlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZlJlZmVyZW5jZXMiIFR5cGVOYW1lPSJv"
"cGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZWZlcmVuY2VzIiBUeXBlTmFtZT0i"
"dG5zOlJlZmVyZW5jZU5vZGUiIExlbmd0aEZpZWxkPSJOb09mUmVmZXJlbmNlcyIgLz4NCiAgICA8"
"b3BjOkZpZWxkIE5hbWU9IkV4ZWN1dGFibGUiIFR5cGVOYW1lPSJvcGM6Qm9vbGVhbiIgLz4NCiAg"
"ICA8b3BjOkZpZWxkIE5hbWU9IlVzZXJFeGVjdXRhYmxlIiBUeXBlTmFtZT0ib3BjOkJvb2xlYW4i"
"IC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFt"
"ZT0iVmlld05vZGUiIEJhc2VUeXBlPSJ0bnM6SW5zdGFuY2VOb2RlIj4NCiAgICA8b3BjOkZpZWxk"
"IE5hbWU9Ik5vZGVJZCIgVHlwZU5hbWU9InVhOk5vZGVJZCIgU291cmNlVHlwZT0idG5zOk5vZGUi"
"IC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb2RlQ2xhc3MiIFR5cGVOYW1lPSJ0bnM6Tm9kZUNs"
"YXNzIiBTb3VyY2VUeXBlPSJ0bnM6Tm9kZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkJyb3dz"
"ZU5hbWUiIFR5cGVOYW1lPSJ1YTpRdWFsaWZpZWROYW1lIiBTb3VyY2VUeXBlPSJ0bnM6Tm9kZSIg"
"Lz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkRpc3BsYXlOYW1lIiBUeXBlTmFtZT0idWE6TG9jYWxp"
"emVkVGV4dCIgU291cmNlVHlwZT0idG5zOk5vZGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJE"
"ZXNjcmlwdGlvbiIgVHlwZU5hbWU9InVhOkxvY2FsaXplZFRleHQiIFNvdXJjZVR5cGU9InRuczpO"
"b2RlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iV3JpdGVNYXNrIiBUeXBlTmFtZT0ib3BjOlVJ"
"bnQzMiIgU291cmNlVHlwZT0idG5zOk5vZGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJVc2Vy"
"V3JpdGVNYXNrIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgU291cmNlVHlwZT0idG5zOk5vZGUiIC8+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mUmVmZXJlbmNlcyIgVHlwZU5hbWU9Im9wYzpJbnQz"
"MiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlZmVyZW5jZXMiIFR5cGVOYW1lPSJ0bnM6UmVm"
"ZXJlbmNlTm9kZSIgTGVuZ3RoRmllbGQ9Ik5vT2ZSZWZlcmVuY2VzIiAvPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iQ29udGFpbnNOb0xvb3BzIiBUeXBlTmFtZT0ib3BjOkJvb2xlYW4iIC8+DQogICAg"
"PG9wYzpGaWVsZCBOYW1lPSJFdmVudE5vdGlmaWVyIiBUeXBlTmFtZT0ib3BjOkJ5dGUiIC8+DQog"
"IDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iRGF0"
"YVR5cGVOb2RlIiBCYXNlVHlwZT0idG5zOlR5cGVOb2RlIj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9"
"Ik5vZGVJZCIgVHlwZU5hbWU9InVhOk5vZGVJZCIgU291cmNlVHlwZT0idG5zOk5vZGUiIC8+DQog"
"ICAgPG9wYzpGaWVsZCBOYW1lPSJOb2RlQ2xhc3MiIFR5cGVOYW1lPSJ0bnM6Tm9kZUNsYXNzIiBT"
"b3VyY2VUeXBlPSJ0bnM6Tm9kZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkJyb3dzZU5hbWUi"
"IFR5cGVOYW1lPSJ1YTpRdWFsaWZpZWROYW1lIiBTb3VyY2VUeXBlPSJ0bnM6Tm9kZSIgLz4NCiAg"
"ICA8b3BjOkZpZWxkIE5hbWU9IkRpc3BsYXlOYW1lIiBUeXBlTmFtZT0idWE6TG9jYWxpemVkVGV4"
"dCIgU291cmNlVHlwZT0idG5zOk5vZGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJEZXNjcmlw"
"dGlvbiIgVHlwZU5hbWU9InVhOkxvY2FsaXplZFRleHQiIFNvdXJjZVR5cGU9InRuczpOb2RlIiAv"
"Pg0KICAgIDxvcGM6RmllbGQgTmFtZT0iV3JpdGVNYXNrIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIg"
"U291cmNlVHlwZT0idG5zOk5vZGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJVc2VyV3JpdGVN"
"YXNrIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgU291cmNlVHlwZT0idG5zOk5vZGUiIC8+DQogICAg"
"PG9wYzpGaWVsZCBOYW1lPSJOb09mUmVmZXJlbmNlcyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4N"
"CiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlZmVyZW5jZXMiIFR5cGVOYW1lPSJ0bnM6UmVmZXJlbmNl"
"Tm9kZSIgTGVuZ3RoRmllbGQ9Ik5vT2ZSZWZlcmVuY2VzIiAvPg0KICAgIDxvcGM6RmllbGQgTmFt"
"ZT0iSXNBYnN0cmFjdCIgVHlwZU5hbWU9Im9wYzpCb29sZWFuIiAvPg0KICA8L29wYzpTdHJ1Y3R1"
"cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IlJlZmVyZW5jZU5vZGUiIEJh"
"c2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5TcGVj"
"aWZpZXMgYSByZWZlcmVuY2Ugd2hpY2ggYmVsb25ncyB0byBhIG5vZGUuPC9vcGM6RG9jdW1lbnRh"
"dGlvbj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlZmVyZW5jZVR5cGVJZCIgVHlwZU5hbWU9InVh"
"Ok5vZGVJZCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IklzSW52ZXJzZSIgVHlwZU5hbWU9Im9w"
"YzpCb29sZWFuIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iVGFyZ2V0SWQiIFR5cGVOYW1lPSJ1"
"YTpFeHBhbmRlZE5vZGVJZCIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpT"
"dHJ1Y3R1cmVkVHlwZSBOYW1lPSJBcmd1bWVudCIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVj"
"dCI+DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPkFuIGFyZ3VtZW50IGZvciBhIG1ldGhvZC48L29w"
"YzpEb2N1bWVudGF0aW9uPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTmFtZSIgVHlwZU5hbWU9Im9w"
"YzpTdHJpbmciIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJEYXRhVHlwZSIgVHlwZU5hbWU9InVh"
"Ok5vZGVJZCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlZhbHVlUmFuayIgVHlwZU5hbWU9Im9w"
"YzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZBcnJheURpbWVuc2lvbnMiIFR5"
"cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJBcnJheURpbWVuc2lv"
"bnMiIFR5cGVOYW1lPSJvcGM6VUludDMyIiBMZW5ndGhGaWVsZD0iTm9PZkFycmF5RGltZW5zaW9u"
"cyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkRlc2NyaXB0aW9uIiBUeXBlTmFtZT0idWE6TG9j"
"YWxpemVkVGV4dCIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1"
"cmVkVHlwZSBOYW1lPSJFbnVtVmFsdWVUeXBlIiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0"
"Ij4NCiAgICA8b3BjOkRvY3VtZW50YXRpb24+QSBtYXBwaW5nIGJldHdlZW4gYSB2YWx1ZSBvZiBh"
"biBlbnVtZXJhdGVkIHR5cGUgYW5kIGEgbmFtZSBhbmQgZGVzY3JpcHRpb24uPC9vcGM6RG9jdW1l"
"bnRhdGlvbj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlZhbHVlIiBUeXBlTmFtZT0ib3BjOkludDY0"
"IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRGlzcGxheU5hbWUiIFR5cGVOYW1lPSJ1YTpMb2Nh"
"bGl6ZWRUZXh0IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRGVzY3JpcHRpb24iIFR5cGVOYW1l"
"PSJ1YTpMb2NhbGl6ZWRUZXh0IiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3Bj"
"Ok9wYXF1ZVR5cGUgTmFtZT0iRHVyYXRpb24iPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5BIHBl"
"cmlvZCBvZiB0aW1lIG1lYXN1cmVkIGluIHNlY29uZHMuPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAg"
"PC9vcGM6T3BhcXVlVHlwZT4NCg0KICA8b3BjOk9wYXF1ZVR5cGUgTmFtZT0iVXRjVGltZSI+DQog"
"ICAgPG9wYzpEb2N1bWVudGF0aW9uPkEgZGF0ZS90aW1lIHZhbHVlIHNwZWNpZmllZCBpbiBVbml2"
"ZXJzYWwgQ29vcmRpbmF0ZWQgVGltZSAoVVRDKS48L29wYzpEb2N1bWVudGF0aW9uPg0KICA8L29w"
"YzpPcGFxdWVUeXBlPg0KDQogIDxvcGM6T3BhcXVlVHlwZSBOYW1lPSJMb2NhbGVJZCI+DQogICAg"
"PG9wYzpEb2N1bWVudGF0aW9uPkFuIGlkZW50aWZpZXIgZm9yIGEgdXNlciBsb2NhbGUuPC9vcGM6"
"RG9jdW1lbnRhdGlvbj4NCiAgPC9vcGM6T3BhcXVlVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRU"
"eXBlIE5hbWU9IlRpbWVab25lRGF0YVR5cGUiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3Qi"
"Pg0KICAgIDxvcGM6RmllbGQgTmFtZT0iT2Zmc2V0IiBUeXBlTmFtZT0ib3BjOkludDE2IiAvPg0K"
"ICAgIDxvcGM6RmllbGQgTmFtZT0iRGF5bGlnaHRTYXZpbmdJbk9mZnNldCIgVHlwZU5hbWU9Im9w"
"YzpCb29sZWFuIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOk9wYXF1ZVR5"
"cGUgTmFtZT0iSW50ZWdlcklkIj4NCiAgICA8b3BjOkRvY3VtZW50YXRpb24+QSBudW1lcmljIGlk"
"ZW50aWZpZXIgZm9yIGFuIG9iamVjdC48L29wYzpEb2N1bWVudGF0aW9uPg0KICA8L29wYzpPcGFx"
"dWVUeXBlPg0KDQogIDxvcGM6RW51bWVyYXRlZFR5cGUgTmFtZT0iQXBwbGljYXRpb25UeXBlIiBM"
"ZW5ndGhJbkJpdHM9IjMyIj4NCiAgICA8b3BjOkRvY3VtZW50YXRpb24+VGhlIHR5cGVzIG9mIGFw"
"cGxpY2F0aW9ucy48L29wYzpEb2N1bWVudGF0aW9uPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVl"
"IE5hbWU9IlNlcnZlciIgVmFsdWU9IjAiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFt"
"ZT0iQ2xpZW50IiBWYWx1ZT0iMSIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJD"
"bGllbnRBbmRTZXJ2ZXIiIFZhbHVlPSIyIiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5h"
"bWU9IkRpc2NvdmVyeVNlcnZlciIgVmFsdWU9IjMiIC8+DQogIDwvb3BjOkVudW1lcmF0ZWRUeXBl"
"Pg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iQXBwbGljYXRpb25EZXNjcmlwdGlvbiIg"
"QmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPkRl"
"c2NyaWJlcyBhbiBhcHBsaWNhdGlvbiBhbmQgaG93IHRvIGZpbmQgaXQuPC9vcGM6RG9jdW1lbnRh"
"dGlvbj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkFwcGxpY2F0aW9uVXJpIiBUeXBlTmFtZT0ib3Bj"
"OlN0cmluZyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlByb2R1Y3RVcmkiIFR5cGVOYW1lPSJv"
"cGM6U3RyaW5nIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iQXBwbGljYXRpb25OYW1lIiBUeXBl"
"TmFtZT0idWE6TG9jYWxpemVkVGV4dCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkFwcGxpY2F0"
"aW9uVHlwZSIgVHlwZU5hbWU9InRuczpBcHBsaWNhdGlvblR5cGUiIC8+DQogICAgPG9wYzpGaWVs"
"ZCBOYW1lPSJHYXRld2F5U2VydmVyVXJpIiBUeXBlTmFtZT0ib3BjOlN0cmluZyIgLz4NCiAgICA8"
"b3BjOkZpZWxkIE5hbWU9IkRpc2NvdmVyeVByb2ZpbGVVcmkiIFR5cGVOYW1lPSJvcGM6U3RyaW5n"
"IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZkRpc2NvdmVyeVVybHMiIFR5cGVOYW1lPSJv"
"cGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJEaXNjb3ZlcnlVcmxzIiBUeXBlTmFt"
"ZT0ib3BjOlN0cmluZyIgTGVuZ3RoRmllbGQ9Ik5vT2ZEaXNjb3ZlcnlVcmxzIiAvPg0KICA8L29w"
"YzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IlJlcXVlc3RI"
"ZWFkZXIiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RG9jdW1lbnRh"
"dGlvbj5UaGUgaGVhZGVyIHBhc3NlZCB3aXRoIGV2ZXJ5IHNlcnZlciByZXF1ZXN0Ljwvb3BjOkRv"
"Y3VtZW50YXRpb24+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJBdXRoZW50aWNhdGlvblRva2VuIiBU"
"eXBlTmFtZT0idWE6Tm9kZUlkIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iVGltZXN0YW1wIiBU"
"eXBlTmFtZT0ib3BjOkRhdGVUaW1lIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVxdWVzdEhh"
"bmRsZSIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXR1"
"cm5EaWFnbm9zdGljcyIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBO"
"YW1lPSJBdWRpdEVudHJ5SWQiIFR5cGVOYW1lPSJvcGM6U3RyaW5nIiAvPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iVGltZW91dEhpbnQiIFR5cGVOYW1lPSJvcGM6VUludDMyIiAvPg0KICAgIDxvcGM6"
"RmllbGQgTmFtZT0iQWRkaXRpb25hbEhlYWRlciIgVHlwZU5hbWU9InVhOkV4dGVuc2lvbk9iamVj"
"dCIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBO"
"YW1lPSJSZXNwb25zZUhlYWRlciIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAg"
"PG9wYzpEb2N1bWVudGF0aW9uPlRoZSBoZWFkZXIgcGFzc2VkIHdpdGggZXZlcnkgc2VydmVyIHJl"
"c3BvbnNlLjwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJUaW1lc3Rh"
"bXAiIFR5cGVOYW1lPSJvcGM6RGF0ZVRpbWUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXF1"
"ZXN0SGFuZGxlIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9"
"IlNlcnZpY2VSZXN1bHQiIFR5cGVOYW1lPSJ1YTpTdGF0dXNDb2RlIiAvPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iU2VydmljZURpYWdub3N0aWNzIiBUeXBlTmFtZT0idWE6RGlhZ25vc3RpY0luZm8i"
"IC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mU3RyaW5nVGFibGUiIFR5cGVOYW1lPSJvcGM6"
"SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTdHJpbmdUYWJsZSIgVHlwZU5hbWU9Im9w"
"YzpTdHJpbmciIExlbmd0aEZpZWxkPSJOb09mU3RyaW5nVGFibGUiIC8+DQogICAgPG9wYzpGaWVs"
"ZCBOYW1lPSJBZGRpdGlvbmFsSGVhZGVyIiBUeXBlTmFtZT0idWE6RXh0ZW5zaW9uT2JqZWN0IiAv"
"Pg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9"
"IlNlcnZpY2VGYXVsdCIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpE"
"b2N1bWVudGF0aW9uPlRoZSByZXNwb25zZSByZXR1cm5lZCBieSBhbGwgc2VydmljZXMgd2hlbiB0"
"aGVyZSBpcyBhIHNlcnZpY2UgbGV2ZWwgZXJyb3IuPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8"
"b3BjOkZpZWxkIE5hbWU9IlJlc3BvbnNlSGVhZGVyIiBUeXBlTmFtZT0idG5zOlJlc3BvbnNlSGVh"
"ZGVyIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBl"
"IE5hbWU9IkZpbmRTZXJ2ZXJzUmVxdWVzdCIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+"
"DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPkZpbmRzIHRoZSBzZXJ2ZXJzIGtub3duIHRvIHRoZSBk"
"aXNjb3Zlcnkgc2VydmVyLjwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpGaWVsZCBOYW1l"
"PSJSZXF1ZXN0SGVhZGVyIiBUeXBlTmFtZT0idG5zOlJlcXVlc3RIZWFkZXIiIC8+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJFbmRwb2ludFVybCIgVHlwZU5hbWU9Im9wYzpTdHJpbmciIC8+DQogICAg"
"PG9wYzpGaWVsZCBOYW1lPSJOb09mTG9jYWxlSWRzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0K"
"ICAgIDxvcGM6RmllbGQgTmFtZT0iTG9jYWxlSWRzIiBUeXBlTmFtZT0ib3BjOlN0cmluZyIgTGVu"
"Z3RoRmllbGQ9Ik5vT2ZMb2NhbGVJZHMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mU2Vy"
"dmVyVXJpcyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlNl"
"cnZlclVyaXMiIFR5cGVOYW1lPSJvcGM6U3RyaW5nIiBMZW5ndGhGaWVsZD0iTm9PZlNlcnZlclVy"
"aXMiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUg"
"TmFtZT0iRmluZFNlcnZlcnNSZXNwb25zZSIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+"
"DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPkZpbmRzIHRoZSBzZXJ2ZXJzIGtub3duIHRvIHRoZSBk"
"aXNjb3Zlcnkgc2VydmVyLjwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpGaWVsZCBOYW1l"
"PSJSZXNwb25zZUhlYWRlciIgVHlwZU5hbWU9InRuczpSZXNwb25zZUhlYWRlciIgLz4NCiAgICA8"
"b3BjOkZpZWxkIE5hbWU9Ik5vT2ZTZXJ2ZXJzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAg"
"IDxvcGM6RmllbGQgTmFtZT0iU2VydmVycyIgVHlwZU5hbWU9InRuczpBcHBsaWNhdGlvbkRlc2Ny"
"aXB0aW9uIiBMZW5ndGhGaWVsZD0iTm9PZlNlcnZlcnMiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRU"
"eXBlPg0KDQogIDxvcGM6T3BhcXVlVHlwZSBOYW1lPSJBcHBsaWNhdGlvbkluc3RhbmNlQ2VydGlm"
"aWNhdGUiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5BIGNlcnRpZmljYXRlIGZvciBhbiBpbnN0"
"YW5jZSBvZiBhbiBhcHBsaWNhdGlvbi48L29wYzpEb2N1bWVudGF0aW9uPg0KICA8L29wYzpPcGFx"
"dWVUeXBlPg0KDQogIDxvcGM6RW51bWVyYXRlZFR5cGUgTmFtZT0iTWVzc2FnZVNlY3VyaXR5TW9k"
"ZSIgTGVuZ3RoSW5CaXRzPSIzMiI+DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPlRoZSB0eXBlIG9m"
"IHNlY3VyaXR5IHRvIHVzZSBvbiBhIG1lc3NhZ2UuPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8"
"b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJJbnZhbGlkIiBWYWx1ZT0iMCIgLz4NCiAgICA8b3Bj"
"OkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJOb25lIiBWYWx1ZT0iMSIgLz4NCiAgICA8b3BjOkVudW1l"
"cmF0ZWRWYWx1ZSBOYW1lPSJTaWduIiBWYWx1ZT0iMiIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRW"
"YWx1ZSBOYW1lPSJTaWduQW5kRW5jcnlwdCIgVmFsdWU9IjMiIC8+DQogIDwvb3BjOkVudW1lcmF0"
"ZWRUeXBlPg0KDQogIDxvcGM6RW51bWVyYXRlZFR5cGUgTmFtZT0iVXNlclRva2VuVHlwZSIgTGVu"
"Z3RoSW5CaXRzPSIzMiI+DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPlRoZSBwb3NzaWJsZSB1c2Vy"
"IHRva2VuIHR5cGVzLjwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFs"
"dWUgTmFtZT0iQW5vbnltb3VzIiBWYWx1ZT0iMCIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1"
"ZSBOYW1lPSJVc2VyTmFtZSIgVmFsdWU9IjEiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUg"
"TmFtZT0iQ2VydGlmaWNhdGUiIFZhbHVlPSIyIiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVl"
"IE5hbWU9Iklzc3VlZFRva2VuIiBWYWx1ZT0iMyIgLz4NCiAgPC9vcGM6RW51bWVyYXRlZFR5cGU+"
"DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJVc2VyVG9rZW5Qb2xpY3kiIEJhc2VUeXBl"
"PSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5EZXNjcmliZXMg"
"YSB1c2VyIHRva2VuIHRoYXQgY2FuIGJlIHVzZWQgd2l0aCBhIHNlcnZlci48L29wYzpEb2N1bWVu"
"dGF0aW9uPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUG9saWN5SWQiIFR5cGVOYW1lPSJvcGM6U3Ry"
"aW5nIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iVG9rZW5UeXBlIiBUeXBlTmFtZT0idG5zOlVz"
"ZXJUb2tlblR5cGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJJc3N1ZWRUb2tlblR5cGUiIFR5"
"cGVOYW1lPSJvcGM6U3RyaW5nIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iSXNzdWVyRW5kcG9p"
"bnRVcmwiIFR5cGVOYW1lPSJvcGM6U3RyaW5nIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iU2Vj"
"dXJpdHlQb2xpY3lVcmkiIFR5cGVOYW1lPSJvcGM6U3RyaW5nIiAvPg0KICA8L29wYzpTdHJ1Y3R1"
"cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IkVuZHBvaW50RGVzY3JpcHRp"
"b24iIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlv"
"bj5UaGUgZGVzY3JpcHRpb24gb2YgYSBlbmRwb2ludCB0aGF0IGNhbiBiZSB1c2VkIHRvIGFjY2Vz"
"cyBhIHNlcnZlci48L29wYzpEb2N1bWVudGF0aW9uPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRW5k"
"cG9pbnRVcmwiIFR5cGVOYW1lPSJvcGM6U3RyaW5nIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0i"
"U2VydmVyIiBUeXBlTmFtZT0idG5zOkFwcGxpY2F0aW9uRGVzY3JpcHRpb24iIC8+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJTZXJ2ZXJDZXJ0aWZpY2F0ZSIgVHlwZU5hbWU9Im9wYzpCeXRlU3RyaW5n"
"IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iU2VjdXJpdHlNb2RlIiBUeXBlTmFtZT0idG5zOk1l"
"c3NhZ2VTZWN1cml0eU1vZGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTZWN1cml0eVBvbGlj"
"eVVyaSIgVHlwZU5hbWU9Im9wYzpTdHJpbmciIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09m"
"VXNlcklkZW50aXR5VG9rZW5zIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iVXNlcklkZW50aXR5VG9rZW5zIiBUeXBlTmFtZT0idG5zOlVzZXJUb2tlblBvbGlj"
"eSIgTGVuZ3RoRmllbGQ9Ik5vT2ZVc2VySWRlbnRpdHlUb2tlbnMiIC8+DQogICAgPG9wYzpGaWVs"
"ZCBOYW1lPSJUcmFuc3BvcnRQcm9maWxlVXJpIiBUeXBlTmFtZT0ib3BjOlN0cmluZyIgLz4NCiAg"
"ICA8b3BjOkZpZWxkIE5hbWU9IlNlY3VyaXR5TGV2ZWwiIFR5cGVOYW1lPSJvcGM6Qnl0ZSIgLz4N"
"CiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJH"
"ZXRFbmRwb2ludHNSZXF1ZXN0IiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8"
"b3BjOkRvY3VtZW50YXRpb24+R2V0cyB0aGUgZW5kcG9pbnRzIHVzZWQgYnkgdGhlIHNlcnZlci48"
"L29wYzpEb2N1bWVudGF0aW9uPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVxdWVzdEhlYWRlciIg"
"VHlwZU5hbWU9InRuczpSZXF1ZXN0SGVhZGVyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRW5k"
"cG9pbnRVcmwiIFR5cGVOYW1lPSJvcGM6U3RyaW5nIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0i"
"Tm9PZkxvY2FsZUlkcyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5h"
"bWU9IkxvY2FsZUlkcyIgVHlwZU5hbWU9Im9wYzpTdHJpbmciIExlbmd0aEZpZWxkPSJOb09mTG9j"
"YWxlSWRzIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZlByb2ZpbGVVcmlzIiBUeXBlTmFt"
"ZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUHJvZmlsZVVyaXMiIFR5cGVO"
"YW1lPSJvcGM6U3RyaW5nIiBMZW5ndGhGaWVsZD0iTm9PZlByb2ZpbGVVcmlzIiAvPg0KICA8L29w"
"YzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IkdldEVuZHBv"
"aW50c1Jlc3BvbnNlIiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkRv"
"Y3VtZW50YXRpb24+R2V0cyB0aGUgZW5kcG9pbnRzIHVzZWQgYnkgdGhlIHNlcnZlci48L29wYzpE"
"b2N1bWVudGF0aW9uPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVzcG9uc2VIZWFkZXIiIFR5cGVO"
"YW1lPSJ0bnM6UmVzcG9uc2VIZWFkZXIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mRW5k"
"cG9pbnRzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRW5k"
"cG9pbnRzIiBUeXBlTmFtZT0idG5zOkVuZHBvaW50RGVzY3JpcHRpb24iIExlbmd0aEZpZWxkPSJO"
"b09mRW5kcG9pbnRzIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVj"
"dHVyZWRUeXBlIE5hbWU9IlJlZ2lzdGVyZWRTZXJ2ZXIiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25P"
"YmplY3QiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5UaGUgaW5mb3JtYXRpb24gcmVxdWlyZWQg"
"dG8gcmVnaXN0ZXIgYSBzZXJ2ZXIgd2l0aCBhIGRpc2NvdmVyeSBzZXJ2ZXIuPC9vcGM6RG9jdW1l"
"bnRhdGlvbj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlNlcnZlclVyaSIgVHlwZU5hbWU9Im9wYzpT"
"dHJpbmciIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJQcm9kdWN0VXJpIiBUeXBlTmFtZT0ib3Bj"
"OlN0cmluZyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZTZXJ2ZXJOYW1lcyIgVHlwZU5h"
"bWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlNlcnZlck5hbWVzIiBUeXBl"
"TmFtZT0idWE6TG9jYWxpemVkVGV4dCIgTGVuZ3RoRmllbGQ9Ik5vT2ZTZXJ2ZXJOYW1lcyIgLz4N"
"CiAgICA8b3BjOkZpZWxkIE5hbWU9IlNlcnZlclR5cGUiIFR5cGVOYW1lPSJ0bnM6QXBwbGljYXRp"
"b25UeXBlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iR2F0ZXdheVNlcnZlclVyaSIgVHlwZU5h"
"bWU9Im9wYzpTdHJpbmciIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mRGlzY292ZXJ5VXJs"
"cyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkRpc2NvdmVy"
"eVVybHMiIFR5cGVOYW1lPSJvcGM6U3RyaW5nIiBMZW5ndGhGaWVsZD0iTm9PZkRpc2NvdmVyeVVy"
"bHMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTZW1hcGhvcmVGaWxlUGF0aCIgVHlwZU5hbWU9"
"Im9wYzpTdHJpbmciIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJJc09ubGluZSIgVHlwZU5hbWU9"
"Im9wYzpCb29sZWFuIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVj"
"dHVyZWRUeXBlIE5hbWU9IlJlZ2lzdGVyU2VydmVyUmVxdWVzdCIgQmFzZVR5cGU9InVhOkV4dGVu"
"c2lvbk9iamVjdCI+DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPlJlZ2lzdGVycyBhIHNlcnZlciB3"
"aXRoIHRoZSBkaXNjb3Zlcnkgc2VydmVyLjwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpG"
"aWVsZCBOYW1lPSJSZXF1ZXN0SGVhZGVyIiBUeXBlTmFtZT0idG5zOlJlcXVlc3RIZWFkZXIiIC8+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTZXJ2ZXIiIFR5cGVOYW1lPSJ0bnM6UmVnaXN0ZXJlZFNl"
"cnZlciIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlw"
"ZSBOYW1lPSJSZWdpc3RlclNlcnZlclJlc3BvbnNlIiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2Jq"
"ZWN0Ij4NCiAgICA8b3BjOkRvY3VtZW50YXRpb24+UmVnaXN0ZXJzIGEgc2VydmVyIHdpdGggdGhl"
"IGRpc2NvdmVyeSBzZXJ2ZXIuPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8b3BjOkZpZWxkIE5h"
"bWU9IlJlc3BvbnNlSGVhZGVyIiBUeXBlTmFtZT0idG5zOlJlc3BvbnNlSGVhZGVyIiAvPg0KICA8"
"L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOkVudW1lcmF0ZWRUeXBlIE5hbWU9IlNlY3Vy"
"aXR5VG9rZW5SZXF1ZXN0VHlwZSIgTGVuZ3RoSW5CaXRzPSIzMiI+DQogICAgPG9wYzpEb2N1bWVu"
"dGF0aW9uPkluZGljYXRlcyB3aGV0aGVyIGEgdG9rZW4gaWYgYmVpbmcgY3JlYXRlZCBvciByZW5l"
"d2VkLjwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0i"
"SXNzdWUiIFZhbHVlPSIwIiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IlJlbmV3"
"IiBWYWx1ZT0iMSIgLz4NCiAgPC9vcGM6RW51bWVyYXRlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1"
"cmVkVHlwZSBOYW1lPSJDaGFubmVsU2VjdXJpdHlUb2tlbiIgQmFzZVR5cGU9InVhOkV4dGVuc2lv"
"bk9iamVjdCI+DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPlRoZSB0b2tlbiB0aGF0IGlkZW50aWZp"
"ZXMgYSBzZXQgb2Yga2V5cyBmb3IgYW4gYWN0aXZlIHNlY3VyZSBjaGFubmVsLjwvb3BjOkRvY3Vt"
"ZW50YXRpb24+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJDaGFubmVsSWQiIFR5cGVOYW1lPSJvcGM6"
"VUludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iVG9rZW5JZCIgVHlwZU5hbWU9Im9wYzpV"
"SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJDcmVhdGVkQXQiIFR5cGVOYW1lPSJvcGM6"
"RGF0ZVRpbWUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXZpc2VkTGlmZXRpbWUiIFR5cGVO"
"YW1lPSJvcGM6VUludDMyIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0"
"cnVjdHVyZWRUeXBlIE5hbWU9Ik9wZW5TZWN1cmVDaGFubmVsUmVxdWVzdCIgQmFzZVR5cGU9InVh"
"OkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPkNyZWF0ZXMgYSBzZWN1"
"cmUgY2hhbm5lbCB3aXRoIGEgc2VydmVyLjwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpG"
"aWVsZCBOYW1lPSJSZXF1ZXN0SGVhZGVyIiBUeXBlTmFtZT0idG5zOlJlcXVlc3RIZWFkZXIiIC8+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJDbGllbnRQcm90b2NvbFZlcnNpb24iIFR5cGVOYW1lPSJv"
"cGM6VUludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVxdWVzdFR5cGUiIFR5cGVOYW1l"
"PSJ0bnM6U2VjdXJpdHlUb2tlblJlcXVlc3RUeXBlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0i"
"U2VjdXJpdHlNb2RlIiBUeXBlTmFtZT0idG5zOk1lc3NhZ2VTZWN1cml0eU1vZGUiIC8+DQogICAg"
"PG9wYzpGaWVsZCBOYW1lPSJDbGllbnROb25jZSIgVHlwZU5hbWU9Im9wYzpCeXRlU3RyaW5nIiAv"
"Pg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVxdWVzdGVkTGlmZXRpbWUiIFR5cGVOYW1lPSJvcGM6"
"VUludDMyIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRU"
"eXBlIE5hbWU9Ik9wZW5TZWN1cmVDaGFubmVsUmVzcG9uc2UiIEJhc2VUeXBlPSJ1YTpFeHRlbnNp"
"b25PYmplY3QiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5DcmVhdGVzIGEgc2VjdXJlIGNoYW5u"
"ZWwgd2l0aCBhIHNlcnZlci48L29wYzpEb2N1bWVudGF0aW9uPg0KICAgIDxvcGM6RmllbGQgTmFt"
"ZT0iUmVzcG9uc2VIZWFkZXIiIFR5cGVOYW1lPSJ0bnM6UmVzcG9uc2VIZWFkZXIiIC8+DQogICAg"
"PG9wYzpGaWVsZCBOYW1lPSJTZXJ2ZXJQcm90b2NvbFZlcnNpb24iIFR5cGVOYW1lPSJvcGM6VUlu"
"dDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iU2VjdXJpdHlUb2tlbiIgVHlwZU5hbWU9InRu"
"czpDaGFubmVsU2VjdXJpdHlUb2tlbiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlNlcnZlck5v"
"bmNlIiBUeXBlTmFtZT0ib3BjOkJ5dGVTdHJpbmciIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBl"
"Pg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iQ2xvc2VTZWN1cmVDaGFubmVsUmVxdWVz"
"dCIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpEb2N1bWVudGF0aW9u"
"PkNsb3NlcyBhIHNlY3VyZSBjaGFubmVsLjwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpG"
"aWVsZCBOYW1lPSJSZXF1ZXN0SGVhZGVyIiBUeXBlTmFtZT0idG5zOlJlcXVlc3RIZWFkZXIiIC8+"
"DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0i"
"Q2xvc2VTZWN1cmVDaGFubmVsUmVzcG9uc2UiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3Qi"
"Pg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5DbG9zZXMgYSBzZWN1cmUgY2hhbm5lbC48L29wYzpE"
"b2N1bWVudGF0aW9uPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVzcG9uc2VIZWFkZXIiIFR5cGVO"
"YW1lPSJ0bnM6UmVzcG9uc2VIZWFkZXIiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQog"
"IDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iU2lnbmVkU29mdHdhcmVDZXJ0aWZpY2F0ZSIgQmFz"
"ZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPkEgc29m"
"dHdhcmUgY2VydGlmaWNhdGUgd2l0aCBhIGRpZ2l0YWwgc2lnbmF0dXJlLjwvb3BjOkRvY3VtZW50"
"YXRpb24+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJDZXJ0aWZpY2F0ZURhdGEiIFR5cGVOYW1lPSJv"
"cGM6Qnl0ZVN0cmluZyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlNpZ25hdHVyZSIgVHlwZU5h"
"bWU9Im9wYzpCeXRlU3RyaW5nIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3Bj"
"Ok9wYXF1ZVR5cGUgTmFtZT0iU2Vzc2lvbkF1dGhlbnRpY2F0aW9uVG9rZW4iPg0KICAgIDxvcGM6"
"RG9jdW1lbnRhdGlvbj5BIHVuaXF1ZSBpZGVudGlmaWVyIGZvciBhIHNlc3Npb24gdXNlZCB0byBh"
"dXRoZW50aWNhdGUgcmVxdWVzdHMuPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgPC9vcGM6T3BhcXVl"
"VHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IlNpZ25hdHVyZURhdGEiIEJhc2VU"
"eXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5BIGRpZ2l0"
"YWwgc2lnbmF0dXJlLjwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJB"
"bGdvcml0aG0iIFR5cGVOYW1lPSJvcGM6U3RyaW5nIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0i"
"U2lnbmF0dXJlIiBUeXBlTmFtZT0ib3BjOkJ5dGVTdHJpbmciIC8+DQogIDwvb3BjOlN0cnVjdHVy"
"ZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iQ3JlYXRlU2Vzc2lvblJlcXVl"
"c3QiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlv"
"bj5DcmVhdGVzIGEgbmV3IHNlc3Npb24gd2l0aCB0aGUgc2VydmVyLjwvb3BjOkRvY3VtZW50YXRp"
"b24+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXF1ZXN0SGVhZGVyIiBUeXBlTmFtZT0idG5zOlJl"
"cXVlc3RIZWFkZXIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJDbGllbnREZXNjcmlwdGlvbiIg"
"VHlwZU5hbWU9InRuczpBcHBsaWNhdGlvbkRlc2NyaXB0aW9uIiAvPg0KICAgIDxvcGM6RmllbGQg"
"TmFtZT0iU2VydmVyVXJpIiBUeXBlTmFtZT0ib3BjOlN0cmluZyIgLz4NCiAgICA8b3BjOkZpZWxk"
"IE5hbWU9IkVuZHBvaW50VXJsIiBUeXBlTmFtZT0ib3BjOlN0cmluZyIgLz4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9IlNlc3Npb25OYW1lIiBUeXBlTmFtZT0ib3BjOlN0cmluZyIgLz4NCiAgICA8b3Bj"
"OkZpZWxkIE5hbWU9IkNsaWVudE5vbmNlIiBUeXBlTmFtZT0ib3BjOkJ5dGVTdHJpbmciIC8+DQog"
"ICAgPG9wYzpGaWVsZCBOYW1lPSJDbGllbnRDZXJ0aWZpY2F0ZSIgVHlwZU5hbWU9Im9wYzpCeXRl"
"U3RyaW5nIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVxdWVzdGVkU2Vzc2lvblRpbWVvdXQi"
"IFR5cGVOYW1lPSJvcGM6RG91YmxlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTWF4UmVzcG9u"
"c2VNZXNzYWdlU2l6ZSIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIC8+DQogIDwvb3BjOlN0cnVjdHVy"
"ZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iQ3JlYXRlU2Vzc2lvblJlc3Bv"
"bnNlIiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkRvY3VtZW50YXRp"
"b24+Q3JlYXRlcyBhIG5ldyBzZXNzaW9uIHdpdGggdGhlIHNlcnZlci48L29wYzpEb2N1bWVudGF0"
"aW9uPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVzcG9uc2VIZWFkZXIiIFR5cGVOYW1lPSJ0bnM6"
"UmVzcG9uc2VIZWFkZXIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTZXNzaW9uSWQiIFR5cGVO"
"YW1lPSJ1YTpOb2RlSWQiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJBdXRoZW50aWNhdGlvblRv"
"a2VuIiBUeXBlTmFtZT0idWE6Tm9kZUlkIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmV2aXNl"
"ZFNlc3Npb25UaW1lb3V0IiBUeXBlTmFtZT0ib3BjOkRvdWJsZSIgLz4NCiAgICA8b3BjOkZpZWxk"
"IE5hbWU9IlNlcnZlck5vbmNlIiBUeXBlTmFtZT0ib3BjOkJ5dGVTdHJpbmciIC8+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJTZXJ2ZXJDZXJ0aWZpY2F0ZSIgVHlwZU5hbWU9Im9wYzpCeXRlU3RyaW5n"
"IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZlNlcnZlckVuZHBvaW50cyIgVHlwZU5hbWU9"
"Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlNlcnZlckVuZHBvaW50cyIgVHlw"
"ZU5hbWU9InRuczpFbmRwb2ludERlc2NyaXB0aW9uIiBMZW5ndGhGaWVsZD0iTm9PZlNlcnZlckVu"
"ZHBvaW50cyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZTZXJ2ZXJTb2Z0d2FyZUNlcnRp"
"ZmljYXRlcyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlNl"
"cnZlclNvZnR3YXJlQ2VydGlmaWNhdGVzIiBUeXBlTmFtZT0idG5zOlNpZ25lZFNvZnR3YXJlQ2Vy"
"dGlmaWNhdGUiIExlbmd0aEZpZWxkPSJOb09mU2VydmVyU29mdHdhcmVDZXJ0aWZpY2F0ZXMiIC8+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTZXJ2ZXJTaWduYXR1cmUiIFR5cGVOYW1lPSJ0bnM6U2ln"
"bmF0dXJlRGF0YSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik1heFJlcXVlc3RNZXNzYWdlU2l6"
"ZSIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQog"
"IDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iVXNlcklkZW50aXR5VG9rZW4iIEJhc2VUeXBlPSJ1"
"YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5BIGJhc2UgdHlwZSBm"
"b3IgYSB1c2VyIGlkZW50aXR5IHRva2VuLjwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpG"
"aWVsZCBOYW1lPSJQb2xpY3lJZCIgVHlwZU5hbWU9Im9wYzpTdHJpbmciIC8+DQogIDwvb3BjOlN0"
"cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iQW5vbnltb3VzSWRl"
"bnRpdHlUb2tlbiIgQmFzZVR5cGU9InRuczpVc2VySWRlbnRpdHlUb2tlbiI+DQogICAgPG9wYzpE"
"b2N1bWVudGF0aW9uPkEgdG9rZW4gcmVwcmVzZW50aW5nIGFuIGFub255bW91cyB1c2VyLjwvb3Bj"
"OkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJQb2xpY3lJZCIgVHlwZU5hbWU9"
"Im9wYzpTdHJpbmciIFNvdXJjZVR5cGU9InRuczpVc2VySWRlbnRpdHlUb2tlbiIgLz4NCiAgPC9v"
"cGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJVc2VyTmFt"
"ZUlkZW50aXR5VG9rZW4iIEJhc2VUeXBlPSJ0bnM6VXNlcklkZW50aXR5VG9rZW4iPg0KICAgIDxv"
"cGM6RG9jdW1lbnRhdGlvbj5BIHRva2VuIHJlcHJlc2VudGluZyBhIHVzZXIgaWRlbnRpZmllZCBi"
"eSBhIHVzZXIgbmFtZSBhbmQgcGFzc3dvcmQuPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8b3Bj"
"OkZpZWxkIE5hbWU9IlBvbGljeUlkIiBUeXBlTmFtZT0ib3BjOlN0cmluZyIgU291cmNlVHlwZT0i"
"dG5zOlVzZXJJZGVudGl0eVRva2VuIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iVXNlck5hbWUi"
"IFR5cGVOYW1lPSJvcGM6U3RyaW5nIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUGFzc3dvcmQi"
"IFR5cGVOYW1lPSJvcGM6Qnl0ZVN0cmluZyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkVuY3J5"
"cHRpb25BbGdvcml0aG0iIFR5cGVOYW1lPSJvcGM6U3RyaW5nIiAvPg0KICA8L29wYzpTdHJ1Y3R1"
"cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9Ilg1MDlJZGVudGl0eVRva2Vu"
"IiBCYXNlVHlwZT0idG5zOlVzZXJJZGVudGl0eVRva2VuIj4NCiAgICA8b3BjOkRvY3VtZW50YXRp"
"b24+QSB0b2tlbiByZXByZXNlbnRpbmcgYSB1c2VyIGlkZW50aWZpZWQgYnkgYW4gWDUwOSBjZXJ0"
"aWZpY2F0ZS48L29wYzpEb2N1bWVudGF0aW9uPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUG9saWN5"
"SWQiIFR5cGVOYW1lPSJvcGM6U3RyaW5nIiBTb3VyY2VUeXBlPSJ0bnM6VXNlcklkZW50aXR5VG9r"
"ZW4iIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJDZXJ0aWZpY2F0ZURhdGEiIFR5cGVOYW1lPSJv"
"cGM6Qnl0ZVN0cmluZyIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1"
"Y3R1cmVkVHlwZSBOYW1lPSJJc3N1ZWRJZGVudGl0eVRva2VuIiBCYXNlVHlwZT0idG5zOlVzZXJJ"
"ZGVudGl0eVRva2VuIj4NCiAgICA8b3BjOkRvY3VtZW50YXRpb24+QSB0b2tlbiByZXByZXNlbnRp"
"bmcgYSB1c2VyIGlkZW50aWZpZWQgYnkgYSBXUy1TZWN1cml0eSBYTUwgdG9rZW4uPC9vcGM6RG9j"
"dW1lbnRhdGlvbj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlBvbGljeUlkIiBUeXBlTmFtZT0ib3Bj"
"OlN0cmluZyIgU291cmNlVHlwZT0idG5zOlVzZXJJZGVudGl0eVRva2VuIiAvPg0KICAgIDxvcGM6"
"RmllbGQgTmFtZT0iVG9rZW5EYXRhIiBUeXBlTmFtZT0ib3BjOkJ5dGVTdHJpbmciIC8+DQogICAg"
"PG9wYzpGaWVsZCBOYW1lPSJFbmNyeXB0aW9uQWxnb3JpdGhtIiBUeXBlTmFtZT0ib3BjOlN0cmlu"
"ZyIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBO"
"YW1lPSJBY3RpdmF0ZVNlc3Npb25SZXF1ZXN0IiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0"
"Ij4NCiAgICA8b3BjOkRvY3VtZW50YXRpb24+QWN0aXZhdGVzIGEgc2Vzc2lvbiB3aXRoIHRoZSBz"
"ZXJ2ZXIuPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlcXVlc3RI"
"ZWFkZXIiIFR5cGVOYW1lPSJ0bnM6UmVxdWVzdEhlYWRlciIgLz4NCiAgICA8b3BjOkZpZWxkIE5h"
"bWU9IkNsaWVudFNpZ25hdHVyZSIgVHlwZU5hbWU9InRuczpTaWduYXR1cmVEYXRhIiAvPg0KICAg"
"IDxvcGM6RmllbGQgTmFtZT0iTm9PZkNsaWVudFNvZnR3YXJlQ2VydGlmaWNhdGVzIiBUeXBlTmFt"
"ZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iQ2xpZW50U29mdHdhcmVDZXJ0"
"aWZpY2F0ZXMiIFR5cGVOYW1lPSJ0bnM6U2lnbmVkU29mdHdhcmVDZXJ0aWZpY2F0ZSIgTGVuZ3Ro"
"RmllbGQ9Ik5vT2ZDbGllbnRTb2Z0d2FyZUNlcnRpZmljYXRlcyIgLz4NCiAgICA8b3BjOkZpZWxk"
"IE5hbWU9Ik5vT2ZMb2NhbGVJZHMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpG"
"aWVsZCBOYW1lPSJMb2NhbGVJZHMiIFR5cGVOYW1lPSJvcGM6U3RyaW5nIiBMZW5ndGhGaWVsZD0i"
"Tm9PZkxvY2FsZUlkcyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlVzZXJJZGVudGl0eVRva2Vu"
"IiBUeXBlTmFtZT0idWE6RXh0ZW5zaW9uT2JqZWN0IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0i"
"VXNlclRva2VuU2lnbmF0dXJlIiBUeXBlTmFtZT0idG5zOlNpZ25hdHVyZURhdGEiIC8+DQogIDwv"
"b3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iQWN0aXZh"
"dGVTZXNzaW9uUmVzcG9uc2UiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxv"
"cGM6RG9jdW1lbnRhdGlvbj5BY3RpdmF0ZXMgYSBzZXNzaW9uIHdpdGggdGhlIHNlcnZlci48L29w"
"YzpEb2N1bWVudGF0aW9uPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVzcG9uc2VIZWFkZXIiIFR5"
"cGVOYW1lPSJ0bnM6UmVzcG9uc2VIZWFkZXIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTZXJ2"
"ZXJOb25jZSIgVHlwZU5hbWU9Im9wYzpCeXRlU3RyaW5nIiAvPg0KICAgIDxvcGM6RmllbGQgTmFt"
"ZT0iTm9PZlJlc3VsdHMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBO"
"YW1lPSJSZXN1bHRzIiBUeXBlTmFtZT0idWE6U3RhdHVzQ29kZSIgTGVuZ3RoRmllbGQ9Ik5vT2ZS"
"ZXN1bHRzIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZkRpYWdub3N0aWNJbmZvcyIgVHlw"
"ZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkRpYWdub3N0aWNJbmZv"
"cyIgVHlwZU5hbWU9InVhOkRpYWdub3N0aWNJbmZvIiBMZW5ndGhGaWVsZD0iTm9PZkRpYWdub3N0"
"aWNJbmZvcyIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVk"
"VHlwZSBOYW1lPSJDbG9zZVNlc3Npb25SZXF1ZXN0IiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2Jq"
"ZWN0Ij4NCiAgICA8b3BjOkRvY3VtZW50YXRpb24+Q2xvc2VzIGEgc2Vzc2lvbiB3aXRoIHRoZSBz"
"ZXJ2ZXIuPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlcXVlc3RI"
"ZWFkZXIiIFR5cGVOYW1lPSJ0bnM6UmVxdWVzdEhlYWRlciIgLz4NCiAgICA8b3BjOkZpZWxkIE5h"
"bWU9IkRlbGV0ZVN1YnNjcmlwdGlvbnMiIFR5cGVOYW1lPSJvcGM6Qm9vbGVhbiIgLz4NCiAgPC9v"
"cGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJDbG9zZVNl"
"c3Npb25SZXNwb25zZSIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpE"
"b2N1bWVudGF0aW9uPkNsb3NlcyBhIHNlc3Npb24gd2l0aCB0aGUgc2VydmVyLjwvb3BjOkRvY3Vt"
"ZW50YXRpb24+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXNwb25zZUhlYWRlciIgVHlwZU5hbWU9"
"InRuczpSZXNwb25zZUhlYWRlciIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9w"
"YzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJDYW5jZWxSZXF1ZXN0IiBCYXNlVHlwZT0idWE6RXh0ZW5z"
"aW9uT2JqZWN0Ij4NCiAgICA8b3BjOkRvY3VtZW50YXRpb24+Q2FuY2VscyBhbiBvdXRzdGFuZGlu"
"ZyByZXF1ZXN0Ljwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXF1"
"ZXN0SGVhZGVyIiBUeXBlTmFtZT0idG5zOlJlcXVlc3RIZWFkZXIiIC8+DQogICAgPG9wYzpGaWVs"
"ZCBOYW1lPSJSZXF1ZXN0SGFuZGxlIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgPC9vcGM6"
"U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJDYW5jZWxSZXNw"
"b25zZSIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpEb2N1bWVudGF0"
"aW9uPkNhbmNlbHMgYW4gb3V0c3RhbmRpbmcgcmVxdWVzdC48L29wYzpEb2N1bWVudGF0aW9uPg0K"
"ICAgIDxvcGM6RmllbGQgTmFtZT0iUmVzcG9uc2VIZWFkZXIiIFR5cGVOYW1lPSJ0bnM6UmVzcG9u"
"c2VIZWFkZXIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJDYW5jZWxDb3VudCIgVHlwZU5hbWU9"
"Im9wYzpVSW50MzIiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6RW51bWVy"
"YXRlZFR5cGUgTmFtZT0iTm9kZUF0dHJpYnV0ZXNNYXNrIiBMZW5ndGhJbkJpdHM9IjMyIj4NCiAg"
"ICA8b3BjOkRvY3VtZW50YXRpb24+VGhlIGJpdHMgdXNlZCB0byBzcGVjaWZ5IGRlZmF1bHQgYXR0"
"cmlidXRlcyBmb3IgYSBuZXcgbm9kZS48L29wYzpEb2N1bWVudGF0aW9uPg0KICAgIDxvcGM6RW51"
"bWVyYXRlZFZhbHVlIE5hbWU9Ik5vbmUiIFZhbHVlPSIwIiAvPg0KICAgIDxvcGM6RW51bWVyYXRl"
"ZFZhbHVlIE5hbWU9IkFjY2Vzc0xldmVsIiBWYWx1ZT0iMSIgLz4NCiAgICA8b3BjOkVudW1lcmF0"
"ZWRWYWx1ZSBOYW1lPSJBcnJheURpbWVuc2lvbnMiIFZhbHVlPSIyIiAvPg0KICAgIDxvcGM6RW51"
"bWVyYXRlZFZhbHVlIE5hbWU9IkJyb3dzZU5hbWUiIFZhbHVlPSI0IiAvPg0KICAgIDxvcGM6RW51"
"bWVyYXRlZFZhbHVlIE5hbWU9IkNvbnRhaW5zTm9Mb29wcyIgVmFsdWU9IjgiIC8+DQogICAgPG9w"
"YzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iRGF0YVR5cGUiIFZhbHVlPSIxNiIgLz4NCiAgICA8b3Bj"
"OkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJEZXNjcmlwdGlvbiIgVmFsdWU9IjMyIiAvPg0KICAgIDxv"
"cGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IkRpc3BsYXlOYW1lIiBWYWx1ZT0iNjQiIC8+DQogICAg"
"PG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iRXZlbnROb3RpZmllciIgVmFsdWU9IjEyOCIgLz4N"
"CiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJFeGVjdXRhYmxlIiBWYWx1ZT0iMjU2IiAv"
"Pg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9Ikhpc3Rvcml6aW5nIiBWYWx1ZT0iNTEy"
"IiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IkludmVyc2VOYW1lIiBWYWx1ZT0i"
"MTAyNCIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJJc0Fic3RyYWN0IiBWYWx1"
"ZT0iMjA0OCIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJNaW5pbXVtU2FtcGxp"
"bmdJbnRlcnZhbCIgVmFsdWU9IjQwOTYiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFt"
"ZT0iTm9kZUNsYXNzIiBWYWx1ZT0iODE5MiIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBO"
"YW1lPSJOb2RlSWQiIFZhbHVlPSIxNjM4NCIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBO"
"YW1lPSJTeW1tZXRyaWMiIFZhbHVlPSIzMjc2OCIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1"
"ZSBOYW1lPSJVc2VyQWNjZXNzTGV2ZWwiIFZhbHVlPSI2NTUzNiIgLz4NCiAgICA8b3BjOkVudW1l"
"cmF0ZWRWYWx1ZSBOYW1lPSJVc2VyRXhlY3V0YWJsZSIgVmFsdWU9IjEzMTA3MiIgLz4NCiAgICA8"
"b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJVc2VyV3JpdGVNYXNrIiBWYWx1ZT0iMjYyMTQ0IiAv"
"Pg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IlZhbHVlUmFuayIgVmFsdWU9IjUyNDI4"
"OCIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJXcml0ZU1hc2siIFZhbHVlPSIx"
"MDQ4NTc2IiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IlZhbHVlIiBWYWx1ZT0i"
"MjA5NzE1MiIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJBbGwiIFZhbHVlPSI0"
"MTk0MzAzIiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IkJhc2VOb2RlIiBWYWx1"
"ZT0iMTMzNTM5NiIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJPYmplY3QiIFZh"
"bHVlPSIxMzM1NTI0IiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9Ik9iamVjdFR5"
"cGVPckRhdGFUeXBlIiBWYWx1ZT0iMTMzNzQ0NCIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1"
"ZSBOYW1lPSJWYXJpYWJsZSIgVmFsdWU9IjQwMjY5OTkiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVk"
"VmFsdWUgTmFtZT0iVmFyaWFibGVUeXBlIiBWYWx1ZT0iMzk1ODkwMiIgLz4NCiAgICA8b3BjOkVu"
"dW1lcmF0ZWRWYWx1ZSBOYW1lPSJNZXRob2QiIFZhbHVlPSIxNDY2NzI0IiAvPg0KICAgIDxvcGM6"
"RW51bWVyYXRlZFZhbHVlIE5hbWU9IlJlZmVyZW5jZVR5cGUiIFZhbHVlPSIxMzcxMjM2IiAvPg0K"
"ICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IlZpZXciIFZhbHVlPSIxMzM1NTMyIiAvPg0K"
"ICA8L29wYzpFbnVtZXJhdGVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9Ik5v"
"ZGVBdHRyaWJ1dGVzIiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkRv"
"Y3VtZW50YXRpb24+VGhlIGJhc2UgYXR0cmlidXRlcyBmb3IgYWxsIG5vZGVzLjwvb3BjOkRvY3Vt"
"ZW50YXRpb24+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTcGVjaWZpZWRBdHRyaWJ1dGVzIiBUeXBl"
"TmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkRpc3BsYXlOYW1lIiBU"
"eXBlTmFtZT0idWE6TG9jYWxpemVkVGV4dCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkRlc2Ny"
"aXB0aW9uIiBUeXBlTmFtZT0idWE6TG9jYWxpemVkVGV4dCIgLz4NCiAgICA8b3BjOkZpZWxkIE5h"
"bWU9IldyaXRlTWFzayIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBO"
"YW1lPSJVc2VyV3JpdGVNYXNrIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgPC9vcGM6U3Ry"
"dWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJPYmplY3RBdHRyaWJ1"
"dGVzIiBCYXNlVHlwZT0idG5zOk5vZGVBdHRyaWJ1dGVzIj4NCiAgICA8b3BjOkRvY3VtZW50YXRp"
"b24+VGhlIGF0dHJpYnV0ZXMgZm9yIGFuIG9iamVjdCBub2RlLjwvb3BjOkRvY3VtZW50YXRpb24+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTcGVjaWZpZWRBdHRyaWJ1dGVzIiBUeXBlTmFtZT0ib3Bj"
"OlVJbnQzMiIgU291cmNlVHlwZT0idG5zOk5vZGVBdHRyaWJ1dGVzIiAvPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iRGlzcGxheU5hbWUiIFR5cGVOYW1lPSJ1YTpMb2NhbGl6ZWRUZXh0IiBTb3VyY2VU"
"eXBlPSJ0bnM6Tm9kZUF0dHJpYnV0ZXMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJEZXNjcmlw"
"dGlvbiIgVHlwZU5hbWU9InVhOkxvY2FsaXplZFRleHQiIFNvdXJjZVR5cGU9InRuczpOb2RlQXR0"
"cmlidXRlcyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IldyaXRlTWFzayIgVHlwZU5hbWU9Im9w"
"YzpVSW50MzIiIFNvdXJjZVR5cGU9InRuczpOb2RlQXR0cmlidXRlcyIgLz4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9IlVzZXJXcml0ZU1hc2siIFR5cGVOYW1lPSJvcGM6VUludDMyIiBTb3VyY2VUeXBl"
"PSJ0bnM6Tm9kZUF0dHJpYnV0ZXMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJFdmVudE5vdGlm"
"aWVyIiBUeXBlTmFtZT0ib3BjOkJ5dGUiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQog"
"IDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iVmFyaWFibGVBdHRyaWJ1dGVzIiBCYXNlVHlwZT0i"
"dG5zOk5vZGVBdHRyaWJ1dGVzIj4NCiAgICA8b3BjOkRvY3VtZW50YXRpb24+VGhlIGF0dHJpYnV0"
"ZXMgZm9yIGEgdmFyaWFibGUgbm9kZS48L29wYzpEb2N1bWVudGF0aW9uPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iU3BlY2lmaWVkQXR0cmlidXRlcyIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIFNvdXJj"
"ZVR5cGU9InRuczpOb2RlQXR0cmlidXRlcyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkRpc3Bs"
"YXlOYW1lIiBUeXBlTmFtZT0idWE6TG9jYWxpemVkVGV4dCIgU291cmNlVHlwZT0idG5zOk5vZGVB"
"dHRyaWJ1dGVzIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRGVzY3JpcHRpb24iIFR5cGVOYW1l"
"PSJ1YTpMb2NhbGl6ZWRUZXh0IiBTb3VyY2VUeXBlPSJ0bnM6Tm9kZUF0dHJpYnV0ZXMiIC8+DQog"
"ICAgPG9wYzpGaWVsZCBOYW1lPSJXcml0ZU1hc2siIFR5cGVOYW1lPSJvcGM6VUludDMyIiBTb3Vy"
"Y2VUeXBlPSJ0bnM6Tm9kZUF0dHJpYnV0ZXMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJVc2Vy"
"V3JpdGVNYXNrIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgU291cmNlVHlwZT0idG5zOk5vZGVBdHRy"
"aWJ1dGVzIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iVmFsdWUiIFR5cGVOYW1lPSJ1YTpWYXJp"
"YW50IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRGF0YVR5cGUiIFR5cGVOYW1lPSJ1YTpOb2Rl"
"SWQiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJWYWx1ZVJhbmsiIFR5cGVOYW1lPSJvcGM6SW50"
"MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mQXJyYXlEaW1lbnNpb25zIiBUeXBlTmFt"
"ZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iQXJyYXlEaW1lbnNpb25zIiBU"
"eXBlTmFtZT0ib3BjOlVJbnQzMiIgTGVuZ3RoRmllbGQ9Ik5vT2ZBcnJheURpbWVuc2lvbnMiIC8+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJBY2Nlc3NMZXZlbCIgVHlwZU5hbWU9Im9wYzpCeXRlIiAv"
"Pg0KICAgIDxvcGM6RmllbGQgTmFtZT0iVXNlckFjY2Vzc0xldmVsIiBUeXBlTmFtZT0ib3BjOkJ5"
"dGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJNaW5pbXVtU2FtcGxpbmdJbnRlcnZhbCIgVHlw"
"ZU5hbWU9Im9wYzpEb3VibGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJIaXN0b3JpemluZyIg"
"VHlwZU5hbWU9Im9wYzpCb29sZWFuIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8"
"b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9Ik1ldGhvZEF0dHJpYnV0ZXMiIEJhc2VUeXBlPSJ0bnM6"
"Tm9kZUF0dHJpYnV0ZXMiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5UaGUgYXR0cmlidXRlcyBm"
"b3IgYSBtZXRob2Qgbm9kZS48L29wYzpEb2N1bWVudGF0aW9uPg0KICAgIDxvcGM6RmllbGQgTmFt"
"ZT0iU3BlY2lmaWVkQXR0cmlidXRlcyIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIFNvdXJjZVR5cGU9"
"InRuczpOb2RlQXR0cmlidXRlcyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkRpc3BsYXlOYW1l"
"IiBUeXBlTmFtZT0idWE6TG9jYWxpemVkVGV4dCIgU291cmNlVHlwZT0idG5zOk5vZGVBdHRyaWJ1"
"dGVzIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRGVzY3JpcHRpb24iIFR5cGVOYW1lPSJ1YTpM"
"b2NhbGl6ZWRUZXh0IiBTb3VyY2VUeXBlPSJ0bnM6Tm9kZUF0dHJpYnV0ZXMiIC8+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJXcml0ZU1hc2siIFR5cGVOYW1lPSJvcGM6VUludDMyIiBTb3VyY2VUeXBl"
"PSJ0bnM6Tm9kZUF0dHJpYnV0ZXMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJVc2VyV3JpdGVN"
"YXNrIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgU291cmNlVHlwZT0idG5zOk5vZGVBdHRyaWJ1dGVz"
"IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRXhlY3V0YWJsZSIgVHlwZU5hbWU9Im9wYzpCb29s"
"ZWFuIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iVXNlckV4ZWN1dGFibGUiIFR5cGVOYW1lPSJv"
"cGM6Qm9vbGVhbiIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1"
"cmVkVHlwZSBOYW1lPSJPYmplY3RUeXBlQXR0cmlidXRlcyIgQmFzZVR5cGU9InRuczpOb2RlQXR0"
"cmlidXRlcyI+DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPlRoZSBhdHRyaWJ1dGVzIGZvciBhbiBv"
"YmplY3QgdHlwZSBub2RlLjwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpGaWVsZCBOYW1l"
"PSJTcGVjaWZpZWRBdHRyaWJ1dGVzIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgU291cmNlVHlwZT0i"
"dG5zOk5vZGVBdHRyaWJ1dGVzIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRGlzcGxheU5hbWUi"
"IFR5cGVOYW1lPSJ1YTpMb2NhbGl6ZWRUZXh0IiBTb3VyY2VUeXBlPSJ0bnM6Tm9kZUF0dHJpYnV0"
"ZXMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJEZXNjcmlwdGlvbiIgVHlwZU5hbWU9InVhOkxv"
"Y2FsaXplZFRleHQiIFNvdXJjZVR5cGU9InRuczpOb2RlQXR0cmlidXRlcyIgLz4NCiAgICA8b3Bj"
"OkZpZWxkIE5hbWU9IldyaXRlTWFzayIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIFNvdXJjZVR5cGU9"
"InRuczpOb2RlQXR0cmlidXRlcyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlVzZXJXcml0ZU1h"
"c2siIFR5cGVOYW1lPSJvcGM6VUludDMyIiBTb3VyY2VUeXBlPSJ0bnM6Tm9kZUF0dHJpYnV0ZXMi"
"IC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJJc0Fic3RyYWN0IiBUeXBlTmFtZT0ib3BjOkJvb2xl"
"YW4iIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUg"
"TmFtZT0iVmFyaWFibGVUeXBlQXR0cmlidXRlcyIgQmFzZVR5cGU9InRuczpOb2RlQXR0cmlidXRl"
"cyI+DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPlRoZSBhdHRyaWJ1dGVzIGZvciBhIHZhcmlhYmxl"
"IHR5cGUgbm9kZS48L29wYzpEb2N1bWVudGF0aW9uPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iU3Bl"
"Y2lmaWVkQXR0cmlidXRlcyIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIFNvdXJjZVR5cGU9InRuczpO"
"b2RlQXR0cmlidXRlcyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkRpc3BsYXlOYW1lIiBUeXBl"
"TmFtZT0idWE6TG9jYWxpemVkVGV4dCIgU291cmNlVHlwZT0idG5zOk5vZGVBdHRyaWJ1dGVzIiAv"
"Pg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRGVzY3JpcHRpb24iIFR5cGVOYW1lPSJ1YTpMb2NhbGl6"
"ZWRUZXh0IiBTb3VyY2VUeXBlPSJ0bnM6Tm9kZUF0dHJpYnV0ZXMiIC8+DQogICAgPG9wYzpGaWVs"
"ZCBOYW1lPSJXcml0ZU1hc2siIFR5cGVOYW1lPSJvcGM6VUludDMyIiBTb3VyY2VUeXBlPSJ0bnM6"
"Tm9kZUF0dHJpYnV0ZXMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJVc2VyV3JpdGVNYXNrIiBU"
"eXBlTmFtZT0ib3BjOlVJbnQzMiIgU291cmNlVHlwZT0idG5zOk5vZGVBdHRyaWJ1dGVzIiAvPg0K"
"ICAgIDxvcGM6RmllbGQgTmFtZT0iVmFsdWUiIFR5cGVOYW1lPSJ1YTpWYXJpYW50IiAvPg0KICAg"
"IDxvcGM6RmllbGQgTmFtZT0iRGF0YVR5cGUiIFR5cGVOYW1lPSJ1YTpOb2RlSWQiIC8+DQogICAg"
"PG9wYzpGaWVsZCBOYW1lPSJWYWx1ZVJhbmsiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAg"
"PG9wYzpGaWVsZCBOYW1lPSJOb09mQXJyYXlEaW1lbnNpb25zIiBUeXBlTmFtZT0ib3BjOkludDMy"
"IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iQXJyYXlEaW1lbnNpb25zIiBUeXBlTmFtZT0ib3Bj"
"OlVJbnQzMiIgTGVuZ3RoRmllbGQ9Ik5vT2ZBcnJheURpbWVuc2lvbnMiIC8+DQogICAgPG9wYzpG"
"aWVsZCBOYW1lPSJJc0Fic3RyYWN0IiBUeXBlTmFtZT0ib3BjOkJvb2xlYW4iIC8+DQogIDwvb3Bj"
"OlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iUmVmZXJlbmNl"
"VHlwZUF0dHJpYnV0ZXMiIEJhc2VUeXBlPSJ0bnM6Tm9kZUF0dHJpYnV0ZXMiPg0KICAgIDxvcGM6"
"RG9jdW1lbnRhdGlvbj5UaGUgYXR0cmlidXRlcyBmb3IgYSByZWZlcmVuY2UgdHlwZSBub2RlLjwv"
"b3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTcGVjaWZpZWRBdHRyaWJ1"
"dGVzIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgU291cmNlVHlwZT0idG5zOk5vZGVBdHRyaWJ1dGVz"
"IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRGlzcGxheU5hbWUiIFR5cGVOYW1lPSJ1YTpMb2Nh"
"bGl6ZWRUZXh0IiBTb3VyY2VUeXBlPSJ0bnM6Tm9kZUF0dHJpYnV0ZXMiIC8+DQogICAgPG9wYzpG"
"aWVsZCBOYW1lPSJEZXNjcmlwdGlvbiIgVHlwZU5hbWU9InVhOkxvY2FsaXplZFRleHQiIFNvdXJj"
"ZVR5cGU9InRuczpOb2RlQXR0cmlidXRlcyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IldyaXRl"
"TWFzayIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIFNvdXJjZVR5cGU9InRuczpOb2RlQXR0cmlidXRl"
"cyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlVzZXJXcml0ZU1hc2siIFR5cGVOYW1lPSJvcGM6"
"VUludDMyIiBTb3VyY2VUeXBlPSJ0bnM6Tm9kZUF0dHJpYnV0ZXMiIC8+DQogICAgPG9wYzpGaWVs"
"ZCBOYW1lPSJJc0Fic3RyYWN0IiBUeXBlTmFtZT0ib3BjOkJvb2xlYW4iIC8+DQogICAgPG9wYzpG"
"aWVsZCBOYW1lPSJTeW1tZXRyaWMiIFR5cGVOYW1lPSJvcGM6Qm9vbGVhbiIgLz4NCiAgICA8b3Bj"
"OkZpZWxkIE5hbWU9IkludmVyc2VOYW1lIiBUeXBlTmFtZT0idWE6TG9jYWxpemVkVGV4dCIgLz4N"
"CiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJE"
"YXRhVHlwZUF0dHJpYnV0ZXMiIEJhc2VUeXBlPSJ0bnM6Tm9kZUF0dHJpYnV0ZXMiPg0KICAgIDxv"
"cGM6RG9jdW1lbnRhdGlvbj5UaGUgYXR0cmlidXRlcyBmb3IgYSBkYXRhIHR5cGUgbm9kZS48L29w"
"YzpEb2N1bWVudGF0aW9uPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iU3BlY2lmaWVkQXR0cmlidXRl"
"cyIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIFNvdXJjZVR5cGU9InRuczpOb2RlQXR0cmlidXRlcyIg"
"Lz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkRpc3BsYXlOYW1lIiBUeXBlTmFtZT0idWE6TG9jYWxp"
"emVkVGV4dCIgU291cmNlVHlwZT0idG5zOk5vZGVBdHRyaWJ1dGVzIiAvPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iRGVzY3JpcHRpb24iIFR5cGVOYW1lPSJ1YTpMb2NhbGl6ZWRUZXh0IiBTb3VyY2VU"
"eXBlPSJ0bnM6Tm9kZUF0dHJpYnV0ZXMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJXcml0ZU1h"
"c2siIFR5cGVOYW1lPSJvcGM6VUludDMyIiBTb3VyY2VUeXBlPSJ0bnM6Tm9kZUF0dHJpYnV0ZXMi"
"IC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJVc2VyV3JpdGVNYXNrIiBUeXBlTmFtZT0ib3BjOlVJ"
"bnQzMiIgU291cmNlVHlwZT0idG5zOk5vZGVBdHRyaWJ1dGVzIiAvPg0KICAgIDxvcGM6RmllbGQg"
"TmFtZT0iSXNBYnN0cmFjdCIgVHlwZU5hbWU9Im9wYzpCb29sZWFuIiAvPg0KICA8L29wYzpTdHJ1"
"Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IlZpZXdBdHRyaWJ1dGVz"
"IiBCYXNlVHlwZT0idG5zOk5vZGVBdHRyaWJ1dGVzIj4NCiAgICA8b3BjOkRvY3VtZW50YXRpb24+"
"VGhlIGF0dHJpYnV0ZXMgZm9yIGEgdmlldyBub2RlLjwvb3BjOkRvY3VtZW50YXRpb24+DQogICAg"
"PG9wYzpGaWVsZCBOYW1lPSJTcGVjaWZpZWRBdHRyaWJ1dGVzIiBUeXBlTmFtZT0ib3BjOlVJbnQz"
"MiIgU291cmNlVHlwZT0idG5zOk5vZGVBdHRyaWJ1dGVzIiAvPg0KICAgIDxvcGM6RmllbGQgTmFt"
"ZT0iRGlzcGxheU5hbWUiIFR5cGVOYW1lPSJ1YTpMb2NhbGl6ZWRUZXh0IiBTb3VyY2VUeXBlPSJ0"
"bnM6Tm9kZUF0dHJpYnV0ZXMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJEZXNjcmlwdGlvbiIg"
"VHlwZU5hbWU9InVhOkxvY2FsaXplZFRleHQiIFNvdXJjZVR5cGU9InRuczpOb2RlQXR0cmlidXRl"
"cyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IldyaXRlTWFzayIgVHlwZU5hbWU9Im9wYzpVSW50"
"MzIiIFNvdXJjZVR5cGU9InRuczpOb2RlQXR0cmlidXRlcyIgLz4NCiAgICA8b3BjOkZpZWxkIE5h"
"bWU9IlVzZXJXcml0ZU1hc2siIFR5cGVOYW1lPSJvcGM6VUludDMyIiBTb3VyY2VUeXBlPSJ0bnM6"
"Tm9kZUF0dHJpYnV0ZXMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJDb250YWluc05vTG9vcHMi"
"IFR5cGVOYW1lPSJvcGM6Qm9vbGVhbiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkV2ZW50Tm90"
"aWZpZXIiIFR5cGVOYW1lPSJvcGM6Qnl0ZSIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoN"
"CiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJBZGROb2Rlc0l0ZW0iIEJhc2VUeXBlPSJ1YTpF"
"eHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5BIHJlcXVlc3QgdG8gYWRk"
"IGEgbm9kZSB0byB0aGUgc2VydmVyIGFkZHJlc3Mgc3BhY2UuPC9vcGM6RG9jdW1lbnRhdGlvbj4N"
"CiAgICA8b3BjOkZpZWxkIE5hbWU9IlBhcmVudE5vZGVJZCIgVHlwZU5hbWU9InVhOkV4cGFuZGVk"
"Tm9kZUlkIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVmZXJlbmNlVHlwZUlkIiBUeXBlTmFt"
"ZT0idWE6Tm9kZUlkIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVxdWVzdGVkTmV3Tm9kZUlk"
"IiBUeXBlTmFtZT0idWE6RXhwYW5kZWROb2RlSWQiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJC"
"cm93c2VOYW1lIiBUeXBlTmFtZT0idWE6UXVhbGlmaWVkTmFtZSIgLz4NCiAgICA8b3BjOkZpZWxk"
"IE5hbWU9Ik5vZGVDbGFzcyIgVHlwZU5hbWU9InRuczpOb2RlQ2xhc3MiIC8+DQogICAgPG9wYzpG"
"aWVsZCBOYW1lPSJOb2RlQXR0cmlidXRlcyIgVHlwZU5hbWU9InVhOkV4dGVuc2lvbk9iamVjdCIg"
"Lz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlR5cGVEZWZpbml0aW9uIiBUeXBlTmFtZT0idWE6RXhw"
"YW5kZWROb2RlSWQiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0"
"dXJlZFR5cGUgTmFtZT0iQWRkTm9kZXNSZXN1bHQiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmpl"
"Y3QiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5BIHJlc3VsdCBvZiBhbiBhZGQgbm9kZSBvcGVy"
"YXRpb24uPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlN0YXR1c0Nv"
"ZGUiIFR5cGVOYW1lPSJ1YTpTdGF0dXNDb2RlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iQWRk"
"ZWROb2RlSWQiIFR5cGVOYW1lPSJ1YTpOb2RlSWQiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBl"
"Pg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iQWRkTm9kZXNSZXF1ZXN0IiBCYXNlVHlw"
"ZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkRvY3VtZW50YXRpb24+QWRkcyBvbmUg"
"b3IgbW9yZSBub2RlcyB0byB0aGUgc2VydmVyIGFkZHJlc3Mgc3BhY2UuPC9vcGM6RG9jdW1lbnRh"
"dGlvbj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlcXVlc3RIZWFkZXIiIFR5cGVOYW1lPSJ0bnM6"
"UmVxdWVzdEhlYWRlciIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZOb2Rlc1RvQWRkIiBU"
"eXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9kZXNUb0FkZCIg"
"VHlwZU5hbWU9InRuczpBZGROb2Rlc0l0ZW0iIExlbmd0aEZpZWxkPSJOb09mTm9kZXNUb0FkZCIg"
"Lz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1l"
"PSJBZGROb2Rlc1Jlc3BvbnNlIiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8"
"b3BjOkRvY3VtZW50YXRpb24+QWRkcyBvbmUgb3IgbW9yZSBub2RlcyB0byB0aGUgc2VydmVyIGFk"
"ZHJlc3Mgc3BhY2UuPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJl"
"c3BvbnNlSGVhZGVyIiBUeXBlTmFtZT0idG5zOlJlc3BvbnNlSGVhZGVyIiAvPg0KICAgIDxvcGM6"
"RmllbGQgTmFtZT0iTm9PZlJlc3VsdHMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJSZXN1bHRzIiBUeXBlTmFtZT0idG5zOkFkZE5vZGVzUmVzdWx0IiBMZW5n"
"dGhGaWVsZD0iTm9PZlJlc3VsdHMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mRGlhZ25v"
"c3RpY0luZm9zIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0i"
"RGlhZ25vc3RpY0luZm9zIiBUeXBlTmFtZT0idWE6RGlhZ25vc3RpY0luZm8iIExlbmd0aEZpZWxk"
"PSJOb09mRGlhZ25vc3RpY0luZm9zIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8"
"b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IkFkZFJlZmVyZW5jZXNJdGVtIiBCYXNlVHlwZT0idWE6"
"RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkRvY3VtZW50YXRpb24+QSByZXF1ZXN0IHRvIGFk"
"ZCBhIHJlZmVyZW5jZSB0byB0aGUgc2VydmVyIGFkZHJlc3Mgc3BhY2UuPC9vcGM6RG9jdW1lbnRh"
"dGlvbj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlNvdXJjZU5vZGVJZCIgVHlwZU5hbWU9InVhOk5v"
"ZGVJZCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlZmVyZW5jZVR5cGVJZCIgVHlwZU5hbWU9"
"InVhOk5vZGVJZCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IklzRm9yd2FyZCIgVHlwZU5hbWU9"
"Im9wYzpCb29sZWFuIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iVGFyZ2V0U2VydmVyVXJpIiBU"
"eXBlTmFtZT0ib3BjOlN0cmluZyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlRhcmdldE5vZGVJ"
"ZCIgVHlwZU5hbWU9InVhOkV4cGFuZGVkTm9kZUlkIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0i"
"VGFyZ2V0Tm9kZUNsYXNzIiBUeXBlTmFtZT0idG5zOk5vZGVDbGFzcyIgLz4NCiAgPC9vcGM6U3Ry"
"dWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJBZGRSZWZlcmVuY2Vz"
"UmVxdWVzdCIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpEb2N1bWVu"
"dGF0aW9uPkFkZHMgb25lIG9yIG1vcmUgcmVmZXJlbmNlcyB0byB0aGUgc2VydmVyIGFkZHJlc3Mg"
"c3BhY2UuPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlcXVlc3RI"
"ZWFkZXIiIFR5cGVOYW1lPSJ0bnM6UmVxdWVzdEhlYWRlciIgLz4NCiAgICA8b3BjOkZpZWxkIE5h"
"bWU9Ik5vT2ZSZWZlcmVuY2VzVG9BZGQiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJSZWZlcmVuY2VzVG9BZGQiIFR5cGVOYW1lPSJ0bnM6QWRkUmVmZXJlbmNl"
"c0l0ZW0iIExlbmd0aEZpZWxkPSJOb09mUmVmZXJlbmNlc1RvQWRkIiAvPg0KICA8L29wYzpTdHJ1"
"Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IkFkZFJlZmVyZW5jZXNS"
"ZXNwb25zZSIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpEb2N1bWVu"
"dGF0aW9uPkFkZHMgb25lIG9yIG1vcmUgcmVmZXJlbmNlcyB0byB0aGUgc2VydmVyIGFkZHJlc3Mg"
"c3BhY2UuPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlc3BvbnNl"
"SGVhZGVyIiBUeXBlTmFtZT0idG5zOlJlc3BvbnNlSGVhZGVyIiAvPg0KICAgIDxvcGM6RmllbGQg"
"TmFtZT0iTm9PZlJlc3VsdHMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVs"
"ZCBOYW1lPSJSZXN1bHRzIiBUeXBlTmFtZT0idWE6U3RhdHVzQ29kZSIgTGVuZ3RoRmllbGQ9Ik5v"
"T2ZSZXN1bHRzIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZkRpYWdub3N0aWNJbmZvcyIg"
"VHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkRpYWdub3N0aWNJ"
"bmZvcyIgVHlwZU5hbWU9InVhOkRpYWdub3N0aWNJbmZvIiBMZW5ndGhGaWVsZD0iTm9PZkRpYWdu"
"b3N0aWNJbmZvcyIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1"
"cmVkVHlwZSBOYW1lPSJEZWxldGVOb2Rlc0l0ZW0iIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmpl"
"Y3QiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5BIHJlcXVlc3QgdG8gZGVsZXRlIGEgbm9kZSB0"
"byB0aGUgc2VydmVyIGFkZHJlc3Mgc3BhY2UuPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8b3Bj"
"OkZpZWxkIE5hbWU9Ik5vZGVJZCIgVHlwZU5hbWU9InVhOk5vZGVJZCIgLz4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9IkRlbGV0ZVRhcmdldFJlZmVyZW5jZXMiIFR5cGVOYW1lPSJvcGM6Qm9vbGVhbiIg"
"Lz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1l"
"PSJEZWxldGVOb2Rlc1JlcXVlc3QiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAg"
"IDxvcGM6RG9jdW1lbnRhdGlvbj5EZWxldGUgb25lIG9yIG1vcmUgbm9kZXMgZnJvbSB0aGUgc2Vy"
"dmVyIGFkZHJlc3Mgc3BhY2UuPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8b3BjOkZpZWxkIE5h"
"bWU9IlJlcXVlc3RIZWFkZXIiIFR5cGVOYW1lPSJ0bnM6UmVxdWVzdEhlYWRlciIgLz4NCiAgICA8"
"b3BjOkZpZWxkIE5hbWU9Ik5vT2ZOb2Rlc1RvRGVsZXRlIiBUeXBlTmFtZT0ib3BjOkludDMyIiAv"
"Pg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9kZXNUb0RlbGV0ZSIgVHlwZU5hbWU9InRuczpEZWxl"
"dGVOb2Rlc0l0ZW0iIExlbmd0aEZpZWxkPSJOb09mTm9kZXNUb0RlbGV0ZSIgLz4NCiAgPC9vcGM6"
"U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJEZWxldGVOb2Rl"
"c1Jlc3BvbnNlIiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkRvY3Vt"
"ZW50YXRpb24+RGVsZXRlIG9uZSBvciBtb3JlIG5vZGVzIGZyb20gdGhlIHNlcnZlciBhZGRyZXNz"
"IHNwYWNlLjwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXNwb25z"
"ZUhlYWRlciIgVHlwZU5hbWU9InRuczpSZXNwb25zZUhlYWRlciIgLz4NCiAgICA8b3BjOkZpZWxk"
"IE5hbWU9Ik5vT2ZSZXN1bHRzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iUmVzdWx0cyIgVHlwZU5hbWU9InVhOlN0YXR1c0NvZGUiIExlbmd0aEZpZWxkPSJO"
"b09mUmVzdWx0cyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZEaWFnbm9zdGljSW5mb3Mi"
"IFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJEaWFnbm9zdGlj"
"SW5mb3MiIFR5cGVOYW1lPSJ1YTpEaWFnbm9zdGljSW5mbyIgTGVuZ3RoRmllbGQ9Ik5vT2ZEaWFn"
"bm9zdGljSW5mb3MiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0"
"dXJlZFR5cGUgTmFtZT0iRGVsZXRlUmVmZXJlbmNlc0l0ZW0iIEJhc2VUeXBlPSJ1YTpFeHRlbnNp"
"b25PYmplY3QiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5BIHJlcXVlc3QgdG8gZGVsZXRlIGEg"
"bm9kZSBmcm9tIHRoZSBzZXJ2ZXIgYWRkcmVzcyBzcGFjZS48L29wYzpEb2N1bWVudGF0aW9uPg0K"
"ICAgIDxvcGM6RmllbGQgTmFtZT0iU291cmNlTm9kZUlkIiBUeXBlTmFtZT0idWE6Tm9kZUlkIiAv"
"Pg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVmZXJlbmNlVHlwZUlkIiBUeXBlTmFtZT0idWE6Tm9k"
"ZUlkIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iSXNGb3J3YXJkIiBUeXBlTmFtZT0ib3BjOkJv"
"b2xlYW4iIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJUYXJnZXROb2RlSWQiIFR5cGVOYW1lPSJ1"
"YTpFeHBhbmRlZE5vZGVJZCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkRlbGV0ZUJpZGlyZWN0"
"aW9uYWwiIFR5cGVOYW1lPSJvcGM6Qm9vbGVhbiIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+"
"DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJEZWxldGVSZWZlcmVuY2VzUmVxdWVzdCIg"
"QmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPkRl"
"bGV0ZSBvbmUgb3IgbW9yZSByZWZlcmVuY2VzIGZyb20gdGhlIHNlcnZlciBhZGRyZXNzIHNwYWNl"
"Ljwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXF1ZXN0SGVhZGVy"
"IiBUeXBlTmFtZT0idG5zOlJlcXVlc3RIZWFkZXIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJO"
"b09mUmVmZXJlbmNlc1RvRGVsZXRlIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6"
"RmllbGQgTmFtZT0iUmVmZXJlbmNlc1RvRGVsZXRlIiBUeXBlTmFtZT0idG5zOkRlbGV0ZVJlZmVy"
"ZW5jZXNJdGVtIiBMZW5ndGhGaWVsZD0iTm9PZlJlZmVyZW5jZXNUb0RlbGV0ZSIgLz4NCiAgPC9v"
"cGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJEZWxldGVS"
"ZWZlcmVuY2VzUmVzcG9uc2UiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxv"
"cGM6RG9jdW1lbnRhdGlvbj5EZWxldGUgb25lIG9yIG1vcmUgcmVmZXJlbmNlcyBmcm9tIHRoZSBz"
"ZXJ2ZXIgYWRkcmVzcyBzcGFjZS48L29wYzpEb2N1bWVudGF0aW9uPg0KICAgIDxvcGM6RmllbGQg"
"TmFtZT0iUmVzcG9uc2VIZWFkZXIiIFR5cGVOYW1lPSJ0bnM6UmVzcG9uc2VIZWFkZXIiIC8+DQog"
"ICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mUmVzdWx0cyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4N"
"CiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlc3VsdHMiIFR5cGVOYW1lPSJ1YTpTdGF0dXNDb2RlIiBM"
"ZW5ndGhGaWVsZD0iTm9PZlJlc3VsdHMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mRGlh"
"Z25vc3RpY0luZm9zIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFt"
"ZT0iRGlhZ25vc3RpY0luZm9zIiBUeXBlTmFtZT0idWE6RGlhZ25vc3RpY0luZm8iIExlbmd0aEZp"
"ZWxkPSJOb09mRGlhZ25vc3RpY0luZm9zIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0K"
"ICA8b3BjOkVudW1lcmF0ZWRUeXBlIE5hbWU9IkF0dHJpYnV0ZVdyaXRlTWFzayIgTGVuZ3RoSW5C"
"aXRzPSIzMiI+DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPkRlZmluZSBiaXRzIHVzZWQgdG8gaW5k"
"aWNhdGUgd2hpY2ggYXR0cmlidXRlcyBhcmUgd3JpdGVhYmxlLjwvb3BjOkRvY3VtZW50YXRpb24+"
"DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iTm9uZSIgVmFsdWU9IjAiIC8+DQogICAg"
"PG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iQWNjZXNzTGV2ZWwiIFZhbHVlPSIxIiAvPg0KICAg"
"IDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IkFycmF5RGltZW5zaW9ucyIgVmFsdWU9IjIiIC8+"
"DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iQnJvd3NlTmFtZSIgVmFsdWU9IjQiIC8+"
"DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iQ29udGFpbnNOb0xvb3BzIiBWYWx1ZT0i"
"OCIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJEYXRhVHlwZSIgVmFsdWU9IjE2"
"IiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IkRlc2NyaXB0aW9uIiBWYWx1ZT0i"
"MzIiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iRGlzcGxheU5hbWUiIFZhbHVl"
"PSI2NCIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJFdmVudE5vdGlmaWVyIiBW"
"YWx1ZT0iMTI4IiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IkV4ZWN1dGFibGUi"
"IFZhbHVlPSIyNTYiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iSGlzdG9yaXpp"
"bmciIFZhbHVlPSI1MTIiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iSW52ZXJz"
"ZU5hbWUiIFZhbHVlPSIxMDI0IiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9Iklz"
"QWJzdHJhY3QiIFZhbHVlPSIyMDQ4IiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9"
"Ik1pbmltdW1TYW1wbGluZ0ludGVydmFsIiBWYWx1ZT0iNDA5NiIgLz4NCiAgICA8b3BjOkVudW1l"
"cmF0ZWRWYWx1ZSBOYW1lPSJOb2RlQ2xhc3MiIFZhbHVlPSI4MTkyIiAvPg0KICAgIDxvcGM6RW51"
"bWVyYXRlZFZhbHVlIE5hbWU9Ik5vZGVJZCIgVmFsdWU9IjE2Mzg0IiAvPg0KICAgIDxvcGM6RW51"
"bWVyYXRlZFZhbHVlIE5hbWU9IlN5bW1ldHJpYyIgVmFsdWU9IjMyNzY4IiAvPg0KICAgIDxvcGM6"
"RW51bWVyYXRlZFZhbHVlIE5hbWU9IlVzZXJBY2Nlc3NMZXZlbCIgVmFsdWU9IjY1NTM2IiAvPg0K"
"ICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IlVzZXJFeGVjdXRhYmxlIiBWYWx1ZT0iMTMx"
"MDcyIiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IlVzZXJXcml0ZU1hc2siIFZh"
"bHVlPSIyNjIxNDQiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iVmFsdWVSYW5r"
"IiBWYWx1ZT0iNTI0Mjg4IiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IldyaXRl"
"TWFzayIgVmFsdWU9IjEwNDg1NzYiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0i"
"VmFsdWVGb3JWYXJpYWJsZVR5cGUiIFZhbHVlPSIyMDk3MTUyIiAvPg0KICA8L29wYzpFbnVtZXJh"
"dGVkVHlwZT4NCg0KICA8b3BjOkVudW1lcmF0ZWRUeXBlIE5hbWU9IkJyb3dzZURpcmVjdGlvbiIg"
"TGVuZ3RoSW5CaXRzPSIzMiI+DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPlRoZSBkaXJlY3Rpb25z"
"IG9mIHRoZSByZWZlcmVuY2VzIHRvIHJldHVybi48L29wYzpEb2N1bWVudGF0aW9uPg0KICAgIDxv"
"cGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IkZvcndhcmQiIFZhbHVlPSIwIiAvPg0KICAgIDxvcGM6"
"RW51bWVyYXRlZFZhbHVlIE5hbWU9IkludmVyc2UiIFZhbHVlPSIxIiAvPg0KICAgIDxvcGM6RW51"
"bWVyYXRlZFZhbHVlIE5hbWU9IkJvdGgiIFZhbHVlPSIyIiAvPg0KICA8L29wYzpFbnVtZXJhdGVk"
"VHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IlZpZXdEZXNjcmlwdGlvbiIgQmFz"
"ZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPlRoZSB2"
"aWV3IHRvIGJyb3dzZS48L29wYzpEb2N1bWVudGF0aW9uPg0KICAgIDxvcGM6RmllbGQgTmFtZT0i"
"Vmlld0lkIiBUeXBlTmFtZT0idWE6Tm9kZUlkIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iVGlt"
"ZXN0YW1wIiBUeXBlTmFtZT0ib3BjOkRhdGVUaW1lIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0i"
"Vmlld1ZlcnNpb24iIFR5cGVOYW1lPSJvcGM6VUludDMyIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVk"
"VHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IkJyb3dzZURlc2NyaXB0aW9uIiBC"
"YXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkRvY3VtZW50YXRpb24+QSBy"
"ZXF1ZXN0IHRvIGJyb3dzZSB0aGUgdGhlIHJlZmVyZW5jZXMgZnJvbSBhIG5vZGUuPC9vcGM6RG9j"
"dW1lbnRhdGlvbj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vZGVJZCIgVHlwZU5hbWU9InVhOk5v"
"ZGVJZCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkJyb3dzZURpcmVjdGlvbiIgVHlwZU5hbWU9"
"InRuczpCcm93c2VEaXJlY3Rpb24iIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZWZlcmVuY2VU"
"eXBlSWQiIFR5cGVOYW1lPSJ1YTpOb2RlSWQiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJJbmNs"
"dWRlU3VidHlwZXMiIFR5cGVOYW1lPSJvcGM6Qm9vbGVhbiIgLz4NCiAgICA8b3BjOkZpZWxkIE5h"
"bWU9Ik5vZGVDbGFzc01hc2siIFR5cGVOYW1lPSJvcGM6VUludDMyIiAvPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iUmVzdWx0TWFzayIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIC8+DQogIDwvb3BjOlN0"
"cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6RW51bWVyYXRlZFR5cGUgTmFtZT0iQnJvd3NlUmVzdWx0"
"TWFzayIgTGVuZ3RoSW5CaXRzPSIzMiI+DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPkEgYml0IG1h"
"c2sgd2hpY2ggc3BlY2lmaWVzIHdoYXQgc2hvdWxkIGJlIHJldHVybmVkIGluIGEgYnJvd3NlIHJl"
"c3BvbnNlLjwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFt"
"ZT0iTm9uZSIgVmFsdWU9IjAiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iUmVm"
"ZXJlbmNlVHlwZUlkIiBWYWx1ZT0iMSIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1l"
"PSJJc0ZvcndhcmQiIFZhbHVlPSIyIiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9"
"Ik5vZGVDbGFzcyIgVmFsdWU9IjQiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0i"
"QnJvd3NlTmFtZSIgVmFsdWU9IjgiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0i"
"RGlzcGxheU5hbWUiIFZhbHVlPSIxNiIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1l"
"PSJUeXBlRGVmaW5pdGlvbiIgVmFsdWU9IjMyIiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVl"
"IE5hbWU9IkFsbCIgVmFsdWU9IjYzIiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9"
"IlJlZmVyZW5jZVR5cGVJbmZvIiBWYWx1ZT0iMyIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1"
"ZSBOYW1lPSJUYXJnZXRJbmZvIiBWYWx1ZT0iNjAiIC8+DQogIDwvb3BjOkVudW1lcmF0ZWRUeXBl"
"Pg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iUmVmZXJlbmNlRGVzY3JpcHRpb24iIEJh"
"c2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5UaGUg"
"ZGVzY3JpcHRpb24gb2YgYSByZWZlcmVuY2UuPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8b3Bj"
"OkZpZWxkIE5hbWU9IlJlZmVyZW5jZVR5cGVJZCIgVHlwZU5hbWU9InVhOk5vZGVJZCIgLz4NCiAg"
"ICA8b3BjOkZpZWxkIE5hbWU9IklzRm9yd2FyZCIgVHlwZU5hbWU9Im9wYzpCb29sZWFuIiAvPg0K"
"ICAgIDxvcGM6RmllbGQgTmFtZT0iTm9kZUlkIiBUeXBlTmFtZT0idWE6RXhwYW5kZWROb2RlSWQi"
"IC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJCcm93c2VOYW1lIiBUeXBlTmFtZT0idWE6UXVhbGlm"
"aWVkTmFtZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkRpc3BsYXlOYW1lIiBUeXBlTmFtZT0i"
"dWE6TG9jYWxpemVkVGV4dCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vZGVDbGFzcyIgVHlw"
"ZU5hbWU9InRuczpOb2RlQ2xhc3MiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJUeXBlRGVmaW5p"
"dGlvbiIgVHlwZU5hbWU9InVhOkV4cGFuZGVkTm9kZUlkIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVk"
"VHlwZT4NCg0KICA8b3BjOk9wYXF1ZVR5cGUgTmFtZT0iQ29udGludWF0aW9uUG9pbnQiPg0KICAg"
"IDxvcGM6RG9jdW1lbnRhdGlvbj5BbiBpZGVudGlmaWVyIGZvciBhIHN1c3BlbmRlZCBxdWVyeSBv"
"ciBicm93c2Ugb3BlcmF0aW9uLjwvb3BjOkRvY3VtZW50YXRpb24+DQogIDwvb3BjOk9wYXF1ZVR5"
"cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJCcm93c2VSZXN1bHQiIEJhc2VUeXBl"
"PSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5UaGUgcmVzdWx0"
"IG9mIGEgYnJvd3NlIG9wZXJhdGlvbi48L29wYzpEb2N1bWVudGF0aW9uPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iU3RhdHVzQ29kZSIgVHlwZU5hbWU9InVhOlN0YXR1c0NvZGUiIC8+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJDb250aW51YXRpb25Qb2ludCIgVHlwZU5hbWU9Im9wYzpCeXRlU3RyaW5n"
"IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZlJlZmVyZW5jZXMiIFR5cGVOYW1lPSJvcGM6"
"SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZWZlcmVuY2VzIiBUeXBlTmFtZT0idG5z"
"OlJlZmVyZW5jZURlc2NyaXB0aW9uIiBMZW5ndGhGaWVsZD0iTm9PZlJlZmVyZW5jZXMiIC8+DQog"
"IDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iQnJv"
"d3NlUmVxdWVzdCIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpEb2N1"
"bWVudGF0aW9uPkJyb3dzZSB0aGUgcmVmZXJlbmNlcyBmb3Igb25lIG9yIG1vcmUgbm9kZXMgZnJv"
"bSB0aGUgc2VydmVyIGFkZHJlc3Mgc3BhY2UuPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8b3Bj"
"OkZpZWxkIE5hbWU9IlJlcXVlc3RIZWFkZXIiIFR5cGVOYW1lPSJ0bnM6UmVxdWVzdEhlYWRlciIg"
"Lz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlZpZXciIFR5cGVOYW1lPSJ0bnM6Vmlld0Rlc2NyaXB0"
"aW9uIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVxdWVzdGVkTWF4UmVmZXJlbmNlc1Blck5v"
"ZGUiIFR5cGVOYW1lPSJvcGM6VUludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZk5v"
"ZGVzVG9Ccm93c2UiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1l"
"PSJOb2Rlc1RvQnJvd3NlIiBUeXBlTmFtZT0idG5zOkJyb3dzZURlc2NyaXB0aW9uIiBMZW5ndGhG"
"aWVsZD0iTm9PZk5vZGVzVG9Ccm93c2UiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQog"
"IDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iQnJvd3NlUmVzcG9uc2UiIEJhc2VUeXBlPSJ1YTpF"
"eHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5Ccm93c2UgdGhlIHJlZmVy"
"ZW5jZXMgZm9yIG9uZSBvciBtb3JlIG5vZGVzIGZyb20gdGhlIHNlcnZlciBhZGRyZXNzIHNwYWNl"
"Ljwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXNwb25zZUhlYWRl"
"ciIgVHlwZU5hbWU9InRuczpSZXNwb25zZUhlYWRlciIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9"
"Ik5vT2ZSZXN1bHRzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFt"
"ZT0iUmVzdWx0cyIgVHlwZU5hbWU9InRuczpCcm93c2VSZXN1bHQiIExlbmd0aEZpZWxkPSJOb09m"
"UmVzdWx0cyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZEaWFnbm9zdGljSW5mb3MiIFR5"
"cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJEaWFnbm9zdGljSW5m"
"b3MiIFR5cGVOYW1lPSJ1YTpEaWFnbm9zdGljSW5mbyIgTGVuZ3RoRmllbGQ9Ik5vT2ZEaWFnbm9z"
"dGljSW5mb3MiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJl"
"ZFR5cGUgTmFtZT0iQnJvd3NlTmV4dFJlcXVlc3QiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmpl"
"Y3QiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5Db250aW51ZXMgb25lIG9yIG1vcmUgYnJvd3Nl"
"IG9wZXJhdGlvbnMuPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJl"
"cXVlc3RIZWFkZXIiIFR5cGVOYW1lPSJ0bnM6UmVxdWVzdEhlYWRlciIgLz4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9IlJlbGVhc2VDb250aW51YXRpb25Qb2ludHMiIFR5cGVOYW1lPSJvcGM6Qm9vbGVh"
"biIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZDb250aW51YXRpb25Qb2ludHMiIFR5cGVO"
"YW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJDb250aW51YXRpb25Qb2lu"
"dHMiIFR5cGVOYW1lPSJvcGM6Qnl0ZVN0cmluZyIgTGVuZ3RoRmllbGQ9Ik5vT2ZDb250aW51YXRp"
"b25Qb2ludHMiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJl"
"ZFR5cGUgTmFtZT0iQnJvd3NlTmV4dFJlc3BvbnNlIiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2Jq"
"ZWN0Ij4NCiAgICA8b3BjOkRvY3VtZW50YXRpb24+Q29udGludWVzIG9uZSBvciBtb3JlIGJyb3dz"
"ZSBvcGVyYXRpb25zLjwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJS"
"ZXNwb25zZUhlYWRlciIgVHlwZU5hbWU9InRuczpSZXNwb25zZUhlYWRlciIgLz4NCiAgICA8b3Bj"
"OkZpZWxkIE5hbWU9Ik5vT2ZSZXN1bHRzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxv"
"cGM6RmllbGQgTmFtZT0iUmVzdWx0cyIgVHlwZU5hbWU9InRuczpCcm93c2VSZXN1bHQiIExlbmd0"
"aEZpZWxkPSJOb09mUmVzdWx0cyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZEaWFnbm9z"
"dGljSW5mb3MiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJE"
"aWFnbm9zdGljSW5mb3MiIFR5cGVOYW1lPSJ1YTpEaWFnbm9zdGljSW5mbyIgTGVuZ3RoRmllbGQ9"
"Ik5vT2ZEaWFnbm9zdGljSW5mb3MiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxv"
"cGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iUmVsYXRpdmVQYXRoRWxlbWVudCIgQmFzZVR5cGU9InVh"
"OkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPkFuIGVsZW1lbnQgaW4g"
"YSByZWxhdGl2ZSBwYXRoLjwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpGaWVsZCBOYW1l"
"PSJSZWZlcmVuY2VUeXBlSWQiIFR5cGVOYW1lPSJ1YTpOb2RlSWQiIC8+DQogICAgPG9wYzpGaWVs"
"ZCBOYW1lPSJJc0ludmVyc2UiIFR5cGVOYW1lPSJvcGM6Qm9vbGVhbiIgLz4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9IkluY2x1ZGVTdWJ0eXBlcyIgVHlwZU5hbWU9Im9wYzpCb29sZWFuIiAvPg0KICAg"
"IDxvcGM6RmllbGQgTmFtZT0iVGFyZ2V0TmFtZSIgVHlwZU5hbWU9InVhOlF1YWxpZmllZE5hbWUi"
"IC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFt"
"ZT0iUmVsYXRpdmVQYXRoIiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3Bj"
"OkRvY3VtZW50YXRpb24+QSByZWxhdGl2ZSBwYXRoIGNvbnN0cnVjdGVkIGZyb20gcmVmZXJlbmNl"
"IHR5cGVzIGFuZCBicm93c2UgbmFtZXMuPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9Ik5vT2ZFbGVtZW50cyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3Bj"
"OkZpZWxkIE5hbWU9IkVsZW1lbnRzIiBUeXBlTmFtZT0idG5zOlJlbGF0aXZlUGF0aEVsZW1lbnQi"
"IExlbmd0aEZpZWxkPSJOb09mRWxlbWVudHMiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0K"
"DQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iQnJvd3NlUGF0aCIgQmFzZVR5cGU9InVhOkV4"
"dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpEb2N1bWVudGF0aW9uPkEgcmVxdWVzdCB0byB0cmFu"
"c2xhdGUgYSBwYXRoIGludG8gYSBub2RlIGlkLjwvb3BjOkRvY3VtZW50YXRpb24+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJTdGFydGluZ05vZGUiIFR5cGVOYW1lPSJ1YTpOb2RlSWQiIC8+DQogICAg"
"PG9wYzpGaWVsZCBOYW1lPSJSZWxhdGl2ZVBhdGgiIFR5cGVOYW1lPSJ0bnM6UmVsYXRpdmVQYXRo"
"IiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5h"
"bWU9IkJyb3dzZVBhdGhUYXJnZXQiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAg"
"IDxvcGM6RG9jdW1lbnRhdGlvbj5UaGUgdGFyZ2V0IG9mIHRoZSB0cmFuc2xhdGVkIHBhdGguPC9v"
"cGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlRhcmdldElkIiBUeXBlTmFt"
"ZT0idWE6RXhwYW5kZWROb2RlSWQiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZW1haW5pbmdQ"
"YXRoSW5kZXgiIFR5cGVOYW1lPSJvcGM6VUludDMyIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlw"
"ZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IkJyb3dzZVBhdGhSZXN1bHQiIEJhc2VU"
"eXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5UaGUgcmVz"
"dWx0IG9mIGEgdHJhbnNsYXRlIG9wZWFyYXRpb24uPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8"
"b3BjOkZpZWxkIE5hbWU9IlN0YXR1c0NvZGUiIFR5cGVOYW1lPSJ1YTpTdGF0dXNDb2RlIiAvPg0K"
"ICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZlRhcmdldHMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJUYXJnZXRzIiBUeXBlTmFtZT0idG5zOkJyb3dzZVBhdGhU"
"YXJnZXQiIExlbmd0aEZpZWxkPSJOb09mVGFyZ2V0cyIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5"
"cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJUcmFuc2xhdGVCcm93c2VQYXRoc1Rv"
"Tm9kZUlkc1JlcXVlc3QiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6"
"RG9jdW1lbnRhdGlvbj5UcmFuc2xhdGVzIG9uZSBvciBtb3JlIHBhdGhzIGluIHRoZSBzZXJ2ZXIg"
"YWRkcmVzcyBzcGFjZS48L29wYzpEb2N1bWVudGF0aW9uPg0KICAgIDxvcGM6RmllbGQgTmFtZT0i"
"UmVxdWVzdEhlYWRlciIgVHlwZU5hbWU9InRuczpSZXF1ZXN0SGVhZGVyIiAvPg0KICAgIDxvcGM6"
"RmllbGQgTmFtZT0iTm9PZkJyb3dzZVBhdGhzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAg"
"IDxvcGM6RmllbGQgTmFtZT0iQnJvd3NlUGF0aHMiIFR5cGVOYW1lPSJ0bnM6QnJvd3NlUGF0aCIg"
"TGVuZ3RoRmllbGQ9Ik5vT2ZCcm93c2VQYXRocyIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+"
"DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJUcmFuc2xhdGVCcm93c2VQYXRoc1RvTm9k"
"ZUlkc1Jlc3BvbnNlIiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkRv"
"Y3VtZW50YXRpb24+VHJhbnNsYXRlcyBvbmUgb3IgbW9yZSBwYXRocyBpbiB0aGUgc2VydmVyIGFk"
"ZHJlc3Mgc3BhY2UuPC9vcGM6RG9jdW1lbnRhdGlvbj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJl"
"c3BvbnNlSGVhZGVyIiBUeXBlTmFtZT0idG5zOlJlc3BvbnNlSGVhZGVyIiAvPg0KICAgIDxvcGM6"
"RmllbGQgTmFtZT0iTm9PZlJlc3VsdHMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJSZXN1bHRzIiBUeXBlTmFtZT0idG5zOkJyb3dzZVBhdGhSZXN1bHQiIExl"
"bmd0aEZpZWxkPSJOb09mUmVzdWx0cyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZEaWFn"
"bm9zdGljSW5mb3MiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1l"
"PSJEaWFnbm9zdGljSW5mb3MiIFR5cGVOYW1lPSJ1YTpEaWFnbm9zdGljSW5mbyIgTGVuZ3RoRmll"
"bGQ9Ik5vT2ZEaWFnbm9zdGljSW5mb3MiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQog"
"IDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iUmVnaXN0ZXJOb2Rlc1JlcXVlc3QiIEJhc2VUeXBl"
"PSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5SZWdpc3RlcnMg"
"b25lIG9yIG1vcmUgbm9kZXMgZm9yIHJlcGVhdGVkIHVzZSB3aXRoaW4gYSBzZXNzaW9uLjwvb3Bj"
"OkRvY3VtZW50YXRpb24+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXF1ZXN0SGVhZGVyIiBUeXBl"
"TmFtZT0idG5zOlJlcXVlc3RIZWFkZXIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mTm9k"
"ZXNUb1JlZ2lzdGVyIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFt"
"ZT0iTm9kZXNUb1JlZ2lzdGVyIiBUeXBlTmFtZT0idWE6Tm9kZUlkIiBMZW5ndGhGaWVsZD0iTm9P"
"Zk5vZGVzVG9SZWdpc3RlciIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpT"
"dHJ1Y3R1cmVkVHlwZSBOYW1lPSJSZWdpc3Rlck5vZGVzUmVzcG9uc2UiIEJhc2VUeXBlPSJ1YTpF"
"eHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5SZWdpc3RlcnMgb25lIG9y"
"IG1vcmUgbm9kZXMgZm9yIHJlcGVhdGVkIHVzZSB3aXRoaW4gYSBzZXNzaW9uLjwvb3BjOkRvY3Vt"
"ZW50YXRpb24+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXNwb25zZUhlYWRlciIgVHlwZU5hbWU9"
"InRuczpSZXNwb25zZUhlYWRlciIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZSZWdpc3Rl"
"cmVkTm9kZUlkcyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9"
"IlJlZ2lzdGVyZWROb2RlSWRzIiBUeXBlTmFtZT0idWE6Tm9kZUlkIiBMZW5ndGhGaWVsZD0iTm9P"
"ZlJlZ2lzdGVyZWROb2RlSWRzIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3Bj"
"OlN0cnVjdHVyZWRUeXBlIE5hbWU9IlVucmVnaXN0ZXJOb2Rlc1JlcXVlc3QiIEJhc2VUeXBlPSJ1"
"YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5VbnJlZ2lzdGVycyBv"
"bmUgb3IgbW9yZSBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgbm9kZXMuPC9vcGM6RG9jdW1lbnRhdGlv"
"bj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlcXVlc3RIZWFkZXIiIFR5cGVOYW1lPSJ0bnM6UmVx"
"dWVzdEhlYWRlciIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZOb2Rlc1RvVW5yZWdpc3Rl"
"ciIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vZGVzVG9V"
"bnJlZ2lzdGVyIiBUeXBlTmFtZT0idWE6Tm9kZUlkIiBMZW5ndGhGaWVsZD0iTm9PZk5vZGVzVG9V"
"bnJlZ2lzdGVyIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVy"
"ZWRUeXBlIE5hbWU9IlVucmVnaXN0ZXJOb2Rlc1Jlc3BvbnNlIiBCYXNlVHlwZT0idWE6RXh0ZW5z"
"aW9uT2JqZWN0Ij4NCiAgICA8b3BjOkRvY3VtZW50YXRpb24+VW5yZWdpc3RlcnMgb25lIG9yIG1v"
"cmUgcHJldmlvdXNseSByZWdpc3RlcmVkIG5vZGVzLjwvb3BjOkRvY3VtZW50YXRpb24+DQogICAg"
"PG9wYzpGaWVsZCBOYW1lPSJSZXNwb25zZUhlYWRlciIgVHlwZU5hbWU9InRuczpSZXNwb25zZUhl"
"YWRlciIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpPcGFxdWVUeXBlIE5h"
"bWU9IkNvdW50ZXIiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5BIG1vbm90b25pY2FsbHkgaW5j"
"cmVhc2luZyB2YWx1ZS48L29wYzpEb2N1bWVudGF0aW9uPg0KICA8L29wYzpPcGFxdWVUeXBlPg0K"
"DQogIDxvcGM6T3BhcXVlVHlwZSBOYW1lPSJOdW1lcmljUmFuZ2UiPg0KICAgIDxvcGM6RG9jdW1l"
"bnRhdGlvbj5TcGVjaWZpZXMgYSByYW5nZSBvZiBhcnJheSBpbmRleGVzLjwvb3BjOkRvY3VtZW50"
"YXRpb24+DQogIDwvb3BjOk9wYXF1ZVR5cGU+DQoNCiAgPG9wYzpPcGFxdWVUeXBlIE5hbWU9IlRp"
"bWUiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5BIHRpbWUgdmFsdWUgc3BlY2lmaWVkIGFzIEhI"
"Ok1NOlNTLlNTUy48L29wYzpEb2N1bWVudGF0aW9uPg0KICA8L29wYzpPcGFxdWVUeXBlPg0KDQog"
"IDxvcGM6T3BhcXVlVHlwZSBOYW1lPSJEYXRlIj4NCiAgICA8b3BjOkRvY3VtZW50YXRpb24+QSBk"
"YXRlIHZhbHVlLjwvb3BjOkRvY3VtZW50YXRpb24+DQogIDwvb3BjOk9wYXF1ZVR5cGU+DQoNCiAg"
"PG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJFbmRwb2ludENvbmZpZ3VyYXRpb24iIEJhc2VUeXBl"
"PSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iT3BlcmF0aW9uVGlt"
"ZW91dCIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlVzZUJp"
"bmFyeUVuY29kaW5nIiBUeXBlTmFtZT0ib3BjOkJvb2xlYW4iIC8+DQogICAgPG9wYzpGaWVsZCBO"
"YW1lPSJNYXhTdHJpbmdMZW5ndGgiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpG"
"aWVsZCBOYW1lPSJNYXhCeXRlU3RyaW5nTGVuZ3RoIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0K"
"ICAgIDxvcGM6RmllbGQgTmFtZT0iTWF4QXJyYXlMZW5ndGgiIFR5cGVOYW1lPSJvcGM6SW50MzIi"
"IC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJNYXhNZXNzYWdlU2l6ZSIgVHlwZU5hbWU9Im9wYzpJ"
"bnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik1heEJ1ZmZlclNpemUiIFR5cGVOYW1lPSJv"
"cGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJDaGFubmVsTGlmZXRpbWUiIFR5cGVO"
"YW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTZWN1cml0eVRva2VuTGlm"
"ZXRpbWUiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0K"
"DQogIDxvcGM6RW51bWVyYXRlZFR5cGUgTmFtZT0iQ29tcGxpYW5jZUxldmVsIiBMZW5ndGhJbkJp"
"dHM9IjMyIj4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJVbnRlc3RlZCIgVmFsdWU9"
"IjAiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iUGFydGlhbCIgVmFsdWU9IjEi"
"IC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iU2VsZlRlc3RlZCIgVmFsdWU9IjIi"
"IC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iQ2VydGlmaWVkIiBWYWx1ZT0iMyIg"
"Lz4NCiAgPC9vcGM6RW51bWVyYXRlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1l"
"PSJTdXBwb3J0ZWRQcm9maWxlIiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8"
"b3BjOkZpZWxkIE5hbWU9Ik9yZ2FuaXphdGlvblVyaSIgVHlwZU5hbWU9Im9wYzpTdHJpbmciIC8+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJQcm9maWxlSWQiIFR5cGVOYW1lPSJvcGM6U3RyaW5nIiAv"
"Pg0KICAgIDxvcGM6RmllbGQgTmFtZT0iQ29tcGxpYW5jZVRvb2wiIFR5cGVOYW1lPSJvcGM6U3Ry"
"aW5nIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iQ29tcGxpYW5jZURhdGUiIFR5cGVOYW1lPSJv"
"cGM6RGF0ZVRpbWUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJDb21wbGlhbmNlTGV2ZWwiIFR5"
"cGVOYW1lPSJ0bnM6Q29tcGxpYW5jZUxldmVsIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9P"
"ZlVuc3VwcG9ydGVkVW5pdElkcyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9IlVuc3VwcG9ydGVkVW5pdElkcyIgVHlwZU5hbWU9Im9wYzpTdHJpbmciIExlbmd0"
"aEZpZWxkPSJOb09mVW5zdXBwb3J0ZWRVbml0SWRzIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlw"
"ZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IlNvZnR3YXJlQ2VydGlmaWNhdGUiIEJh"
"c2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUHJvZHVj"
"dE5hbWUiIFR5cGVOYW1lPSJvcGM6U3RyaW5nIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUHJv"
"ZHVjdFVyaSIgVHlwZU5hbWU9Im9wYzpTdHJpbmciIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJW"
"ZW5kb3JOYW1lIiBUeXBlTmFtZT0ib3BjOlN0cmluZyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9"
"IlZlbmRvclByb2R1Y3RDZXJ0aWZpY2F0ZSIgVHlwZU5hbWU9Im9wYzpCeXRlU3RyaW5nIiAvPg0K"
"ICAgIDxvcGM6RmllbGQgTmFtZT0iU29mdHdhcmVWZXJzaW9uIiBUeXBlTmFtZT0ib3BjOlN0cmlu"
"ZyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkJ1aWxkTnVtYmVyIiBUeXBlTmFtZT0ib3BjOlN0"
"cmluZyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkJ1aWxkRGF0ZSIgVHlwZU5hbWU9Im9wYzpE"
"YXRlVGltZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Iklzc3VlZEJ5IiBUeXBlTmFtZT0ib3Bj"
"OlN0cmluZyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Iklzc3VlRGF0ZSIgVHlwZU5hbWU9Im9w"
"YzpEYXRlVGltZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZTdXBwb3J0ZWRQcm9maWxl"
"cyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlN1cHBvcnRl"
"ZFByb2ZpbGVzIiBUeXBlTmFtZT0idG5zOlN1cHBvcnRlZFByb2ZpbGUiIExlbmd0aEZpZWxkPSJO"
"b09mU3VwcG9ydGVkUHJvZmlsZXMiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxv"
"cGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iUXVlcnlEYXRhRGVzY3JpcHRpb24iIEJhc2VUeXBlPSJ1"
"YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVsYXRpdmVQYXRoIiBU"
"eXBlTmFtZT0idG5zOlJlbGF0aXZlUGF0aCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkF0dHJp"
"YnV0ZUlkIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Iklu"
"ZGV4UmFuZ2UiIFR5cGVOYW1lPSJvcGM6U3RyaW5nIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlw"
"ZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9Ik5vZGVUeXBlRGVzY3JpcHRpb24iIEJh"
"c2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iVHlwZURl"
"ZmluaXRpb25Ob2RlIiBUeXBlTmFtZT0idWE6RXhwYW5kZWROb2RlSWQiIC8+DQogICAgPG9wYzpG"
"aWVsZCBOYW1lPSJJbmNsdWRlU3ViVHlwZXMiIFR5cGVOYW1lPSJvcGM6Qm9vbGVhbiIgLz4NCiAg"
"ICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZEYXRhVG9SZXR1cm4iIFR5cGVOYW1lPSJvcGM6SW50MzIi"
"IC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJEYXRhVG9SZXR1cm4iIFR5cGVOYW1lPSJ0bnM6UXVl"
"cnlEYXRhRGVzY3JpcHRpb24iIExlbmd0aEZpZWxkPSJOb09mRGF0YVRvUmV0dXJuIiAvPg0KICA8"
"L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOkVudW1lcmF0ZWRUeXBlIE5hbWU9IkZpbHRl"
"ck9wZXJhdG9yIiBMZW5ndGhJbkJpdHM9IjMyIj4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBO"
"YW1lPSJFcXVhbHMiIFZhbHVlPSIwIiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9"
"IklzTnVsbCIgVmFsdWU9IjEiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iR3Jl"
"YXRlclRoYW4iIFZhbHVlPSIyIiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9Ikxl"
"c3NUaGFuIiBWYWx1ZT0iMyIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJHcmVh"
"dGVyVGhhbk9yRXF1YWwiIFZhbHVlPSI0IiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5h"
"bWU9Ikxlc3NUaGFuT3JFcXVhbCIgVmFsdWU9IjUiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFs"
"dWUgTmFtZT0iTGlrZSIgVmFsdWU9IjYiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFt"
"ZT0iTm90IiBWYWx1ZT0iNyIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJCZXR3"
"ZWVuIiBWYWx1ZT0iOCIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJJbkxpc3Qi"
"IFZhbHVlPSI5IiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IkFuZCIgVmFsdWU9"
"IjEwIiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9Ik9yIiBWYWx1ZT0iMTEiIC8+"
"DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iQ2FzdCIgVmFsdWU9IjEyIiAvPg0KICAg"
"IDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IkluVmlldyIgVmFsdWU9IjEzIiAvPg0KICAgIDxv"
"cGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9Ik9mVHlwZSIgVmFsdWU9IjE0IiAvPg0KICAgIDxvcGM6"
"RW51bWVyYXRlZFZhbHVlIE5hbWU9IlJlbGF0ZWRUbyIgVmFsdWU9IjE1IiAvPg0KICAgIDxvcGM6"
"RW51bWVyYXRlZFZhbHVlIE5hbWU9IkJpdHdpc2VBbmQiIFZhbHVlPSIxNiIgLz4NCiAgICA8b3Bj"
"OkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJCaXR3aXNlT3IiIFZhbHVlPSIxNyIgLz4NCiAgPC9vcGM6"
"RW51bWVyYXRlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJRdWVyeURhdGFT"
"ZXQiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0i"
"Tm9kZUlkIiBUeXBlTmFtZT0idWE6RXhwYW5kZWROb2RlSWQiIC8+DQogICAgPG9wYzpGaWVsZCBO"
"YW1lPSJUeXBlRGVmaW5pdGlvbk5vZGUiIFR5cGVOYW1lPSJ1YTpFeHBhbmRlZE5vZGVJZCIgLz4N"
"CiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZWYWx1ZXMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJWYWx1ZXMiIFR5cGVOYW1lPSJ1YTpWYXJpYW50IiBMZW5n"
"dGhGaWVsZD0iTm9PZlZhbHVlcyIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9w"
"YzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJOb2RlUmVmZXJlbmNlIiBCYXNlVHlwZT0idWE6RXh0ZW5z"
"aW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vZGVJZCIgVHlwZU5hbWU9InVhOk5v"
"ZGVJZCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlZmVyZW5jZVR5cGVJZCIgVHlwZU5hbWU9"
"InVhOk5vZGVJZCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IklzRm9yd2FyZCIgVHlwZU5hbWU9"
"Im9wYzpCb29sZWFuIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZlJlZmVyZW5jZWROb2Rl"
"SWRzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVmZXJl"
"bmNlZE5vZGVJZHMiIFR5cGVOYW1lPSJ1YTpOb2RlSWQiIExlbmd0aEZpZWxkPSJOb09mUmVmZXJl"
"bmNlZE5vZGVJZHMiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0"
"dXJlZFR5cGUgTmFtZT0iQ29udGVudEZpbHRlckVsZW1lbnQiIEJhc2VUeXBlPSJ1YTpFeHRlbnNp"
"b25PYmplY3QiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRmlsdGVyT3BlcmF0b3IiIFR5cGVOYW1l"
"PSJ0bnM6RmlsdGVyT3BlcmF0b3IiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mRmlsdGVy"
"T3BlcmFuZHMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJG"
"aWx0ZXJPcGVyYW5kcyIgVHlwZU5hbWU9InVhOkV4dGVuc2lvbk9iamVjdCIgTGVuZ3RoRmllbGQ9"
"Ik5vT2ZGaWx0ZXJPcGVyYW5kcyIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9w"
"YzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJDb250ZW50RmlsdGVyIiBCYXNlVHlwZT0idWE6RXh0ZW5z"
"aW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZFbGVtZW50cyIgVHlwZU5hbWU9"
"Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkVsZW1lbnRzIiBUeXBlTmFtZT0i"
"dG5zOkNvbnRlbnRGaWx0ZXJFbGVtZW50IiBMZW5ndGhGaWVsZD0iTm9PZkVsZW1lbnRzIiAvPg0K"
"ICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IkZp"
"bHRlck9wZXJhbmQiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICA8L29wYzpTdHJ1"
"Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IkVsZW1lbnRPcGVyYW5k"
"IiBCYXNlVHlwZT0idG5zOkZpbHRlck9wZXJhbmQiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iSW5k"
"ZXgiIFR5cGVOYW1lPSJvcGM6VUludDMyIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0K"
"ICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IkxpdGVyYWxPcGVyYW5kIiBCYXNlVHlwZT0idG5z"
"OkZpbHRlck9wZXJhbmQiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iVmFsdWUiIFR5cGVOYW1lPSJ1"
"YTpWYXJpYW50IiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVy"
"ZWRUeXBlIE5hbWU9IkF0dHJpYnV0ZU9wZXJhbmQiIEJhc2VUeXBlPSJ0bnM6RmlsdGVyT3BlcmFu"
"ZCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb2RlSWQiIFR5cGVOYW1lPSJ1YTpOb2RlSWQiIC8+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJBbGlhcyIgVHlwZU5hbWU9Im9wYzpTdHJpbmciIC8+DQog"
"ICAgPG9wYzpGaWVsZCBOYW1lPSJCcm93c2VQYXRoIiBUeXBlTmFtZT0idG5zOlJlbGF0aXZlUGF0"
"aCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkF0dHJpYnV0ZUlkIiBUeXBlTmFtZT0ib3BjOlVJ"
"bnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkluZGV4UmFuZ2UiIFR5cGVOYW1lPSJvcGM6"
"U3RyaW5nIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRU"
"eXBlIE5hbWU9IlNpbXBsZUF0dHJpYnV0ZU9wZXJhbmQiIEJhc2VUeXBlPSJ0bnM6RmlsdGVyT3Bl"
"cmFuZCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJUeXBlRGVmaW5pdGlvbklkIiBUeXBlTmFtZT0i"
"dWE6Tm9kZUlkIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZkJyb3dzZVBhdGgiIFR5cGVO"
"YW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJCcm93c2VQYXRoIiBUeXBl"
"TmFtZT0idWE6UXVhbGlmaWVkTmFtZSIgTGVuZ3RoRmllbGQ9Ik5vT2ZCcm93c2VQYXRoIiAvPg0K"
"ICAgIDxvcGM6RmllbGQgTmFtZT0iQXR0cmlidXRlSWQiIFR5cGVOYW1lPSJvcGM6VUludDMyIiAv"
"Pg0KICAgIDxvcGM6RmllbGQgTmFtZT0iSW5kZXhSYW5nZSIgVHlwZU5hbWU9Im9wYzpTdHJpbmci"
"IC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFt"
"ZT0iQ29udGVudEZpbHRlckVsZW1lbnRSZXN1bHQiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmpl"
"Y3QiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iU3RhdHVzQ29kZSIgVHlwZU5hbWU9InVhOlN0YXR1"
"c0NvZGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mT3BlcmFuZFN0YXR1c0NvZGVzIiBU"
"eXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iT3BlcmFuZFN0YXR1"
"c0NvZGVzIiBUeXBlTmFtZT0idWE6U3RhdHVzQ29kZSIgTGVuZ3RoRmllbGQ9Ik5vT2ZPcGVyYW5k"
"U3RhdHVzQ29kZXMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mT3BlcmFuZERpYWdub3N0"
"aWNJbmZvcyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik9w"
"ZXJhbmREaWFnbm9zdGljSW5mb3MiIFR5cGVOYW1lPSJ1YTpEaWFnbm9zdGljSW5mbyIgTGVuZ3Ro"
"RmllbGQ9Ik5vT2ZPcGVyYW5kRGlhZ25vc3RpY0luZm9zIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVk"
"VHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IkNvbnRlbnRGaWx0ZXJSZXN1bHQi"
"IEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9P"
"ZkVsZW1lbnRSZXN1bHRzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQg"
"TmFtZT0iRWxlbWVudFJlc3VsdHMiIFR5cGVOYW1lPSJ0bnM6Q29udGVudEZpbHRlckVsZW1lbnRS"
"ZXN1bHQiIExlbmd0aEZpZWxkPSJOb09mRWxlbWVudFJlc3VsdHMiIC8+DQogICAgPG9wYzpGaWVs"
"ZCBOYW1lPSJOb09mRWxlbWVudERpYWdub3N0aWNJbmZvcyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIg"
"Lz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkVsZW1lbnREaWFnbm9zdGljSW5mb3MiIFR5cGVOYW1l"
"PSJ1YTpEaWFnbm9zdGljSW5mbyIgTGVuZ3RoRmllbGQ9Ik5vT2ZFbGVtZW50RGlhZ25vc3RpY0lu"
"Zm9zIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBl"
"IE5hbWU9IlBhcnNpbmdSZXN1bHQiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAg"
"IDxvcGM6RmllbGQgTmFtZT0iU3RhdHVzQ29kZSIgVHlwZU5hbWU9InVhOlN0YXR1c0NvZGUiIC8+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mRGF0YVN0YXR1c0NvZGVzIiBUeXBlTmFtZT0ib3Bj"
"OkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRGF0YVN0YXR1c0NvZGVzIiBUeXBlTmFt"
"ZT0idWE6U3RhdHVzQ29kZSIgTGVuZ3RoRmllbGQ9Ik5vT2ZEYXRhU3RhdHVzQ29kZXMiIC8+DQog"
"ICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mRGF0YURpYWdub3N0aWNJbmZvcyIgVHlwZU5hbWU9Im9w"
"YzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkRhdGFEaWFnbm9zdGljSW5mb3MiIFR5"
"cGVOYW1lPSJ1YTpEaWFnbm9zdGljSW5mbyIgTGVuZ3RoRmllbGQ9Ik5vT2ZEYXRhRGlhZ25vc3Rp"
"Y0luZm9zIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRU"
"eXBlIE5hbWU9IlF1ZXJ5Rmlyc3RSZXF1ZXN0IiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0"
"Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlcXVlc3RIZWFkZXIiIFR5cGVOYW1lPSJ0bnM6UmVx"
"dWVzdEhlYWRlciIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlZpZXciIFR5cGVOYW1lPSJ0bnM6"
"Vmlld0Rlc2NyaXB0aW9uIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZk5vZGVUeXBlcyIg"
"VHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vZGVUeXBlcyIg"
"VHlwZU5hbWU9InRuczpOb2RlVHlwZURlc2NyaXB0aW9uIiBMZW5ndGhGaWVsZD0iTm9PZk5vZGVU"
"eXBlcyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkZpbHRlciIgVHlwZU5hbWU9InRuczpDb250"
"ZW50RmlsdGVyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTWF4RGF0YVNldHNUb1JldHVybiIg"
"VHlwZU5hbWU9Im9wYzpVSW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJNYXhSZWZlcmVu"
"Y2VzVG9SZXR1cm4iIFR5cGVOYW1lPSJvcGM6VUludDMyIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVk"
"VHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IlF1ZXJ5Rmlyc3RSZXNwb25zZSIg"
"QmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXNw"
"b25zZUhlYWRlciIgVHlwZU5hbWU9InRuczpSZXNwb25zZUhlYWRlciIgLz4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9Ik5vT2ZRdWVyeURhdGFTZXRzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAg"
"IDxvcGM6RmllbGQgTmFtZT0iUXVlcnlEYXRhU2V0cyIgVHlwZU5hbWU9InRuczpRdWVyeURhdGFT"
"ZXQiIExlbmd0aEZpZWxkPSJOb09mUXVlcnlEYXRhU2V0cyIgLz4NCiAgICA8b3BjOkZpZWxkIE5h"
"bWU9IkNvbnRpbnVhdGlvblBvaW50IiBUeXBlTmFtZT0ib3BjOkJ5dGVTdHJpbmciIC8+DQogICAg"
"PG9wYzpGaWVsZCBOYW1lPSJOb09mUGFyc2luZ1Jlc3VsdHMiIFR5cGVOYW1lPSJvcGM6SW50MzIi"
"IC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJQYXJzaW5nUmVzdWx0cyIgVHlwZU5hbWU9InRuczpQ"
"YXJzaW5nUmVzdWx0IiBMZW5ndGhGaWVsZD0iTm9PZlBhcnNpbmdSZXN1bHRzIiAvPg0KICAgIDxv"
"cGM6RmllbGQgTmFtZT0iTm9PZkRpYWdub3N0aWNJbmZvcyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIg"
"Lz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkRpYWdub3N0aWNJbmZvcyIgVHlwZU5hbWU9InVhOkRp"
"YWdub3N0aWNJbmZvIiBMZW5ndGhGaWVsZD0iTm9PZkRpYWdub3N0aWNJbmZvcyIgLz4NCiAgICA8"
"b3BjOkZpZWxkIE5hbWU9IkZpbHRlclJlc3VsdCIgVHlwZU5hbWU9InRuczpDb250ZW50RmlsdGVy"
"UmVzdWx0IiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRU"
"eXBlIE5hbWU9IlF1ZXJ5TmV4dFJlcXVlc3QiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3Qi"
"Pg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVxdWVzdEhlYWRlciIgVHlwZU5hbWU9InRuczpSZXF1"
"ZXN0SGVhZGVyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVsZWFzZUNvbnRpbnVhdGlvblBv"
"aW50IiBUeXBlTmFtZT0ib3BjOkJvb2xlYW4iIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJDb250"
"aW51YXRpb25Qb2ludCIgVHlwZU5hbWU9Im9wYzpCeXRlU3RyaW5nIiAvPg0KICA8L29wYzpTdHJ1"
"Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IlF1ZXJ5TmV4dFJlc3Bv"
"bnNlIiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9"
"IlJlc3BvbnNlSGVhZGVyIiBUeXBlTmFtZT0idG5zOlJlc3BvbnNlSGVhZGVyIiAvPg0KICAgIDxv"
"cGM6RmllbGQgTmFtZT0iTm9PZlF1ZXJ5RGF0YVNldHMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJRdWVyeURhdGFTZXRzIiBUeXBlTmFtZT0idG5zOlF1ZXJ5"
"RGF0YVNldCIgTGVuZ3RoRmllbGQ9Ik5vT2ZRdWVyeURhdGFTZXRzIiAvPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iUmV2aXNlZENvbnRpbnVhdGlvblBvaW50IiBUeXBlTmFtZT0ib3BjOkJ5dGVTdHJp"
"bmciIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6RW51bWVyYXRlZFR5cGUg"
"TmFtZT0iVGltZXN0YW1wc1RvUmV0dXJuIiBMZW5ndGhJbkJpdHM9IjMyIj4NCiAgICA8b3BjOkVu"
"dW1lcmF0ZWRWYWx1ZSBOYW1lPSJTb3VyY2UiIFZhbHVlPSIwIiAvPg0KICAgIDxvcGM6RW51bWVy"
"YXRlZFZhbHVlIE5hbWU9IlNlcnZlciIgVmFsdWU9IjEiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVk"
"VmFsdWUgTmFtZT0iQm90aCIgVmFsdWU9IjIiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUg"
"TmFtZT0iTmVpdGhlciIgVmFsdWU9IjMiIC8+DQogIDwvb3BjOkVudW1lcmF0ZWRUeXBlPg0KDQog"
"IDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iUmVhZFZhbHVlSWQiIEJhc2VUeXBlPSJ1YTpFeHRl"
"bnNpb25PYmplY3QiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9kZUlkIiBUeXBlTmFtZT0idWE6"
"Tm9kZUlkIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iQXR0cmlidXRlSWQiIFR5cGVOYW1lPSJv"
"cGM6VUludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iSW5kZXhSYW5nZSIgVHlwZU5hbWU9"
"Im9wYzpTdHJpbmciIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJEYXRhRW5jb2RpbmciIFR5cGVO"
"YW1lPSJ1YTpRdWFsaWZpZWROYW1lIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8"
"b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IlJlYWRSZXF1ZXN0IiBCYXNlVHlwZT0idWE6RXh0ZW5z"
"aW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlcXVlc3RIZWFkZXIiIFR5cGVOYW1l"
"PSJ0bnM6UmVxdWVzdEhlYWRlciIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik1heEFnZSIgVHlw"
"ZU5hbWU9Im9wYzpEb3VibGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJUaW1lc3RhbXBzVG9S"
"ZXR1cm4iIFR5cGVOYW1lPSJ0bnM6VGltZXN0YW1wc1RvUmV0dXJuIiAvPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iTm9PZk5vZGVzVG9SZWFkIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxv"
"cGM6RmllbGQgTmFtZT0iTm9kZXNUb1JlYWQiIFR5cGVOYW1lPSJ0bnM6UmVhZFZhbHVlSWQiIExl"
"bmd0aEZpZWxkPSJOb09mTm9kZXNUb1JlYWQiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0K"
"DQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iUmVhZFJlc3BvbnNlIiBCYXNlVHlwZT0idWE6"
"RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlc3BvbnNlSGVhZGVyIiBU"
"eXBlTmFtZT0idG5zOlJlc3BvbnNlSGVhZGVyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9P"
"ZlJlc3VsdHMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJS"
"ZXN1bHRzIiBUeXBlTmFtZT0idWE6RGF0YVZhbHVlIiBMZW5ndGhGaWVsZD0iTm9PZlJlc3VsdHMi"
"IC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mRGlhZ25vc3RpY0luZm9zIiBUeXBlTmFtZT0i"
"b3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRGlhZ25vc3RpY0luZm9zIiBUeXBl"
"TmFtZT0idWE6RGlhZ25vc3RpY0luZm8iIExlbmd0aEZpZWxkPSJOb09mRGlhZ25vc3RpY0luZm9z"
"IiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5h"
"bWU9Ikhpc3RvcnlSZWFkVmFsdWVJZCIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQog"
"ICAgPG9wYzpGaWVsZCBOYW1lPSJOb2RlSWQiIFR5cGVOYW1lPSJ1YTpOb2RlSWQiIC8+DQogICAg"
"PG9wYzpGaWVsZCBOYW1lPSJJbmRleFJhbmdlIiBUeXBlTmFtZT0ib3BjOlN0cmluZyIgLz4NCiAg"
"ICA8b3BjOkZpZWxkIE5hbWU9IkRhdGFFbmNvZGluZyIgVHlwZU5hbWU9InVhOlF1YWxpZmllZE5h"
"bWUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJDb250aW51YXRpb25Qb2ludCIgVHlwZU5hbWU9"
"Im9wYzpCeXRlU3RyaW5nIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0"
"cnVjdHVyZWRUeXBlIE5hbWU9Ikhpc3RvcnlSZWFkUmVzdWx0IiBCYXNlVHlwZT0idWE6RXh0ZW5z"
"aW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlN0YXR1c0NvZGUiIFR5cGVOYW1lPSJ1"
"YTpTdGF0dXNDb2RlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iQ29udGludWF0aW9uUG9pbnQi"
"IFR5cGVOYW1lPSJvcGM6Qnl0ZVN0cmluZyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ikhpc3Rv"
"cnlEYXRhIiBUeXBlTmFtZT0idWE6RXh0ZW5zaW9uT2JqZWN0IiAvPg0KICA8L29wYzpTdHJ1Y3R1"
"cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9Ikhpc3RvcnlSZWFkRGV0YWls"
"cyIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBl"
"Pg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iUmVhZEV2ZW50RGV0YWlscyIgQmFzZVR5"
"cGU9InRuczpIaXN0b3J5UmVhZERldGFpbHMiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTnVtVmFs"
"dWVzUGVyTm9kZSIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1l"
"PSJTdGFydFRpbWUiIFR5cGVOYW1lPSJvcGM6RGF0ZVRpbWUiIC8+DQogICAgPG9wYzpGaWVsZCBO"
"YW1lPSJFbmRUaW1lIiBUeXBlTmFtZT0ib3BjOkRhdGVUaW1lIiAvPg0KICAgIDxvcGM6RmllbGQg"
"TmFtZT0iRmlsdGVyIiBUeXBlTmFtZT0idG5zOkV2ZW50RmlsdGVyIiAvPg0KICA8L29wYzpTdHJ1"
"Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IlJlYWRSYXdNb2RpZmll"
"ZERldGFpbHMiIEJhc2VUeXBlPSJ0bnM6SGlzdG9yeVJlYWREZXRhaWxzIj4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9IklzUmVhZE1vZGlmaWVkIiBUeXBlTmFtZT0ib3BjOkJvb2xlYW4iIC8+DQogICAg"
"PG9wYzpGaWVsZCBOYW1lPSJTdGFydFRpbWUiIFR5cGVOYW1lPSJvcGM6RGF0ZVRpbWUiIC8+DQog"
"ICAgPG9wYzpGaWVsZCBOYW1lPSJFbmRUaW1lIiBUeXBlTmFtZT0ib3BjOkRhdGVUaW1lIiAvPg0K"
"ICAgIDxvcGM6RmllbGQgTmFtZT0iTnVtVmFsdWVzUGVyTm9kZSIgVHlwZU5hbWU9Im9wYzpVSW50"
"MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXR1cm5Cb3VuZHMiIFR5cGVOYW1lPSJvcGM6"
"Qm9vbGVhbiIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVk"
"VHlwZSBOYW1lPSJSZWFkUHJvY2Vzc2VkRGV0YWlscyIgQmFzZVR5cGU9InRuczpIaXN0b3J5UmVh"
"ZERldGFpbHMiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iU3RhcnRUaW1lIiBUeXBlTmFtZT0ib3Bj"
"OkRhdGVUaW1lIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRW5kVGltZSIgVHlwZU5hbWU9Im9w"
"YzpEYXRlVGltZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlByb2Nlc3NpbmdJbnRlcnZhbCIg"
"VHlwZU5hbWU9Im9wYzpEb3VibGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mQWdncmVn"
"YXRlVHlwZSIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkFn"
"Z3JlZ2F0ZVR5cGUiIFR5cGVOYW1lPSJ1YTpOb2RlSWQiIExlbmd0aEZpZWxkPSJOb09mQWdncmVn"
"YXRlVHlwZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkFnZ3JlZ2F0ZUNvbmZpZ3VyYXRpb24i"
"IFR5cGVOYW1lPSJ0bnM6QWdncmVnYXRlQ29uZmlndXJhdGlvbiIgLz4NCiAgPC9vcGM6U3RydWN0"
"dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJSZWFkQXRUaW1lRGV0YWls"
"cyIgQmFzZVR5cGU9InRuczpIaXN0b3J5UmVhZERldGFpbHMiPg0KICAgIDxvcGM6RmllbGQgTmFt"
"ZT0iTm9PZlJlcVRpbWVzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQg"
"TmFtZT0iUmVxVGltZXMiIFR5cGVOYW1lPSJvcGM6RGF0ZVRpbWUiIExlbmd0aEZpZWxkPSJOb09m"
"UmVxVGltZXMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJVc2VTaW1wbGVCb3VuZHMiIFR5cGVO"
"YW1lPSJvcGM6Qm9vbGVhbiIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpT"
"dHJ1Y3R1cmVkVHlwZSBOYW1lPSJIaXN0b3J5RGF0YSIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9i"
"amVjdCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mRGF0YVZhbHVlcyIgVHlwZU5hbWU9Im9w"
"YzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkRhdGFWYWx1ZXMiIFR5cGVOYW1lPSJ1"
"YTpEYXRhVmFsdWUiIExlbmd0aEZpZWxkPSJOb09mRGF0YVZhbHVlcyIgLz4NCiAgPC9vcGM6U3Ry"
"dWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJNb2RpZmljYXRpb25J"
"bmZvIiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9"
"Ik1vZGlmaWNhdGlvblRpbWUiIFR5cGVOYW1lPSJvcGM6RGF0ZVRpbWUiIC8+DQogICAgPG9wYzpG"
"aWVsZCBOYW1lPSJVcGRhdGVUeXBlIiBUeXBlTmFtZT0idG5zOkhpc3RvcnlVcGRhdGVUeXBlIiAv"
"Pg0KICAgIDxvcGM6RmllbGQgTmFtZT0iVXNlck5hbWUiIFR5cGVOYW1lPSJvcGM6U3RyaW5nIiAv"
"Pg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9"
"Ikhpc3RvcnlNb2RpZmllZERhdGEiIEJhc2VUeXBlPSJ0bnM6SGlzdG9yeURhdGEiPg0KICAgIDxv"
"cGM6RmllbGQgTmFtZT0iTm9PZkRhdGFWYWx1ZXMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQog"
"ICAgPG9wYzpGaWVsZCBOYW1lPSJEYXRhVmFsdWVzIiBUeXBlTmFtZT0idWE6RGF0YVZhbHVlIiBM"
"ZW5ndGhGaWVsZD0iTm9PZkRhdGFWYWx1ZXMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09m"
"TW9kaWZpY2F0aW9uSW5mb3MiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVs"
"ZCBOYW1lPSJNb2RpZmljYXRpb25JbmZvcyIgVHlwZU5hbWU9InRuczpNb2RpZmljYXRpb25JbmZv"
"IiBMZW5ndGhGaWVsZD0iTm9PZk1vZGlmaWNhdGlvbkluZm9zIiAvPg0KICA8L29wYzpTdHJ1Y3R1"
"cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9Ikhpc3RvcnlFdmVudCIgQmFz"
"ZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mRXZl"
"bnRzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRXZlbnRz"
"IiBUeXBlTmFtZT0idG5zOkhpc3RvcnlFdmVudEZpZWxkTGlzdCIgTGVuZ3RoRmllbGQ9Ik5vT2ZF"
"dmVudHMiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5"
"cGUgTmFtZT0iSGlzdG9yeVJlYWRSZXF1ZXN0IiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0"
"Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlcXVlc3RIZWFkZXIiIFR5cGVOYW1lPSJ0bnM6UmVx"
"dWVzdEhlYWRlciIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ikhpc3RvcnlSZWFkRGV0YWlscyIg"
"VHlwZU5hbWU9InVhOkV4dGVuc2lvbk9iamVjdCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlRp"
"bWVzdGFtcHNUb1JldHVybiIgVHlwZU5hbWU9InRuczpUaW1lc3RhbXBzVG9SZXR1cm4iIC8+DQog"
"ICAgPG9wYzpGaWVsZCBOYW1lPSJSZWxlYXNlQ29udGludWF0aW9uUG9pbnRzIiBUeXBlTmFtZT0i"
"b3BjOkJvb2xlYW4iIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mTm9kZXNUb1JlYWQiIFR5"
"cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb2Rlc1RvUmVhZCIg"
"VHlwZU5hbWU9InRuczpIaXN0b3J5UmVhZFZhbHVlSWQiIExlbmd0aEZpZWxkPSJOb09mTm9kZXNU"
"b1JlYWQiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5"
"cGUgTmFtZT0iSGlzdG9yeVJlYWRSZXNwb25zZSIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVj"
"dCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXNwb25zZUhlYWRlciIgVHlwZU5hbWU9InRuczpS"
"ZXNwb25zZUhlYWRlciIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZSZXN1bHRzIiBUeXBl"
"TmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVzdWx0cyIgVHlwZU5h"
"bWU9InRuczpIaXN0b3J5UmVhZFJlc3VsdCIgTGVuZ3RoRmllbGQ9Ik5vT2ZSZXN1bHRzIiAvPg0K"
"ICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZkRpYWdub3N0aWNJbmZvcyIgVHlwZU5hbWU9Im9wYzpJ"
"bnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkRpYWdub3N0aWNJbmZvcyIgVHlwZU5hbWU9"
"InVhOkRpYWdub3N0aWNJbmZvIiBMZW5ndGhGaWVsZD0iTm9PZkRpYWdub3N0aWNJbmZvcyIgLz4N"
"CiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJX"
"cml0ZVZhbHVlIiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxk"
"IE5hbWU9Ik5vZGVJZCIgVHlwZU5hbWU9InVhOk5vZGVJZCIgLz4NCiAgICA8b3BjOkZpZWxkIE5h"
"bWU9IkF0dHJpYnV0ZUlkIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxk"
"IE5hbWU9IkluZGV4UmFuZ2UiIFR5cGVOYW1lPSJvcGM6U3RyaW5nIiAvPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iVmFsdWUiIFR5cGVOYW1lPSJ1YTpEYXRhVmFsdWUiIC8+DQogIDwvb3BjOlN0cnVj"
"dHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iV3JpdGVSZXF1ZXN0IiBC"
"YXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlcXVl"
"c3RIZWFkZXIiIFR5cGVOYW1lPSJ0bnM6UmVxdWVzdEhlYWRlciIgLz4NCiAgICA8b3BjOkZpZWxk"
"IE5hbWU9Ik5vT2ZOb2Rlc1RvV3JpdGUiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJOb2Rlc1RvV3JpdGUiIFR5cGVOYW1lPSJ0bnM6V3JpdGVWYWx1ZSIgTGVu"
"Z3RoRmllbGQ9Ik5vT2ZOb2Rlc1RvV3JpdGUiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0K"
"DQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iV3JpdGVSZXNwb25zZSIgQmFzZVR5cGU9InVh"
"OkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXNwb25zZUhlYWRlciIg"
"VHlwZU5hbWU9InRuczpSZXNwb25zZUhlYWRlciIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5v"
"T2ZSZXN1bHRzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0i"
"UmVzdWx0cyIgVHlwZU5hbWU9InVhOlN0YXR1c0NvZGUiIExlbmd0aEZpZWxkPSJOb09mUmVzdWx0"
"cyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZEaWFnbm9zdGljSW5mb3MiIFR5cGVOYW1l"
"PSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJEaWFnbm9zdGljSW5mb3MiIFR5"
"cGVOYW1lPSJ1YTpEaWFnbm9zdGljSW5mbyIgTGVuZ3RoRmllbGQ9Ik5vT2ZEaWFnbm9zdGljSW5m"
"b3MiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUg"
"TmFtZT0iSGlzdG9yeVVwZGF0ZURldGFpbHMiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3Qi"
"Pg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9kZUlkIiBUeXBlTmFtZT0idWE6Tm9kZUlkIiAvPg0K"
"ICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOkVudW1lcmF0ZWRUeXBlIE5hbWU9Ikhp"
"c3RvcnlVcGRhdGVUeXBlIiBMZW5ndGhJbkJpdHM9IjMyIj4NCiAgICA8b3BjOkVudW1lcmF0ZWRW"
"YWx1ZSBOYW1lPSJJbnNlcnQiIFZhbHVlPSIxIiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVl"
"IE5hbWU9IlJlcGxhY2UiIFZhbHVlPSIyIiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5h"
"bWU9IlVwZGF0ZSIgVmFsdWU9IjMiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0i"
"RGVsZXRlIiBWYWx1ZT0iNCIgLz4NCiAgPC9vcGM6RW51bWVyYXRlZFR5cGU+DQoNCiAgPG9wYzpF"
"bnVtZXJhdGVkVHlwZSBOYW1lPSJQZXJmb3JtVXBkYXRlVHlwZSIgTGVuZ3RoSW5CaXRzPSIzMiI+"
"DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iSW5zZXJ0IiBWYWx1ZT0iMSIgLz4NCiAg"
"ICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJSZXBsYWNlIiBWYWx1ZT0iMiIgLz4NCiAgICA8"
"b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJVcGRhdGUiIFZhbHVlPSIzIiAvPg0KICAgIDxvcGM6"
"RW51bWVyYXRlZFZhbHVlIE5hbWU9IlJlbW92ZSIgVmFsdWU9IjQiIC8+DQogIDwvb3BjOkVudW1l"
"cmF0ZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iVXBkYXRlRGF0YURldGFp"
"bHMiIEJhc2VUeXBlPSJ0bnM6SGlzdG9yeVVwZGF0ZURldGFpbHMiPg0KICAgIDxvcGM6RmllbGQg"
"TmFtZT0iTm9kZUlkIiBUeXBlTmFtZT0idWE6Tm9kZUlkIiBTb3VyY2VUeXBlPSJ0bnM6SGlzdG9y"
"eVVwZGF0ZURldGFpbHMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJQZXJmb3JtSW5zZXJ0UmVw"
"bGFjZSIgVHlwZU5hbWU9InRuczpQZXJmb3JtVXBkYXRlVHlwZSIgLz4NCiAgICA8b3BjOkZpZWxk"
"IE5hbWU9Ik5vT2ZVcGRhdGVWYWx1ZXMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJVcGRhdGVWYWx1ZXMiIFR5cGVOYW1lPSJ1YTpEYXRhVmFsdWUiIExlbmd0"
"aEZpZWxkPSJOb09mVXBkYXRlVmFsdWVzIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0K"
"ICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IlVwZGF0ZVN0cnVjdHVyZURhdGFEZXRhaWxzIiBC"
"YXNlVHlwZT0idG5zOkhpc3RvcnlVcGRhdGVEZXRhaWxzIj4NCiAgICA8b3BjOkZpZWxkIE5hbWU9"
"Ik5vZGVJZCIgVHlwZU5hbWU9InVhOk5vZGVJZCIgU291cmNlVHlwZT0idG5zOkhpc3RvcnlVcGRh"
"dGVEZXRhaWxzIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUGVyZm9ybUluc2VydFJlcGxhY2Ui"
"IFR5cGVOYW1lPSJ0bnM6UGVyZm9ybVVwZGF0ZVR5cGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1l"
"PSJOb09mVXBkYXRlVmFsdWVzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iVXBkYXRlVmFsdWVzIiBUeXBlTmFtZT0idWE6RGF0YVZhbHVlIiBMZW5ndGhGaWVs"
"ZD0iTm9PZlVwZGF0ZVZhbHVlcyIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9w"
"YzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJVcGRhdGVFdmVudERldGFpbHMiIEJhc2VUeXBlPSJ0bnM6"
"SGlzdG9yeVVwZGF0ZURldGFpbHMiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9kZUlkIiBUeXBl"
"TmFtZT0idWE6Tm9kZUlkIiBTb3VyY2VUeXBlPSJ0bnM6SGlzdG9yeVVwZGF0ZURldGFpbHMiIC8+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJQZXJmb3JtSW5zZXJ0UmVwbGFjZSIgVHlwZU5hbWU9InRu"
"czpQZXJmb3JtVXBkYXRlVHlwZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkZpbHRlciIgVHlw"
"ZU5hbWU9InRuczpFdmVudEZpbHRlciIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZFdmVu"
"dERhdGEiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJFdmVu"
"dERhdGEiIFR5cGVOYW1lPSJ0bnM6SGlzdG9yeUV2ZW50RmllbGRMaXN0IiBMZW5ndGhGaWVsZD0i"
"Tm9PZkV2ZW50RGF0YSIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1"
"Y3R1cmVkVHlwZSBOYW1lPSJEZWxldGVSYXdNb2RpZmllZERldGFpbHMiIEJhc2VUeXBlPSJ0bnM6"
"SGlzdG9yeVVwZGF0ZURldGFpbHMiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9kZUlkIiBUeXBl"
"TmFtZT0idWE6Tm9kZUlkIiBTb3VyY2VUeXBlPSJ0bnM6SGlzdG9yeVVwZGF0ZURldGFpbHMiIC8+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJJc0RlbGV0ZU1vZGlmaWVkIiBUeXBlTmFtZT0ib3BjOkJv"
"b2xlYW4iIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTdGFydFRpbWUiIFR5cGVOYW1lPSJvcGM6"
"RGF0ZVRpbWUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJFbmRUaW1lIiBUeXBlTmFtZT0ib3Bj"
"OkRhdGVUaW1lIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVy"
"ZWRUeXBlIE5hbWU9IkRlbGV0ZUF0VGltZURldGFpbHMiIEJhc2VUeXBlPSJ0bnM6SGlzdG9yeVVw"
"ZGF0ZURldGFpbHMiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9kZUlkIiBUeXBlTmFtZT0idWE6"
"Tm9kZUlkIiBTb3VyY2VUeXBlPSJ0bnM6SGlzdG9yeVVwZGF0ZURldGFpbHMiIC8+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJOb09mUmVxVGltZXMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAg"
"PG9wYzpGaWVsZCBOYW1lPSJSZXFUaW1lcyIgVHlwZU5hbWU9Im9wYzpEYXRlVGltZSIgTGVuZ3Ro"
"RmllbGQ9Ik5vT2ZSZXFUaW1lcyIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9w"
"YzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJEZWxldGVFdmVudERldGFpbHMiIEJhc2VUeXBlPSJ0bnM6"
"SGlzdG9yeVVwZGF0ZURldGFpbHMiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9kZUlkIiBUeXBl"
"TmFtZT0idWE6Tm9kZUlkIiBTb3VyY2VUeXBlPSJ0bnM6SGlzdG9yeVVwZGF0ZURldGFpbHMiIC8+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mRXZlbnRJZHMiIFR5cGVOYW1lPSJvcGM6SW50MzIi"
"IC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJFdmVudElkcyIgVHlwZU5hbWU9Im9wYzpCeXRlU3Ry"
"aW5nIiBMZW5ndGhGaWVsZD0iTm9PZkV2ZW50SWRzIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlw"
"ZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9Ikhpc3RvcnlVcGRhdGVSZXN1bHQiIEJh"
"c2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iU3RhdHVz"
"Q29kZSIgVHlwZU5hbWU9InVhOlN0YXR1c0NvZGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJO"
"b09mT3BlcmF0aW9uUmVzdWx0cyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9Ik9wZXJhdGlvblJlc3VsdHMiIFR5cGVOYW1lPSJ1YTpTdGF0dXNDb2RlIiBMZW5n"
"dGhGaWVsZD0iTm9PZk9wZXJhdGlvblJlc3VsdHMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJO"
"b09mRGlhZ25vc3RpY0luZm9zIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iRGlhZ25vc3RpY0luZm9zIiBUeXBlTmFtZT0idWE6RGlhZ25vc3RpY0luZm8iIExl"
"bmd0aEZpZWxkPSJOb09mRGlhZ25vc3RpY0luZm9zIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlw"
"ZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9Ikhpc3RvcnlVcGRhdGVFdmVudFJlc3Vs"
"dCIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJT"
"dGF0dXNDb2RlIiBUeXBlTmFtZT0idWE6U3RhdHVzQ29kZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5h"
"bWU9IkV2ZW50RmlsdGVyUmVzdWx0IiBUeXBlTmFtZT0idG5zOkV2ZW50RmlsdGVyUmVzdWx0IiAv"
"Pg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9"
"Ikhpc3RvcnlVcGRhdGVSZXF1ZXN0IiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAg"
"ICA8b3BjOkZpZWxkIE5hbWU9IlJlcXVlc3RIZWFkZXIiIFR5cGVOYW1lPSJ0bnM6UmVxdWVzdEhl"
"YWRlciIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZIaXN0b3J5VXBkYXRlRGV0YWlscyIg"
"VHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ikhpc3RvcnlVcGRh"
"dGVEZXRhaWxzIiBUeXBlTmFtZT0idWE6RXh0ZW5zaW9uT2JqZWN0IiBMZW5ndGhGaWVsZD0iTm9P"
"Zkhpc3RvcnlVcGRhdGVEZXRhaWxzIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8"
"b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9Ikhpc3RvcnlVcGRhdGVSZXNwb25zZSIgQmFzZVR5cGU9"
"InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXNwb25zZUhlYWRl"
"ciIgVHlwZU5hbWU9InRuczpSZXNwb25zZUhlYWRlciIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9"
"Ik5vT2ZSZXN1bHRzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFt"
"ZT0iUmVzdWx0cyIgVHlwZU5hbWU9InRuczpIaXN0b3J5VXBkYXRlUmVzdWx0IiBMZW5ndGhGaWVs"
"ZD0iTm9PZlJlc3VsdHMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mRGlhZ25vc3RpY0lu"
"Zm9zIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRGlhZ25v"
"c3RpY0luZm9zIiBUeXBlTmFtZT0idWE6RGlhZ25vc3RpY0luZm8iIExlbmd0aEZpZWxkPSJOb09m"
"RGlhZ25vc3RpY0luZm9zIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0"
"cnVjdHVyZWRUeXBlIE5hbWU9IkNhbGxNZXRob2RSZXF1ZXN0IiBCYXNlVHlwZT0idWE6RXh0ZW5z"
"aW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik9iamVjdElkIiBUeXBlTmFtZT0idWE6"
"Tm9kZUlkIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTWV0aG9kSWQiIFR5cGVOYW1lPSJ1YTpO"
"b2RlSWQiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mSW5wdXRBcmd1bWVudHMiIFR5cGVO"
"YW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJJbnB1dEFyZ3VtZW50cyIg"
"VHlwZU5hbWU9InVhOlZhcmlhbnQiIExlbmd0aEZpZWxkPSJOb09mSW5wdXRBcmd1bWVudHMiIC8+"
"DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0i"
"Q2FsbE1ldGhvZFJlc3VsdCIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJTdGF0dXNDb2RlIiBUeXBlTmFtZT0idWE6U3RhdHVzQ29kZSIgLz4NCiAg"
"ICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZJbnB1dEFyZ3VtZW50UmVzdWx0cyIgVHlwZU5hbWU9Im9w"
"YzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IklucHV0QXJndW1lbnRSZXN1bHRzIiBU"
"eXBlTmFtZT0idWE6U3RhdHVzQ29kZSIgTGVuZ3RoRmllbGQ9Ik5vT2ZJbnB1dEFyZ3VtZW50UmVz"
"dWx0cyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZJbnB1dEFyZ3VtZW50RGlhZ25vc3Rp"
"Y0luZm9zIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iSW5w"
"dXRBcmd1bWVudERpYWdub3N0aWNJbmZvcyIgVHlwZU5hbWU9InVhOkRpYWdub3N0aWNJbmZvIiBM"
"ZW5ndGhGaWVsZD0iTm9PZklucHV0QXJndW1lbnREaWFnbm9zdGljSW5mb3MiIC8+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJOb09mT3V0cHV0QXJndW1lbnRzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAv"
"Pg0KICAgIDxvcGM6RmllbGQgTmFtZT0iT3V0cHV0QXJndW1lbnRzIiBUeXBlTmFtZT0idWE6VmFy"
"aWFudCIgTGVuZ3RoRmllbGQ9Ik5vT2ZPdXRwdXRBcmd1bWVudHMiIC8+DQogIDwvb3BjOlN0cnVj"
"dHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iQ2FsbFJlcXVlc3QiIEJh"
"c2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVxdWVz"
"dEhlYWRlciIgVHlwZU5hbWU9InRuczpSZXF1ZXN0SGVhZGVyIiAvPg0KICAgIDxvcGM6RmllbGQg"
"TmFtZT0iTm9PZk1ldGhvZHNUb0NhbGwiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJNZXRob2RzVG9DYWxsIiBUeXBlTmFtZT0idG5zOkNhbGxNZXRob2RSZXF1"
"ZXN0IiBMZW5ndGhGaWVsZD0iTm9PZk1ldGhvZHNUb0NhbGwiIC8+DQogIDwvb3BjOlN0cnVjdHVy"
"ZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iQ2FsbFJlc3BvbnNlIiBCYXNl"
"VHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlc3BvbnNl"
"SGVhZGVyIiBUeXBlTmFtZT0idG5zOlJlc3BvbnNlSGVhZGVyIiAvPg0KICAgIDxvcGM6RmllbGQg"
"TmFtZT0iTm9PZlJlc3VsdHMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVs"
"ZCBOYW1lPSJSZXN1bHRzIiBUeXBlTmFtZT0idG5zOkNhbGxNZXRob2RSZXN1bHQiIExlbmd0aEZp"
"ZWxkPSJOb09mUmVzdWx0cyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZEaWFnbm9zdGlj"
"SW5mb3MiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJEaWFn"
"bm9zdGljSW5mb3MiIFR5cGVOYW1lPSJ1YTpEaWFnbm9zdGljSW5mbyIgTGVuZ3RoRmllbGQ9Ik5v"
"T2ZEaWFnbm9zdGljSW5mb3MiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6"
"RW51bWVyYXRlZFR5cGUgTmFtZT0iTW9uaXRvcmluZ01vZGUiIExlbmd0aEluQml0cz0iMzIiPg0K"
"ICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IkRpc2FibGVkIiBWYWx1ZT0iMCIgLz4NCiAg"
"ICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJTYW1wbGluZyIgVmFsdWU9IjEiIC8+DQogICAg"
"PG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iUmVwb3J0aW5nIiBWYWx1ZT0iMiIgLz4NCiAgPC9v"
"cGM6RW51bWVyYXRlZFR5cGU+DQoNCiAgPG9wYzpFbnVtZXJhdGVkVHlwZSBOYW1lPSJEYXRhQ2hh"
"bmdlVHJpZ2dlciIgTGVuZ3RoSW5CaXRzPSIzMiI+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUg"
"TmFtZT0iU3RhdHVzIiBWYWx1ZT0iMCIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1l"
"PSJTdGF0dXNWYWx1ZSIgVmFsdWU9IjEiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFt"
"ZT0iU3RhdHVzVmFsdWVUaW1lc3RhbXAiIFZhbHVlPSIyIiAvPg0KICA8L29wYzpFbnVtZXJhdGVk"
"VHlwZT4NCg0KICA8b3BjOkVudW1lcmF0ZWRUeXBlIE5hbWU9IkRlYWRiYW5kVHlwZSIgTGVuZ3Ro"
"SW5CaXRzPSIzMiI+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iTm9uZSIgVmFsdWU9"
"IjAiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iQWJzb2x1dGUiIFZhbHVlPSIx"
"IiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IlBlcmNlbnQiIFZhbHVlPSIyIiAv"
"Pg0KICA8L29wYzpFbnVtZXJhdGVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9"
"Ik1vbml0b3JpbmdGaWx0ZXIiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICA8L29w"
"YzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IkRhdGFDaGFu"
"Z2VGaWx0ZXIiIEJhc2VUeXBlPSJ0bnM6TW9uaXRvcmluZ0ZpbHRlciI+DQogICAgPG9wYzpGaWVs"
"ZCBOYW1lPSJUcmlnZ2VyIiBUeXBlTmFtZT0idG5zOkRhdGFDaGFuZ2VUcmlnZ2VyIiAvPg0KICAg"
"IDxvcGM6RmllbGQgTmFtZT0iRGVhZGJhbmRUeXBlIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4N"
"CiAgICA8b3BjOkZpZWxkIE5hbWU9IkRlYWRiYW5kVmFsdWUiIFR5cGVOYW1lPSJvcGM6RG91Ymxl"
"IiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5h"
"bWU9IkV2ZW50RmlsdGVyIiBCYXNlVHlwZT0idG5zOk1vbml0b3JpbmdGaWx0ZXIiPg0KICAgIDxv"
"cGM6RmllbGQgTmFtZT0iTm9PZlNlbGVjdENsYXVzZXMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTZWxlY3RDbGF1c2VzIiBUeXBlTmFtZT0idG5zOlNpbXBs"
"ZUF0dHJpYnV0ZU9wZXJhbmQiIExlbmd0aEZpZWxkPSJOb09mU2VsZWN0Q2xhdXNlcyIgLz4NCiAg"
"ICA8b3BjOkZpZWxkIE5hbWU9IldoZXJlQ2xhdXNlIiBUeXBlTmFtZT0idG5zOkNvbnRlbnRGaWx0"
"ZXIiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUg"
"TmFtZT0iQWdncmVnYXRlQ29uZmlndXJhdGlvbiIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVj"
"dCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJVc2VTZXJ2ZXJDYXBhYmlsaXRpZXNEZWZhdWx0cyIg"
"VHlwZU5hbWU9Im9wYzpCb29sZWFuIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iVHJlYXRVbmNl"
"cnRhaW5Bc0JhZCIgVHlwZU5hbWU9Im9wYzpCb29sZWFuIiAvPg0KICAgIDxvcGM6RmllbGQgTmFt"
"ZT0iUGVyY2VudERhdGFCYWQiIFR5cGVOYW1lPSJvcGM6Qnl0ZSIgLz4NCiAgICA8b3BjOkZpZWxk"
"IE5hbWU9IlBlcmNlbnREYXRhR29vZCIgVHlwZU5hbWU9Im9wYzpCeXRlIiAvPg0KICAgIDxvcGM6"
"RmllbGQgTmFtZT0iVXNlU2xvcGVkRXh0cmFwb2xhdGlvbiIgVHlwZU5hbWU9Im9wYzpCb29sZWFu"
"IiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5h"
"bWU9IkFnZ3JlZ2F0ZUZpbHRlciIgQmFzZVR5cGU9InRuczpNb25pdG9yaW5nRmlsdGVyIj4NCiAg"
"ICA8b3BjOkZpZWxkIE5hbWU9IlN0YXJ0VGltZSIgVHlwZU5hbWU9Im9wYzpEYXRlVGltZSIgLz4N"
"CiAgICA8b3BjOkZpZWxkIE5hbWU9IkFnZ3JlZ2F0ZVR5cGUiIFR5cGVOYW1lPSJ1YTpOb2RlSWQi"
"IC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJQcm9jZXNzaW5nSW50ZXJ2YWwiIFR5cGVOYW1lPSJv"
"cGM6RG91YmxlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iQWdncmVnYXRlQ29uZmlndXJhdGlv"
"biIgVHlwZU5hbWU9InRuczpBZ2dyZWdhdGVDb25maWd1cmF0aW9uIiAvPg0KICA8L29wYzpTdHJ1"
"Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9Ik1vbml0b3JpbmdGaWx0"
"ZXJSZXN1bHQiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICA8L29wYzpTdHJ1Y3R1"
"cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IkV2ZW50RmlsdGVyUmVzdWx0"
"IiBCYXNlVHlwZT0idG5zOk1vbml0b3JpbmdGaWx0ZXJSZXN1bHQiPg0KICAgIDxvcGM6RmllbGQg"
"TmFtZT0iTm9PZlNlbGVjdENsYXVzZVJlc3VsdHMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQog"
"ICAgPG9wYzpGaWVsZCBOYW1lPSJTZWxlY3RDbGF1c2VSZXN1bHRzIiBUeXBlTmFtZT0idWE6U3Rh"
"dHVzQ29kZSIgTGVuZ3RoRmllbGQ9Ik5vT2ZTZWxlY3RDbGF1c2VSZXN1bHRzIiAvPg0KICAgIDxv"
"cGM6RmllbGQgTmFtZT0iTm9PZlNlbGVjdENsYXVzZURpYWdub3N0aWNJbmZvcyIgVHlwZU5hbWU9"
"Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlNlbGVjdENsYXVzZURpYWdub3N0"
"aWNJbmZvcyIgVHlwZU5hbWU9InVhOkRpYWdub3N0aWNJbmZvIiBMZW5ndGhGaWVsZD0iTm9PZlNl"
"bGVjdENsYXVzZURpYWdub3N0aWNJbmZvcyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IldoZXJl"
"Q2xhdXNlUmVzdWx0IiBUeXBlTmFtZT0idG5zOkNvbnRlbnRGaWx0ZXJSZXN1bHQiIC8+DQogIDwv"
"b3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iQWdncmVn"
"YXRlRmlsdGVyUmVzdWx0IiBCYXNlVHlwZT0idG5zOk1vbml0b3JpbmdGaWx0ZXJSZXN1bHQiPg0K"
"ICAgIDxvcGM6RmllbGQgTmFtZT0iUmV2aXNlZFN0YXJ0VGltZSIgVHlwZU5hbWU9Im9wYzpEYXRl"
"VGltZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJldmlzZWRQcm9jZXNzaW5nSW50ZXJ2YWwi"
"IFR5cGVOYW1lPSJvcGM6RG91YmxlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmV2aXNlZEFn"
"Z3JlZ2F0ZUNvbmZpZ3VyYXRpb24iIFR5cGVOYW1lPSJ0bnM6QWdncmVnYXRlQ29uZmlndXJhdGlv"
"biIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBO"
"YW1lPSJNb25pdG9yaW5nUGFyYW1ldGVycyIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJDbGllbnRIYW5kbGUiIFR5cGVOYW1lPSJvcGM6VUludDMy"
"IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iU2FtcGxpbmdJbnRlcnZhbCIgVHlwZU5hbWU9Im9w"
"YzpEb3VibGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJGaWx0ZXIiIFR5cGVOYW1lPSJ1YTpF"
"eHRlbnNpb25PYmplY3QiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJRdWV1ZVNpemUiIFR5cGVO"
"YW1lPSJvcGM6VUludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRGlzY2FyZE9sZGVzdCIg"
"VHlwZU5hbWU9Im9wYzpCb29sZWFuIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8"
"b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9Ik1vbml0b3JlZEl0ZW1DcmVhdGVSZXF1ZXN0IiBCYXNl"
"VHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ikl0ZW1Ub01v"
"bml0b3IiIFR5cGVOYW1lPSJ0bnM6UmVhZFZhbHVlSWQiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1l"
"PSJNb25pdG9yaW5nTW9kZSIgVHlwZU5hbWU9InRuczpNb25pdG9yaW5nTW9kZSIgLz4NCiAgICA8"
"b3BjOkZpZWxkIE5hbWU9IlJlcXVlc3RlZFBhcmFtZXRlcnMiIFR5cGVOYW1lPSJ0bnM6TW9uaXRv"
"cmluZ1BhcmFtZXRlcnMiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3Ry"
"dWN0dXJlZFR5cGUgTmFtZT0iTW9uaXRvcmVkSXRlbUNyZWF0ZVJlc3VsdCIgQmFzZVR5cGU9InVh"
"OkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTdGF0dXNDb2RlIiBUeXBl"
"TmFtZT0idWE6U3RhdHVzQ29kZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik1vbml0b3JlZEl0"
"ZW1JZCIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXZp"
"c2VkU2FtcGxpbmdJbnRlcnZhbCIgVHlwZU5hbWU9Im9wYzpEb3VibGUiIC8+DQogICAgPG9wYzpG"
"aWVsZCBOYW1lPSJSZXZpc2VkUXVldWVTaXplIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAg"
"ICA8b3BjOkZpZWxkIE5hbWU9IkZpbHRlclJlc3VsdCIgVHlwZU5hbWU9InVhOkV4dGVuc2lvbk9i"
"amVjdCIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlw"
"ZSBOYW1lPSJDcmVhdGVNb25pdG9yZWRJdGVtc1JlcXVlc3QiIEJhc2VUeXBlPSJ1YTpFeHRlbnNp"
"b25PYmplY3QiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVxdWVzdEhlYWRlciIgVHlwZU5hbWU9"
"InRuczpSZXF1ZXN0SGVhZGVyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iU3Vic2NyaXB0aW9u"
"SWQiIFR5cGVOYW1lPSJvcGM6VUludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iVGltZXN0"
"YW1wc1RvUmV0dXJuIiBUeXBlTmFtZT0idG5zOlRpbWVzdGFtcHNUb1JldHVybiIgLz4NCiAgICA8"
"b3BjOkZpZWxkIE5hbWU9Ik5vT2ZJdGVtc1RvQ3JlYXRlIiBUeXBlTmFtZT0ib3BjOkludDMyIiAv"
"Pg0KICAgIDxvcGM6RmllbGQgTmFtZT0iSXRlbXNUb0NyZWF0ZSIgVHlwZU5hbWU9InRuczpNb25p"
"dG9yZWRJdGVtQ3JlYXRlUmVxdWVzdCIgTGVuZ3RoRmllbGQ9Ik5vT2ZJdGVtc1RvQ3JlYXRlIiAv"
"Pg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9"
"IkNyZWF0ZU1vbml0b3JlZEl0ZW1zUmVzcG9uc2UiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmpl"
"Y3QiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVzcG9uc2VIZWFkZXIiIFR5cGVOYW1lPSJ0bnM6"
"UmVzcG9uc2VIZWFkZXIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mUmVzdWx0cyIgVHlw"
"ZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlc3VsdHMiIFR5cGVO"
"YW1lPSJ0bnM6TW9uaXRvcmVkSXRlbUNyZWF0ZVJlc3VsdCIgTGVuZ3RoRmllbGQ9Ik5vT2ZSZXN1"
"bHRzIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZkRpYWdub3N0aWNJbmZvcyIgVHlwZU5h"
"bWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkRpYWdub3N0aWNJbmZvcyIg"
"VHlwZU5hbWU9InVhOkRpYWdub3N0aWNJbmZvIiBMZW5ndGhGaWVsZD0iTm9PZkRpYWdub3N0aWNJ"
"bmZvcyIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlw"
"ZSBOYW1lPSJNb25pdG9yZWRJdGVtTW9kaWZ5UmVxdWVzdCIgQmFzZVR5cGU9InVhOkV4dGVuc2lv"
"bk9iamVjdCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJNb25pdG9yZWRJdGVtSWQiIFR5cGVOYW1l"
"PSJvcGM6VUludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVxdWVzdGVkUGFyYW1ldGVy"
"cyIgVHlwZU5hbWU9InRuczpNb25pdG9yaW5nUGFyYW1ldGVycyIgLz4NCiAgPC9vcGM6U3RydWN0"
"dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJNb25pdG9yZWRJdGVtTW9k"
"aWZ5UmVzdWx0IiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxk"
"IE5hbWU9IlN0YXR1c0NvZGUiIFR5cGVOYW1lPSJ1YTpTdGF0dXNDb2RlIiAvPg0KICAgIDxvcGM6"
"RmllbGQgTmFtZT0iUmV2aXNlZFNhbXBsaW5nSW50ZXJ2YWwiIFR5cGVOYW1lPSJvcGM6RG91Ymxl"
"IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmV2aXNlZFF1ZXVlU2l6ZSIgVHlwZU5hbWU9Im9w"
"YzpVSW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJGaWx0ZXJSZXN1bHQiIFR5cGVOYW1l"
"PSJ1YTpFeHRlbnNpb25PYmplY3QiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxv"
"cGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iTW9kaWZ5TW9uaXRvcmVkSXRlbXNSZXF1ZXN0IiBCYXNl"
"VHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlcXVlc3RI"
"ZWFkZXIiIFR5cGVOYW1lPSJ0bnM6UmVxdWVzdEhlYWRlciIgLz4NCiAgICA8b3BjOkZpZWxkIE5h"
"bWU9IlN1YnNjcmlwdGlvbklkIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9IlRpbWVzdGFtcHNUb1JldHVybiIgVHlwZU5hbWU9InRuczpUaW1lc3RhbXBzVG9S"
"ZXR1cm4iIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mSXRlbXNUb01vZGlmeSIgVHlwZU5h"
"bWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ikl0ZW1zVG9Nb2RpZnkiIFR5"
"cGVOYW1lPSJ0bnM6TW9uaXRvcmVkSXRlbU1vZGlmeVJlcXVlc3QiIExlbmd0aEZpZWxkPSJOb09m"
"SXRlbXNUb01vZGlmeSIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1"
"Y3R1cmVkVHlwZSBOYW1lPSJNb2RpZnlNb25pdG9yZWRJdGVtc1Jlc3BvbnNlIiBCYXNlVHlwZT0i"
"dWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlc3BvbnNlSGVhZGVy"
"IiBUeXBlTmFtZT0idG5zOlJlc3BvbnNlSGVhZGVyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0i"
"Tm9PZlJlc3VsdHMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1l"
"PSJSZXN1bHRzIiBUeXBlTmFtZT0idG5zOk1vbml0b3JlZEl0ZW1Nb2RpZnlSZXN1bHQiIExlbmd0"
"aEZpZWxkPSJOb09mUmVzdWx0cyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZEaWFnbm9z"
"dGljSW5mb3MiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJE"
"aWFnbm9zdGljSW5mb3MiIFR5cGVOYW1lPSJ1YTpEaWFnbm9zdGljSW5mbyIgTGVuZ3RoRmllbGQ9"
"Ik5vT2ZEaWFnbm9zdGljSW5mb3MiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxv"
"cGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iU2V0TW9uaXRvcmluZ01vZGVSZXF1ZXN0IiBCYXNlVHlw"
"ZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlcXVlc3RIZWFk"
"ZXIiIFR5cGVOYW1lPSJ0bnM6UmVxdWVzdEhlYWRlciIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9"
"IlN1YnNjcmlwdGlvbklkIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxk"
"IE5hbWU9Ik1vbml0b3JpbmdNb2RlIiBUeXBlTmFtZT0idG5zOk1vbml0b3JpbmdNb2RlIiAvPg0K"
"ICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZk1vbml0b3JlZEl0ZW1JZHMiIFR5cGVOYW1lPSJvcGM6"
"SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJNb25pdG9yZWRJdGVtSWRzIiBUeXBlTmFt"
"ZT0ib3BjOlVJbnQzMiIgTGVuZ3RoRmllbGQ9Ik5vT2ZNb25pdG9yZWRJdGVtSWRzIiAvPg0KICA8"
"L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IlNldE1v"
"bml0b3JpbmdNb2RlUmVzcG9uc2UiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAg"
"IDxvcGM6RmllbGQgTmFtZT0iUmVzcG9uc2VIZWFkZXIiIFR5cGVOYW1lPSJ0bnM6UmVzcG9uc2VI"
"ZWFkZXIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mUmVzdWx0cyIgVHlwZU5hbWU9Im9w"
"YzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlc3VsdHMiIFR5cGVOYW1lPSJ1YTpT"
"dGF0dXNDb2RlIiBMZW5ndGhGaWVsZD0iTm9PZlJlc3VsdHMiIC8+DQogICAgPG9wYzpGaWVsZCBO"
"YW1lPSJOb09mRGlhZ25vc3RpY0luZm9zIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxv"
"cGM6RmllbGQgTmFtZT0iRGlhZ25vc3RpY0luZm9zIiBUeXBlTmFtZT0idWE6RGlhZ25vc3RpY0lu"
"Zm8iIExlbmd0aEZpZWxkPSJOb09mRGlhZ25vc3RpY0luZm9zIiAvPg0KICA8L29wYzpTdHJ1Y3R1"
"cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IlNldFRyaWdnZXJpbmdSZXF1"
"ZXN0IiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9"
"IlJlcXVlc3RIZWFkZXIiIFR5cGVOYW1lPSJ0bnM6UmVxdWVzdEhlYWRlciIgLz4NCiAgICA8b3Bj"
"OkZpZWxkIE5hbWU9IlN1YnNjcmlwdGlvbklkIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAg"
"ICA8b3BjOkZpZWxkIE5hbWU9IlRyaWdnZXJpbmdJdGVtSWQiIFR5cGVOYW1lPSJvcGM6VUludDMy"
"IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZkxpbmtzVG9BZGQiIFR5cGVOYW1lPSJvcGM6"
"SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJMaW5rc1RvQWRkIiBUeXBlTmFtZT0ib3Bj"
"OlVJbnQzMiIgTGVuZ3RoRmllbGQ9Ik5vT2ZMaW5rc1RvQWRkIiAvPg0KICAgIDxvcGM6RmllbGQg"
"TmFtZT0iTm9PZkxpbmtzVG9SZW1vdmUiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJMaW5rc1RvUmVtb3ZlIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgTGVuZ3Ro"
"RmllbGQ9Ik5vT2ZMaW5rc1RvUmVtb3ZlIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0K"
"ICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IlNldFRyaWdnZXJpbmdSZXNwb25zZSIgQmFzZVR5"
"cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXNwb25zZUhl"
"YWRlciIgVHlwZU5hbWU9InRuczpSZXNwb25zZUhlYWRlciIgLz4NCiAgICA8b3BjOkZpZWxkIE5h"
"bWU9Ik5vT2ZBZGRSZXN1bHRzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iQWRkUmVzdWx0cyIgVHlwZU5hbWU9InVhOlN0YXR1c0NvZGUiIExlbmd0aEZpZWxk"
"PSJOb09mQWRkUmVzdWx0cyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZBZGREaWFnbm9z"
"dGljSW5mb3MiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJB"
"ZGREaWFnbm9zdGljSW5mb3MiIFR5cGVOYW1lPSJ1YTpEaWFnbm9zdGljSW5mbyIgTGVuZ3RoRmll"
"bGQ9Ik5vT2ZBZGREaWFnbm9zdGljSW5mb3MiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09m"
"UmVtb3ZlUmVzdWx0cyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5h"
"bWU9IlJlbW92ZVJlc3VsdHMiIFR5cGVOYW1lPSJ1YTpTdGF0dXNDb2RlIiBMZW5ndGhGaWVsZD0i"
"Tm9PZlJlbW92ZVJlc3VsdHMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mUmVtb3ZlRGlh"
"Z25vc3RpY0luZm9zIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFt"
"ZT0iUmVtb3ZlRGlhZ25vc3RpY0luZm9zIiBUeXBlTmFtZT0idWE6RGlhZ25vc3RpY0luZm8iIExl"
"bmd0aEZpZWxkPSJOb09mUmVtb3ZlRGlhZ25vc3RpY0luZm9zIiAvPg0KICA8L29wYzpTdHJ1Y3R1"
"cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IkRlbGV0ZU1vbml0b3JlZEl0"
"ZW1zUmVxdWVzdCIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpGaWVs"
"ZCBOYW1lPSJSZXF1ZXN0SGVhZGVyIiBUeXBlTmFtZT0idG5zOlJlcXVlc3RIZWFkZXIiIC8+DQog"
"ICAgPG9wYzpGaWVsZCBOYW1lPSJTdWJzY3JpcHRpb25JZCIgVHlwZU5hbWU9Im9wYzpVSW50MzIi"
"IC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mTW9uaXRvcmVkSXRlbUlkcyIgVHlwZU5hbWU9"
"Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik1vbml0b3JlZEl0ZW1JZHMiIFR5"
"cGVOYW1lPSJvcGM6VUludDMyIiBMZW5ndGhGaWVsZD0iTm9PZk1vbml0b3JlZEl0ZW1JZHMiIC8+"
"DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0i"
"RGVsZXRlTW9uaXRvcmVkSXRlbXNSZXNwb25zZSIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVj"
"dCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXNwb25zZUhlYWRlciIgVHlwZU5hbWU9InRuczpS"
"ZXNwb25zZUhlYWRlciIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZSZXN1bHRzIiBUeXBl"
"TmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVzdWx0cyIgVHlwZU5h"
"bWU9InVhOlN0YXR1c0NvZGUiIExlbmd0aEZpZWxkPSJOb09mUmVzdWx0cyIgLz4NCiAgICA8b3Bj"
"OkZpZWxkIE5hbWU9Ik5vT2ZEaWFnbm9zdGljSW5mb3MiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJEaWFnbm9zdGljSW5mb3MiIFR5cGVOYW1lPSJ1YTpEaWFn"
"bm9zdGljSW5mbyIgTGVuZ3RoRmllbGQ9Ik5vT2ZEaWFnbm9zdGljSW5mb3MiIC8+DQogIDwvb3Bj"
"OlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iQ3JlYXRlU3Vi"
"c2NyaXB0aW9uUmVxdWVzdCIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJSZXF1ZXN0SGVhZGVyIiBUeXBlTmFtZT0idG5zOlJlcXVlc3RIZWFkZXIi"
"IC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXF1ZXN0ZWRQdWJsaXNoaW5nSW50ZXJ2YWwiIFR5"
"cGVOYW1lPSJvcGM6RG91YmxlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVxdWVzdGVkTGlm"
"ZXRpbWVDb3VudCIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1l"
"PSJSZXF1ZXN0ZWRNYXhLZWVwQWxpdmVDb3VudCIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIC8+DQog"
"ICAgPG9wYzpGaWVsZCBOYW1lPSJNYXhOb3RpZmljYXRpb25zUGVyUHVibGlzaCIgVHlwZU5hbWU9"
"Im9wYzpVSW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJQdWJsaXNoaW5nRW5hYmxlZCIg"
"VHlwZU5hbWU9Im9wYzpCb29sZWFuIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUHJpb3JpdHki"
"IFR5cGVOYW1lPSJvcGM6Qnl0ZSIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9w"
"YzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJDcmVhdGVTdWJzY3JpcHRpb25SZXNwb25zZSIgQmFzZVR5"
"cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXNwb25zZUhl"
"YWRlciIgVHlwZU5hbWU9InRuczpSZXNwb25zZUhlYWRlciIgLz4NCiAgICA8b3BjOkZpZWxkIE5h"
"bWU9IlN1YnNjcmlwdGlvbklkIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9IlJldmlzZWRQdWJsaXNoaW5nSW50ZXJ2YWwiIFR5cGVOYW1lPSJvcGM6RG91Ymxl"
"IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmV2aXNlZExpZmV0aW1lQ291bnQiIFR5cGVOYW1l"
"PSJvcGM6VUludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmV2aXNlZE1heEtlZXBBbGl2"
"ZUNvdW50IiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+"
"DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJNb2RpZnlTdWJzY3JpcHRpb25SZXF1ZXN0"
"IiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJl"
"cXVlc3RIZWFkZXIiIFR5cGVOYW1lPSJ0bnM6UmVxdWVzdEhlYWRlciIgLz4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9IlN1YnNjcmlwdGlvbklkIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8"
"b3BjOkZpZWxkIE5hbWU9IlJlcXVlc3RlZFB1Ymxpc2hpbmdJbnRlcnZhbCIgVHlwZU5hbWU9Im9w"
"YzpEb3VibGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXF1ZXN0ZWRMaWZldGltZUNvdW50"
"IiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlcXVlc3Rl"
"ZE1heEtlZXBBbGl2ZUNvdW50IiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9Ik1heE5vdGlmaWNhdGlvbnNQZXJQdWJsaXNoIiBUeXBlTmFtZT0ib3BjOlVJbnQz"
"MiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlByaW9yaXR5IiBUeXBlTmFtZT0ib3BjOkJ5dGUi"
"IC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFt"
"ZT0iTW9kaWZ5U3Vic2NyaXB0aW9uUmVzcG9uc2UiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmpl"
"Y3QiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVzcG9uc2VIZWFkZXIiIFR5cGVOYW1lPSJ0bnM6"
"UmVzcG9uc2VIZWFkZXIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXZpc2VkUHVibGlzaGlu"
"Z0ludGVydmFsIiBUeXBlTmFtZT0ib3BjOkRvdWJsZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9"
"IlJldmlzZWRMaWZldGltZUNvdW50IiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8b3Bj"
"OkZpZWxkIE5hbWU9IlJldmlzZWRNYXhLZWVwQWxpdmVDb3VudCIgVHlwZU5hbWU9Im9wYzpVSW50"
"MzIiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUg"
"TmFtZT0iU2V0UHVibGlzaGluZ01vZGVSZXF1ZXN0IiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2Jq"
"ZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlcXVlc3RIZWFkZXIiIFR5cGVOYW1lPSJ0bnM6"
"UmVxdWVzdEhlYWRlciIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlB1Ymxpc2hpbmdFbmFibGVk"
"IiBUeXBlTmFtZT0ib3BjOkJvb2xlYW4iIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mU3Vi"
"c2NyaXB0aW9uSWRzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFt"
"ZT0iU3Vic2NyaXB0aW9uSWRzIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgTGVuZ3RoRmllbGQ9Ik5v"
"T2ZTdWJzY3JpcHRpb25JZHMiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6"
"U3RydWN0dXJlZFR5cGUgTmFtZT0iU2V0UHVibGlzaGluZ01vZGVSZXNwb25zZSIgQmFzZVR5cGU9"
"InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXNwb25zZUhlYWRl"
"ciIgVHlwZU5hbWU9InRuczpSZXNwb25zZUhlYWRlciIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9"
"Ik5vT2ZSZXN1bHRzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFt"
"ZT0iUmVzdWx0cyIgVHlwZU5hbWU9InVhOlN0YXR1c0NvZGUiIExlbmd0aEZpZWxkPSJOb09mUmVz"
"dWx0cyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZEaWFnbm9zdGljSW5mb3MiIFR5cGVO"
"YW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJEaWFnbm9zdGljSW5mb3Mi"
"IFR5cGVOYW1lPSJ1YTpEaWFnbm9zdGljSW5mbyIgTGVuZ3RoRmllbGQ9Ik5vT2ZEaWFnbm9zdGlj"
"SW5mb3MiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5"
"cGUgTmFtZT0iTm90aWZpY2F0aW9uTWVzc2FnZSIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVj"
"dCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTZXF1ZW5jZU51bWJlciIgVHlwZU5hbWU9Im9wYzpV"
"SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJQdWJsaXNoVGltZSIgVHlwZU5hbWU9Im9w"
"YzpEYXRlVGltZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZOb3RpZmljYXRpb25EYXRh"
"IiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm90aWZpY2F0"
"aW9uRGF0YSIgVHlwZU5hbWU9InVhOkV4dGVuc2lvbk9iamVjdCIgTGVuZ3RoRmllbGQ9Ik5vT2ZO"
"b3RpZmljYXRpb25EYXRhIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0"
"cnVjdHVyZWRUeXBlIE5hbWU9Ik5vdGlmaWNhdGlvbkRhdGEiIEJhc2VUeXBlPSJ1YTpFeHRlbnNp"
"b25PYmplY3QiPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRU"
"eXBlIE5hbWU9IkRhdGFDaGFuZ2VOb3RpZmljYXRpb24iIEJhc2VUeXBlPSJ0bnM6Tm90aWZpY2F0"
"aW9uRGF0YSI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mTW9uaXRvcmVkSXRlbXMiIFR5cGVO"
"YW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJNb25pdG9yZWRJdGVtcyIg"
"VHlwZU5hbWU9InRuczpNb25pdG9yZWRJdGVtTm90aWZpY2F0aW9uIiBMZW5ndGhGaWVsZD0iTm9P"
"Zk1vbml0b3JlZEl0ZW1zIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZkRpYWdub3N0aWNJ"
"bmZvcyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkRpYWdu"
"b3N0aWNJbmZvcyIgVHlwZU5hbWU9InVhOkRpYWdub3N0aWNJbmZvIiBMZW5ndGhGaWVsZD0iTm9P"
"ZkRpYWdub3N0aWNJbmZvcyIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpT"
"dHJ1Y3R1cmVkVHlwZSBOYW1lPSJNb25pdG9yZWRJdGVtTm90aWZpY2F0aW9uIiBCYXNlVHlwZT0i"
"dWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkNsaWVudEhhbmRsZSIg"
"VHlwZU5hbWU9Im9wYzpVSW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJWYWx1ZSIgVHlw"
"ZU5hbWU9InVhOkRhdGFWYWx1ZSIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9w"
"YzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJFdmVudE5vdGlmaWNhdGlvbkxpc3QiIEJhc2VUeXBlPSJ0"
"bnM6Tm90aWZpY2F0aW9uRGF0YSI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mRXZlbnRzIiBU"
"eXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRXZlbnRzIiBUeXBl"
"TmFtZT0idG5zOkV2ZW50RmllbGRMaXN0IiBMZW5ndGhGaWVsZD0iTm9PZkV2ZW50cyIgLz4NCiAg"
"PC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJFdmVu"
"dEZpZWxkTGlzdCIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpGaWVs"
"ZCBOYW1lPSJDbGllbnRIYW5kbGUiIFR5cGVOYW1lPSJvcGM6VUludDMyIiAvPg0KICAgIDxvcGM6"
"RmllbGQgTmFtZT0iTm9PZkV2ZW50RmllbGRzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAg"
"IDxvcGM6RmllbGQgTmFtZT0iRXZlbnRGaWVsZHMiIFR5cGVOYW1lPSJ1YTpWYXJpYW50IiBMZW5n"
"dGhGaWVsZD0iTm9PZkV2ZW50RmllbGRzIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0K"
"ICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9Ikhpc3RvcnlFdmVudEZpZWxkTGlzdCIgQmFzZVR5"
"cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mRXZlbnRG"
"aWVsZHMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJFdmVu"
"dEZpZWxkcyIgVHlwZU5hbWU9InVhOlZhcmlhbnQiIExlbmd0aEZpZWxkPSJOb09mRXZlbnRGaWVs"
"ZHMiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUg"
"TmFtZT0iU3RhdHVzQ2hhbmdlTm90aWZpY2F0aW9uIiBCYXNlVHlwZT0idG5zOk5vdGlmaWNhdGlv"
"bkRhdGEiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iU3RhdHVzIiBUeXBlTmFtZT0idWE6U3RhdHVz"
"Q29kZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkRpYWdub3N0aWNJbmZvIiBUeXBlTmFtZT0i"
"dWE6RGlhZ25vc3RpY0luZm8iIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6"
"U3RydWN0dXJlZFR5cGUgTmFtZT0iU3Vic2NyaXB0aW9uQWNrbm93bGVkZ2VtZW50IiBCYXNlVHlw"
"ZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlN1YnNjcmlwdGlv"
"bklkIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlNlcXVl"
"bmNlTnVtYmVyIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5"
"cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJQdWJsaXNoUmVxdWVzdCIgQmFzZVR5"
"cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXF1ZXN0SGVh"
"ZGVyIiBUeXBlTmFtZT0idG5zOlJlcXVlc3RIZWFkZXIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1l"
"PSJOb09mU3Vic2NyaXB0aW9uQWNrbm93bGVkZ2VtZW50cyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIg"
"Lz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlN1YnNjcmlwdGlvbkFja25vd2xlZGdlbWVudHMiIFR5"
"cGVOYW1lPSJ0bnM6U3Vic2NyaXB0aW9uQWNrbm93bGVkZ2VtZW50IiBMZW5ndGhGaWVsZD0iTm9P"
"ZlN1YnNjcmlwdGlvbkFja25vd2xlZGdlbWVudHMiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBl"
"Pg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iUHVibGlzaFJlc3BvbnNlIiBCYXNlVHlw"
"ZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlc3BvbnNlSGVh"
"ZGVyIiBUeXBlTmFtZT0idG5zOlJlc3BvbnNlSGVhZGVyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFt"
"ZT0iU3Vic2NyaXB0aW9uSWQiIFR5cGVOYW1lPSJvcGM6VUludDMyIiAvPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iTm9PZkF2YWlsYWJsZVNlcXVlbmNlTnVtYmVycyIgVHlwZU5hbWU9Im9wYzpJbnQz"
"MiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkF2YWlsYWJsZVNlcXVlbmNlTnVtYmVycyIgVHlw"
"ZU5hbWU9Im9wYzpVSW50MzIiIExlbmd0aEZpZWxkPSJOb09mQXZhaWxhYmxlU2VxdWVuY2VOdW1i"
"ZXJzIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTW9yZU5vdGlmaWNhdGlvbnMiIFR5cGVOYW1l"
"PSJvcGM6Qm9vbGVhbiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vdGlmaWNhdGlvbk1lc3Nh"
"Z2UiIFR5cGVOYW1lPSJ0bnM6Tm90aWZpY2F0aW9uTWVzc2FnZSIgLz4NCiAgICA8b3BjOkZpZWxk"
"IE5hbWU9Ik5vT2ZSZXN1bHRzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iUmVzdWx0cyIgVHlwZU5hbWU9InVhOlN0YXR1c0NvZGUiIExlbmd0aEZpZWxkPSJO"
"b09mUmVzdWx0cyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZEaWFnbm9zdGljSW5mb3Mi"
"IFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJEaWFnbm9zdGlj"
"SW5mb3MiIFR5cGVOYW1lPSJ1YTpEaWFnbm9zdGljSW5mbyIgTGVuZ3RoRmllbGQ9Ik5vT2ZEaWFn"
"bm9zdGljSW5mb3MiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0"
"dXJlZFR5cGUgTmFtZT0iUmVwdWJsaXNoUmVxdWVzdCIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9i"
"amVjdCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXF1ZXN0SGVhZGVyIiBUeXBlTmFtZT0idG5z"
"OlJlcXVlc3RIZWFkZXIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTdWJzY3JpcHRpb25JZCIg"
"VHlwZU5hbWU9Im9wYzpVSW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXRyYW5zbWl0"
"U2VxdWVuY2VOdW1iZXIiIFR5cGVOYW1lPSJvcGM6VUludDMyIiAvPg0KICA8L29wYzpTdHJ1Y3R1"
"cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IlJlcHVibGlzaFJlc3BvbnNl"
"IiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJl"
"c3BvbnNlSGVhZGVyIiBUeXBlTmFtZT0idG5zOlJlc3BvbnNlSGVhZGVyIiAvPg0KICAgIDxvcGM6"
"RmllbGQgTmFtZT0iTm90aWZpY2F0aW9uTWVzc2FnZSIgVHlwZU5hbWU9InRuczpOb3RpZmljYXRp"
"b25NZXNzYWdlIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVy"
"ZWRUeXBlIE5hbWU9IlRyYW5zZmVyUmVzdWx0IiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0"
"Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlN0YXR1c0NvZGUiIFR5cGVOYW1lPSJ1YTpTdGF0dXND"
"b2RlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZkF2YWlsYWJsZVNlcXVlbmNlTnVtYmVy"
"cyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkF2YWlsYWJs"
"ZVNlcXVlbmNlTnVtYmVycyIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIExlbmd0aEZpZWxkPSJOb09m"
"QXZhaWxhYmxlU2VxdWVuY2VOdW1iZXJzIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0K"
"ICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IlRyYW5zZmVyU3Vic2NyaXB0aW9uc1JlcXVlc3Qi"
"IEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVx"
"dWVzdEhlYWRlciIgVHlwZU5hbWU9InRuczpSZXF1ZXN0SGVhZGVyIiAvPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iTm9PZlN1YnNjcmlwdGlvbklkcyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAg"
"ICA8b3BjOkZpZWxkIE5hbWU9IlN1YnNjcmlwdGlvbklkcyIgVHlwZU5hbWU9Im9wYzpVSW50MzIi"
"IExlbmd0aEZpZWxkPSJOb09mU3Vic2NyaXB0aW9uSWRzIiAvPg0KICAgIDxvcGM6RmllbGQgTmFt"
"ZT0iU2VuZEluaXRpYWxWYWx1ZXMiIFR5cGVOYW1lPSJvcGM6Qm9vbGVhbiIgLz4NCiAgPC9vcGM6"
"U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJUcmFuc2ZlclN1"
"YnNjcmlwdGlvbnNSZXNwb25zZSIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAg"
"PG9wYzpGaWVsZCBOYW1lPSJSZXNwb25zZUhlYWRlciIgVHlwZU5hbWU9InRuczpSZXNwb25zZUhl"
"YWRlciIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZSZXN1bHRzIiBUeXBlTmFtZT0ib3Bj"
"OkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVzdWx0cyIgVHlwZU5hbWU9InRuczpU"
"cmFuc2ZlclJlc3VsdCIgTGVuZ3RoRmllbGQ9Ik5vT2ZSZXN1bHRzIiAvPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iTm9PZkRpYWdub3N0aWNJbmZvcyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAg"
"ICA8b3BjOkZpZWxkIE5hbWU9IkRpYWdub3N0aWNJbmZvcyIgVHlwZU5hbWU9InVhOkRpYWdub3N0"
"aWNJbmZvIiBMZW5ndGhGaWVsZD0iTm9PZkRpYWdub3N0aWNJbmZvcyIgLz4NCiAgPC9vcGM6U3Ry"
"dWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJEZWxldGVTdWJzY3Jp"
"cHRpb25zUmVxdWVzdCIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpG"
"aWVsZCBOYW1lPSJSZXF1ZXN0SGVhZGVyIiBUeXBlTmFtZT0idG5zOlJlcXVlc3RIZWFkZXIiIC8+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mU3Vic2NyaXB0aW9uSWRzIiBUeXBlTmFtZT0ib3Bj"
"OkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iU3Vic2NyaXB0aW9uSWRzIiBUeXBlTmFt"
"ZT0ib3BjOlVJbnQzMiIgTGVuZ3RoRmllbGQ9Ik5vT2ZTdWJzY3JpcHRpb25JZHMiIC8+DQogIDwv"
"b3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iRGVsZXRl"
"U3Vic2NyaXB0aW9uc1Jlc3BvbnNlIiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAg"
"ICA8b3BjOkZpZWxkIE5hbWU9IlJlc3BvbnNlSGVhZGVyIiBUeXBlTmFtZT0idG5zOlJlc3BvbnNl"
"SGVhZGVyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZlJlc3VsdHMiIFR5cGVOYW1lPSJv"
"cGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXN1bHRzIiBUeXBlTmFtZT0idWE6"
"U3RhdHVzQ29kZSIgTGVuZ3RoRmllbGQ9Ik5vT2ZSZXN1bHRzIiAvPg0KICAgIDxvcGM6RmllbGQg"
"TmFtZT0iTm9PZkRpYWdub3N0aWNJbmZvcyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8"
"b3BjOkZpZWxkIE5hbWU9IkRpYWdub3N0aWNJbmZvcyIgVHlwZU5hbWU9InVhOkRpYWdub3N0aWNJ"
"bmZvIiBMZW5ndGhGaWVsZD0iTm9PZkRpYWdub3N0aWNJbmZvcyIgLz4NCiAgPC9vcGM6U3RydWN0"
"dXJlZFR5cGU+DQoNCiAgPG9wYzpFbnVtZXJhdGVkVHlwZSBOYW1lPSJFbnVtZXJhdGVkVGVzdFR5"
"cGUiIExlbmd0aEluQml0cz0iMzIiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5BIHNpbXBsZSBl"
"bnVtZXJhdGVkIHR5cGUgdXNlZCBmb3IgdGVzdGluZy48L29wYzpEb2N1bWVudGF0aW9uPg0KICAg"
"IDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IlJlZCIgVmFsdWU9IjEiIC8+DQogICAgPG9wYzpF"
"bnVtZXJhdGVkVmFsdWUgTmFtZT0iWWVsbG93IiBWYWx1ZT0iNCIgLz4NCiAgICA8b3BjOkVudW1l"
"cmF0ZWRWYWx1ZSBOYW1lPSJHcmVlbiIgVmFsdWU9IjUiIC8+DQogIDwvb3BjOkVudW1lcmF0ZWRU"
"eXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iU2NhbGFyVGVzdFR5cGUiIEJhc2VU"
"eXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RG9jdW1lbnRhdGlvbj5BIGNvbXBs"
"ZXggdHlwZSBjb250YWluaW5nIGFsbCBwb3NzaWJsZSBzY2FsYXIgdHlwZXMgdXNlZCBmb3IgdGVz"
"dGluZy48L29wYzpEb2N1bWVudGF0aW9uPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iQm9vbGVhbiIg"
"VHlwZU5hbWU9Im9wYzpCb29sZWFuIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iU0J5dGUiIFR5"
"cGVOYW1lPSJvcGM6U0J5dGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJCeXRlIiBUeXBlTmFt"
"ZT0ib3BjOkJ5dGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJJbnQxNiIgVHlwZU5hbWU9Im9w"
"YzpJbnQxNiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlVJbnQxNiIgVHlwZU5hbWU9Im9wYzpV"
"SW50MTYiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJJbnQzMiIgVHlwZU5hbWU9Im9wYzpJbnQz"
"MiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlVJbnQzMiIgVHlwZU5hbWU9Im9wYzpVSW50MzIi"
"IC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJJbnQ2NCIgVHlwZU5hbWU9Im9wYzpJbnQ2NCIgLz4N"
"CiAgICA8b3BjOkZpZWxkIE5hbWU9IlVJbnQ2NCIgVHlwZU5hbWU9Im9wYzpVSW50NjQiIC8+DQog"
"ICAgPG9wYzpGaWVsZCBOYW1lPSJGbG9hdCIgVHlwZU5hbWU9Im9wYzpGbG9hdCIgLz4NCiAgICA8"
"b3BjOkZpZWxkIE5hbWU9IkRvdWJsZSIgVHlwZU5hbWU9Im9wYzpEb3VibGUiIC8+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJTdHJpbmciIFR5cGVOYW1lPSJvcGM6U3RyaW5nIiAvPg0KICAgIDxvcGM6"
"RmllbGQgTmFtZT0iRGF0ZVRpbWUiIFR5cGVOYW1lPSJvcGM6RGF0ZVRpbWUiIC8+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJHdWlkIiBUeXBlTmFtZT0ib3BjOkd1aWQiIC8+DQogICAgPG9wYzpGaWVs"
"ZCBOYW1lPSJCeXRlU3RyaW5nIiBUeXBlTmFtZT0ib3BjOkJ5dGVTdHJpbmciIC8+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJYbWxFbGVtZW50IiBUeXBlTmFtZT0idWE6WG1sRWxlbWVudCIgLz4NCiAg"
"ICA8b3BjOkZpZWxkIE5hbWU9Ik5vZGVJZCIgVHlwZU5hbWU9InVhOk5vZGVJZCIgLz4NCiAgICA8"
"b3BjOkZpZWxkIE5hbWU9IkV4cGFuZGVkTm9kZUlkIiBUeXBlTmFtZT0idWE6RXhwYW5kZWROb2Rl"
"SWQiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTdGF0dXNDb2RlIiBUeXBlTmFtZT0idWE6U3Rh"
"dHVzQ29kZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkRpYWdub3N0aWNJbmZvIiBUeXBlTmFt"
"ZT0idWE6RGlhZ25vc3RpY0luZm8iIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJRdWFsaWZpZWRO"
"YW1lIiBUeXBlTmFtZT0idWE6UXVhbGlmaWVkTmFtZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9"
"IkxvY2FsaXplZFRleHQiIFR5cGVOYW1lPSJ1YTpMb2NhbGl6ZWRUZXh0IiAvPg0KICAgIDxvcGM6"
"RmllbGQgTmFtZT0iRXh0ZW5zaW9uT2JqZWN0IiBUeXBlTmFtZT0idWE6RXh0ZW5zaW9uT2JqZWN0"
"IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRGF0YVZhbHVlIiBUeXBlTmFtZT0idWE6RGF0YVZh"
"bHVlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRW51bWVyYXRlZFZhbHVlIiBUeXBlTmFtZT0i"
"dG5zOkVudW1lcmF0ZWRUZXN0VHlwZSIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAg"
"PG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJBcnJheVRlc3RUeXBlIiBCYXNlVHlwZT0idWE6RXh0"
"ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkRvY3VtZW50YXRpb24+QSBjb21wbGV4IHR5cGUgY29u"
"dGFpbmluZyBhbGwgcG9zc2libGUgYXJyYXkgdHlwZXMgdXNlZCBmb3IgdGVzdGluZy48L29wYzpE"
"b2N1bWVudGF0aW9uPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZkJvb2xlYW5zIiBUeXBlTmFt"
"ZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iQm9vbGVhbnMiIFR5cGVOYW1l"
"PSJvcGM6Qm9vbGVhbiIgTGVuZ3RoRmllbGQ9Ik5vT2ZCb29sZWFucyIgLz4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9Ik5vT2ZTQnl0ZXMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpG"
"aWVsZCBOYW1lPSJTQnl0ZXMiIFR5cGVOYW1lPSJvcGM6U0J5dGUiIExlbmd0aEZpZWxkPSJOb09m"
"U0J5dGVzIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZkludDE2cyIgVHlwZU5hbWU9Im9w"
"YzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkludDE2cyIgVHlwZU5hbWU9Im9wYzpJ"
"bnQxNiIgTGVuZ3RoRmllbGQ9Ik5vT2ZJbnQxNnMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJO"
"b09mVUludDE2cyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9"
"IlVJbnQxNnMiIFR5cGVOYW1lPSJvcGM6VUludDE2IiBMZW5ndGhGaWVsZD0iTm9PZlVJbnQxNnMi"
"IC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mSW50MzJzIiBUeXBlTmFtZT0ib3BjOkludDMy"
"IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iSW50MzJzIiBUeXBlTmFtZT0ib3BjOkludDMyIiBM"
"ZW5ndGhGaWVsZD0iTm9PZkludDMycyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZVSW50"
"MzJzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iVUludDMy"
"cyIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIExlbmd0aEZpZWxkPSJOb09mVUludDMycyIgLz4NCiAg"
"ICA8b3BjOkZpZWxkIE5hbWU9Ik5vT2ZJbnQ2NHMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQog"
"ICAgPG9wYzpGaWVsZCBOYW1lPSJJbnQ2NHMiIFR5cGVOYW1lPSJvcGM6SW50NjQiIExlbmd0aEZp"
"ZWxkPSJOb09mSW50NjRzIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZlVJbnQ2NHMiIFR5"
"cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJVSW50NjRzIiBUeXBl"
"TmFtZT0ib3BjOlVJbnQ2NCIgTGVuZ3RoRmllbGQ9Ik5vT2ZVSW50NjRzIiAvPg0KICAgIDxvcGM6"
"RmllbGQgTmFtZT0iTm9PZkZsb2F0cyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3Bj"
"OkZpZWxkIE5hbWU9IkZsb2F0cyIgVHlwZU5hbWU9Im9wYzpGbG9hdCIgTGVuZ3RoRmllbGQ9Ik5v"
"T2ZGbG9hdHMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mRG91YmxlcyIgVHlwZU5hbWU9"
"Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkRvdWJsZXMiIFR5cGVOYW1lPSJv"
"cGM6RG91YmxlIiBMZW5ndGhGaWVsZD0iTm9PZkRvdWJsZXMiIC8+DQogICAgPG9wYzpGaWVsZCBO"
"YW1lPSJOb09mU3RyaW5ncyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxk"
"IE5hbWU9IlN0cmluZ3MiIFR5cGVOYW1lPSJvcGM6U3RyaW5nIiBMZW5ndGhGaWVsZD0iTm9PZlN0"
"cmluZ3MiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mRGF0ZVRpbWVzIiBUeXBlTmFtZT0i"
"b3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRGF0ZVRpbWVzIiBUeXBlTmFtZT0i"
"b3BjOkRhdGVUaW1lIiBMZW5ndGhGaWVsZD0iTm9PZkRhdGVUaW1lcyIgLz4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9Ik5vT2ZHdWlkcyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9Ikd1aWRzIiBUeXBlTmFtZT0ib3BjOkd1aWQiIExlbmd0aEZpZWxkPSJOb09mR3Vp"
"ZHMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mQnl0ZVN0cmluZ3MiIFR5cGVOYW1lPSJv"
"cGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJCeXRlU3RyaW5ncyIgVHlwZU5hbWU9"
"Im9wYzpCeXRlU3RyaW5nIiBMZW5ndGhGaWVsZD0iTm9PZkJ5dGVTdHJpbmdzIiAvPg0KICAgIDxv"
"cGM6RmllbGQgTmFtZT0iTm9PZlhtbEVsZW1lbnRzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0K"
"ICAgIDxvcGM6RmllbGQgTmFtZT0iWG1sRWxlbWVudHMiIFR5cGVOYW1lPSJ1YTpYbWxFbGVtZW50"
"IiBMZW5ndGhGaWVsZD0iTm9PZlhtbEVsZW1lbnRzIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0i"
"Tm9PZk5vZGVJZHMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1l"
"PSJOb2RlSWRzIiBUeXBlTmFtZT0idWE6Tm9kZUlkIiBMZW5ndGhGaWVsZD0iTm9PZk5vZGVJZHMi"
"IC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mRXhwYW5kZWROb2RlSWRzIiBUeXBlTmFtZT0i"
"b3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRXhwYW5kZWROb2RlSWRzIiBUeXBl"
"TmFtZT0idWE6RXhwYW5kZWROb2RlSWQiIExlbmd0aEZpZWxkPSJOb09mRXhwYW5kZWROb2RlSWRz"
"IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZlN0YXR1c0NvZGVzIiBUeXBlTmFtZT0ib3Bj"
"OkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iU3RhdHVzQ29kZXMiIFR5cGVOYW1lPSJ1"
"YTpTdGF0dXNDb2RlIiBMZW5ndGhGaWVsZD0iTm9PZlN0YXR1c0NvZGVzIiAvPg0KICAgIDxvcGM6"
"RmllbGQgTmFtZT0iTm9PZkRpYWdub3N0aWNJbmZvcyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4N"
"CiAgICA8b3BjOkZpZWxkIE5hbWU9IkRpYWdub3N0aWNJbmZvcyIgVHlwZU5hbWU9InVhOkRpYWdu"
"b3N0aWNJbmZvIiBMZW5ndGhGaWVsZD0iTm9PZkRpYWdub3N0aWNJbmZvcyIgLz4NCiAgICA8b3Bj"
"OkZpZWxkIE5hbWU9Ik5vT2ZRdWFsaWZpZWROYW1lcyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4N"
"CiAgICA8b3BjOkZpZWxkIE5hbWU9IlF1YWxpZmllZE5hbWVzIiBUeXBlTmFtZT0idWE6UXVhbGlm"
"aWVkTmFtZSIgTGVuZ3RoRmllbGQ9Ik5vT2ZRdWFsaWZpZWROYW1lcyIgLz4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9Ik5vT2ZMb2NhbGl6ZWRUZXh0cyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAg"
"ICA8b3BjOkZpZWxkIE5hbWU9IkxvY2FsaXplZFRleHRzIiBUeXBlTmFtZT0idWE6TG9jYWxpemVk"
"VGV4dCIgTGVuZ3RoRmllbGQ9Ik5vT2ZMb2NhbGl6ZWRUZXh0cyIgLz4NCiAgICA8b3BjOkZpZWxk"
"IE5hbWU9Ik5vT2ZFeHRlbnNpb25PYmplY3RzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAg"
"IDxvcGM6RmllbGQgTmFtZT0iRXh0ZW5zaW9uT2JqZWN0cyIgVHlwZU5hbWU9InVhOkV4dGVuc2lv"
"bk9iamVjdCIgTGVuZ3RoRmllbGQ9Ik5vT2ZFeHRlbnNpb25PYmplY3RzIiAvPg0KICAgIDxvcGM6"
"RmllbGQgTmFtZT0iTm9PZkRhdGFWYWx1ZXMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAg"
"PG9wYzpGaWVsZCBOYW1lPSJEYXRhVmFsdWVzIiBUeXBlTmFtZT0idWE6RGF0YVZhbHVlIiBMZW5n"
"dGhGaWVsZD0iTm9PZkRhdGFWYWx1ZXMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mVmFy"
"aWFudHMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJWYXJp"
"YW50cyIgVHlwZU5hbWU9InVhOlZhcmlhbnQiIExlbmd0aEZpZWxkPSJOb09mVmFyaWFudHMiIC8+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mRW51bWVyYXRlZFZhbHVlcyIgVHlwZU5hbWU9Im9w"
"YzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkVudW1lcmF0ZWRWYWx1ZXMiIFR5cGVO"
"YW1lPSJ0bnM6RW51bWVyYXRlZFRlc3RUeXBlIiBMZW5ndGhGaWVsZD0iTm9PZkVudW1lcmF0ZWRW"
"YWx1ZXMiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5"
"cGUgTmFtZT0iQ29tcG9zaXRlVGVzdFR5cGUiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3Qi"
"Pg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRmllbGQxIiBUeXBlTmFtZT0idG5zOlNjYWxhclRlc3RU"
"eXBlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRmllbGQyIiBUeXBlTmFtZT0idG5zOkFycmF5"
"VGVzdFR5cGUiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJl"
"ZFR5cGUgTmFtZT0iVGVzdFN0YWNrUmVxdWVzdCIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVj"
"dCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZXF1ZXN0SGVhZGVyIiBUeXBlTmFtZT0idG5zOlJl"
"cXVlc3RIZWFkZXIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJUZXN0SWQiIFR5cGVOYW1lPSJv"
"cGM6VUludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iSXRlcmF0aW9uIiBUeXBlTmFtZT0i"
"b3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iSW5wdXQiIFR5cGVOYW1lPSJ1YTpW"
"YXJpYW50IiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRU"
"eXBlIE5hbWU9IlRlc3RTdGFja1Jlc3BvbnNlIiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0"
"Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlc3BvbnNlSGVhZGVyIiBUeXBlTmFtZT0idG5zOlJl"
"c3BvbnNlSGVhZGVyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iT3V0cHV0IiBUeXBlTmFtZT0i"
"dWE6VmFyaWFudCIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1"
"cmVkVHlwZSBOYW1lPSJUZXN0U3RhY2tFeFJlcXVlc3QiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25P"
"YmplY3QiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVxdWVzdEhlYWRlciIgVHlwZU5hbWU9InRu"
"czpSZXF1ZXN0SGVhZGVyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iVGVzdElkIiBUeXBlTmFt"
"ZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ikl0ZXJhdGlvbiIgVHlwZU5h"
"bWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IklucHV0IiBUeXBlTmFtZT0i"
"dG5zOkNvbXBvc2l0ZVRlc3RUeXBlIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8"
"b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IlRlc3RTdGFja0V4UmVzcG9uc2UiIEJhc2VUeXBlPSJ1"
"YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVzcG9uc2VIZWFkZXIi"
"IFR5cGVOYW1lPSJ0bnM6UmVzcG9uc2VIZWFkZXIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJP"
"dXRwdXQiIFR5cGVOYW1lPSJ0bnM6Q29tcG9zaXRlVGVzdFR5cGUiIC8+DQogIDwvb3BjOlN0cnVj"
"dHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iQnVpbGRJbmZvIiBCYXNl"
"VHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlByb2R1Y3RV"
"cmkiIFR5cGVOYW1lPSJvcGM6U3RyaW5nIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTWFudWZh"
"Y3R1cmVyTmFtZSIgVHlwZU5hbWU9Im9wYzpTdHJpbmciIC8+DQogICAgPG9wYzpGaWVsZCBOYW1l"
"PSJQcm9kdWN0TmFtZSIgVHlwZU5hbWU9Im9wYzpTdHJpbmciIC8+DQogICAgPG9wYzpGaWVsZCBO"
"YW1lPSJTb2Z0d2FyZVZlcnNpb24iIFR5cGVOYW1lPSJvcGM6U3RyaW5nIiAvPg0KICAgIDxvcGM6"
"RmllbGQgTmFtZT0iQnVpbGROdW1iZXIiIFR5cGVOYW1lPSJvcGM6U3RyaW5nIiAvPg0KICAgIDxv"
"cGM6RmllbGQgTmFtZT0iQnVpbGREYXRlIiBUeXBlTmFtZT0ib3BjOkRhdGVUaW1lIiAvPg0KICA8"
"L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOkVudW1lcmF0ZWRUeXBlIE5hbWU9IlJlZHVu"
"ZGFuY3lTdXBwb3J0IiBMZW5ndGhJbkJpdHM9IjMyIj4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1"
"ZSBOYW1lPSJOb25lIiBWYWx1ZT0iMCIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1l"
"PSJDb2xkIiBWYWx1ZT0iMSIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJXYXJt"
"IiBWYWx1ZT0iMiIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJIb3QiIFZhbHVl"
"PSIzIiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IlRyYW5zcGFyZW50IiBWYWx1"
"ZT0iNCIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJIb3RBbmRNaXJyb3JlZCIg"
"VmFsdWU9IjUiIC8+DQogIDwvb3BjOkVudW1lcmF0ZWRUeXBlPg0KDQogIDxvcGM6RW51bWVyYXRl"
"ZFR5cGUgTmFtZT0iU2VydmVyU3RhdGUiIExlbmd0aEluQml0cz0iMzIiPg0KICAgIDxvcGM6RW51"
"bWVyYXRlZFZhbHVlIE5hbWU9IlJ1bm5pbmciIFZhbHVlPSIwIiAvPg0KICAgIDxvcGM6RW51bWVy"
"YXRlZFZhbHVlIE5hbWU9IkZhaWxlZCIgVmFsdWU9IjEiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVk"
"VmFsdWUgTmFtZT0iTm9Db25maWd1cmF0aW9uIiBWYWx1ZT0iMiIgLz4NCiAgICA8b3BjOkVudW1l"
"cmF0ZWRWYWx1ZSBOYW1lPSJTdXNwZW5kZWQiIFZhbHVlPSIzIiAvPg0KICAgIDxvcGM6RW51bWVy"
"YXRlZFZhbHVlIE5hbWU9IlNodXRkb3duIiBWYWx1ZT0iNCIgLz4NCiAgICA8b3BjOkVudW1lcmF0"
"ZWRWYWx1ZSBOYW1lPSJUZXN0IiBWYWx1ZT0iNSIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1"
"ZSBOYW1lPSJDb21tdW5pY2F0aW9uRmF1bHQiIFZhbHVlPSI2IiAvPg0KICAgIDxvcGM6RW51bWVy"
"YXRlZFZhbHVlIE5hbWU9IlVua25vd24iIFZhbHVlPSI3IiAvPg0KICA8L29wYzpFbnVtZXJhdGVk"
"VHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IlJlZHVuZGFudFNlcnZlckRhdGFU"
"eXBlIiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9"
"IlNlcnZlcklkIiBUeXBlTmFtZT0ib3BjOlN0cmluZyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9"
"IlNlcnZpY2VMZXZlbCIgVHlwZU5hbWU9Im9wYzpCeXRlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFt"
"ZT0iU2VydmVyU3RhdGUiIFR5cGVOYW1lPSJ0bnM6U2VydmVyU3RhdGUiIC8+DQogIDwvb3BjOlN0"
"cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iRW5kcG9pbnRVcmxM"
"aXN0RGF0YVR5cGUiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iTm9PZkVuZHBvaW50VXJsTGlzdCIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAg"
"ICA8b3BjOkZpZWxkIE5hbWU9IkVuZHBvaW50VXJsTGlzdCIgVHlwZU5hbWU9Im9wYzpTdHJpbmci"
"IExlbmd0aEZpZWxkPSJOb09mRW5kcG9pbnRVcmxMaXN0IiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVk"
"VHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9Ik5ldHdvcmtHcm91cERhdGFUeXBl"
"IiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlNl"
"cnZlclVyaSIgVHlwZU5hbWU9Im9wYzpTdHJpbmciIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJO"
"b09mTmV0d29ya1BhdGhzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQg"
"TmFtZT0iTmV0d29ya1BhdGhzIiBUeXBlTmFtZT0idG5zOkVuZHBvaW50VXJsTGlzdERhdGFUeXBl"
"IiBMZW5ndGhGaWVsZD0iTm9PZk5ldHdvcmtQYXRocyIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5"
"cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJTYW1wbGluZ0ludGVydmFsRGlhZ25v"
"c3RpY3NEYXRhVHlwZSIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpG"
"aWVsZCBOYW1lPSJTYW1wbGluZ0ludGVydmFsIiBUeXBlTmFtZT0ib3BjOkRvdWJsZSIgLz4NCiAg"
"ICA8b3BjOkZpZWxkIE5hbWU9Ik1vbml0b3JlZEl0ZW1Db3VudCIgVHlwZU5hbWU9Im9wYzpVSW50"
"MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJNYXhNb25pdG9yZWRJdGVtQ291bnQiIFR5cGVO"
"YW1lPSJvcGM6VUludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRGlzYWJsZWRNb25pdG9y"
"ZWRJdGVtQ291bnQiIFR5cGVOYW1lPSJvcGM6VUludDMyIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVk"
"VHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IlNlcnZlckRpYWdub3N0aWNzU3Vt"
"bWFyeURhdGFUeXBlIiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9IlNlcnZlclZpZXdDb3VudCIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIC8+DQogICAg"
"PG9wYzpGaWVsZCBOYW1lPSJDdXJyZW50U2Vzc2lvbkNvdW50IiBUeXBlTmFtZT0ib3BjOlVJbnQz"
"MiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkN1bXVsYXRlZFNlc3Npb25Db3VudCIgVHlwZU5h"
"bWU9Im9wYzpVSW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTZWN1cml0eVJlamVjdGVk"
"U2Vzc2lvbkNvdW50IiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5h"
"bWU9IlJlamVjdGVkU2Vzc2lvbkNvdW50IiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8"
"b3BjOkZpZWxkIE5hbWU9IlNlc3Npb25UaW1lb3V0Q291bnQiIFR5cGVOYW1lPSJvcGM6VUludDMy"
"IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iU2Vzc2lvbkFib3J0Q291bnQiIFR5cGVOYW1lPSJv"
"cGM6VUludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iQ3VycmVudFN1YnNjcmlwdGlvbkNv"
"dW50IiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkN1bXVs"
"YXRlZFN1YnNjcmlwdGlvbkNvdW50IiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8b3Bj"
"OkZpZWxkIE5hbWU9IlB1Ymxpc2hpbmdJbnRlcnZhbENvdW50IiBUeXBlTmFtZT0ib3BjOlVJbnQz"
"MiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlNlY3VyaXR5UmVqZWN0ZWRSZXF1ZXN0c0NvdW50"
"IiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlamVjdGVk"
"UmVxdWVzdHNDb3VudCIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIC8+DQogIDwvb3BjOlN0cnVjdHVy"
"ZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iU2VydmVyU3RhdHVzRGF0YVR5"
"cGUiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0i"
"U3RhcnRUaW1lIiBUeXBlTmFtZT0ib3BjOkRhdGVUaW1lIiAvPg0KICAgIDxvcGM6RmllbGQgTmFt"
"ZT0iQ3VycmVudFRpbWUiIFR5cGVOYW1lPSJvcGM6RGF0ZVRpbWUiIC8+DQogICAgPG9wYzpGaWVs"
"ZCBOYW1lPSJTdGF0ZSIgVHlwZU5hbWU9InRuczpTZXJ2ZXJTdGF0ZSIgLz4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9IkJ1aWxkSW5mbyIgVHlwZU5hbWU9InRuczpCdWlsZEluZm8iIC8+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJTZWNvbmRzVGlsbFNodXRkb3duIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIg"
"Lz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlNodXRkb3duUmVhc29uIiBUeXBlTmFtZT0idWE6TG9j"
"YWxpemVkVGV4dCIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1"
"cmVkVHlwZSBOYW1lPSJTZXNzaW9uRGlhZ25vc3RpY3NEYXRhVHlwZSIgQmFzZVR5cGU9InVhOkV4"
"dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTZXNzaW9uSWQiIFR5cGVOYW1l"
"PSJ1YTpOb2RlSWQiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTZXNzaW9uTmFtZSIgVHlwZU5h"
"bWU9Im9wYzpTdHJpbmciIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJDbGllbnREZXNjcmlwdGlv"
"biIgVHlwZU5hbWU9InRuczpBcHBsaWNhdGlvbkRlc2NyaXB0aW9uIiAvPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iU2VydmVyVXJpIiBUeXBlTmFtZT0ib3BjOlN0cmluZyIgLz4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9IkVuZHBvaW50VXJsIiBUeXBlTmFtZT0ib3BjOlN0cmluZyIgLz4NCiAgICA8b3Bj"
"OkZpZWxkIE5hbWU9Ik5vT2ZMb2NhbGVJZHMiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAg"
"PG9wYzpGaWVsZCBOYW1lPSJMb2NhbGVJZHMiIFR5cGVOYW1lPSJvcGM6U3RyaW5nIiBMZW5ndGhG"
"aWVsZD0iTm9PZkxvY2FsZUlkcyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkFjdHVhbFNlc3Np"
"b25UaW1lb3V0IiBUeXBlTmFtZT0ib3BjOkRvdWJsZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9"
"Ik1heFJlc3BvbnNlTWVzc2FnZVNpemUiIFR5cGVOYW1lPSJvcGM6VUludDMyIiAvPg0KICAgIDxv"
"cGM6RmllbGQgTmFtZT0iQ2xpZW50Q29ubmVjdGlvblRpbWUiIFR5cGVOYW1lPSJvcGM6RGF0ZVRp"
"bWUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJDbGllbnRMYXN0Q29udGFjdFRpbWUiIFR5cGVO"
"YW1lPSJvcGM6RGF0ZVRpbWUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJDdXJyZW50U3Vic2Ny"
"aXB0aW9uc0NvdW50IiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5h"
"bWU9IkN1cnJlbnRNb25pdG9yZWRJdGVtc0NvdW50IiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4N"
"CiAgICA8b3BjOkZpZWxkIE5hbWU9IkN1cnJlbnRQdWJsaXNoUmVxdWVzdHNJblF1ZXVlIiBUeXBl"
"TmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlRvdGFsUmVxdWVzdENv"
"dW50IiBUeXBlTmFtZT0idG5zOlNlcnZpY2VDb3VudGVyRGF0YVR5cGUiIC8+DQogICAgPG9wYzpG"
"aWVsZCBOYW1lPSJVbmF1dGhvcml6ZWRSZXF1ZXN0Q291bnQiIFR5cGVOYW1lPSJvcGM6VUludDMy"
"IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVhZENvdW50IiBUeXBlTmFtZT0idG5zOlNlcnZp"
"Y2VDb3VudGVyRGF0YVR5cGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJIaXN0b3J5UmVhZENv"
"dW50IiBUeXBlTmFtZT0idG5zOlNlcnZpY2VDb3VudGVyRGF0YVR5cGUiIC8+DQogICAgPG9wYzpG"
"aWVsZCBOYW1lPSJXcml0ZUNvdW50IiBUeXBlTmFtZT0idG5zOlNlcnZpY2VDb3VudGVyRGF0YVR5"
"cGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJIaXN0b3J5VXBkYXRlQ291bnQiIFR5cGVOYW1l"
"PSJ0bnM6U2VydmljZUNvdW50ZXJEYXRhVHlwZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkNh"
"bGxDb3VudCIgVHlwZU5hbWU9InRuczpTZXJ2aWNlQ291bnRlckRhdGFUeXBlIiAvPg0KICAgIDxv"
"cGM6RmllbGQgTmFtZT0iQ3JlYXRlTW9uaXRvcmVkSXRlbXNDb3VudCIgVHlwZU5hbWU9InRuczpT"
"ZXJ2aWNlQ291bnRlckRhdGFUeXBlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTW9kaWZ5TW9u"
"aXRvcmVkSXRlbXNDb3VudCIgVHlwZU5hbWU9InRuczpTZXJ2aWNlQ291bnRlckRhdGFUeXBlIiAv"
"Pg0KICAgIDxvcGM6RmllbGQgTmFtZT0iU2V0TW9uaXRvcmluZ01vZGVDb3VudCIgVHlwZU5hbWU9"
"InRuczpTZXJ2aWNlQ291bnRlckRhdGFUeXBlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iU2V0"
"VHJpZ2dlcmluZ0NvdW50IiBUeXBlTmFtZT0idG5zOlNlcnZpY2VDb3VudGVyRGF0YVR5cGUiIC8+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJEZWxldGVNb25pdG9yZWRJdGVtc0NvdW50IiBUeXBlTmFt"
"ZT0idG5zOlNlcnZpY2VDb3VudGVyRGF0YVR5cGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJD"
"cmVhdGVTdWJzY3JpcHRpb25Db3VudCIgVHlwZU5hbWU9InRuczpTZXJ2aWNlQ291bnRlckRhdGFU"
"eXBlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTW9kaWZ5U3Vic2NyaXB0aW9uQ291bnQiIFR5"
"cGVOYW1lPSJ0bnM6U2VydmljZUNvdW50ZXJEYXRhVHlwZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5h"
"bWU9IlNldFB1Ymxpc2hpbmdNb2RlQ291bnQiIFR5cGVOYW1lPSJ0bnM6U2VydmljZUNvdW50ZXJE"
"YXRhVHlwZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlB1Ymxpc2hDb3VudCIgVHlwZU5hbWU9"
"InRuczpTZXJ2aWNlQ291bnRlckRhdGFUeXBlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVw"
"dWJsaXNoQ291bnQiIFR5cGVOYW1lPSJ0bnM6U2VydmljZUNvdW50ZXJEYXRhVHlwZSIgLz4NCiAg"
"ICA8b3BjOkZpZWxkIE5hbWU9IlRyYW5zZmVyU3Vic2NyaXB0aW9uc0NvdW50IiBUeXBlTmFtZT0i"
"dG5zOlNlcnZpY2VDb3VudGVyRGF0YVR5cGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJEZWxl"
"dGVTdWJzY3JpcHRpb25zQ291bnQiIFR5cGVOYW1lPSJ0bnM6U2VydmljZUNvdW50ZXJEYXRhVHlw"
"ZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkFkZE5vZGVzQ291bnQiIFR5cGVOYW1lPSJ0bnM6"
"U2VydmljZUNvdW50ZXJEYXRhVHlwZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkFkZFJlZmVy"
"ZW5jZXNDb3VudCIgVHlwZU5hbWU9InRuczpTZXJ2aWNlQ291bnRlckRhdGFUeXBlIiAvPg0KICAg"
"IDxvcGM6RmllbGQgTmFtZT0iRGVsZXRlTm9kZXNDb3VudCIgVHlwZU5hbWU9InRuczpTZXJ2aWNl"
"Q291bnRlckRhdGFUeXBlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRGVsZXRlUmVmZXJlbmNl"
"c0NvdW50IiBUeXBlTmFtZT0idG5zOlNlcnZpY2VDb3VudGVyRGF0YVR5cGUiIC8+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJCcm93c2VDb3VudCIgVHlwZU5hbWU9InRuczpTZXJ2aWNlQ291bnRlckRh"
"dGFUeXBlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iQnJvd3NlTmV4dENvdW50IiBUeXBlTmFt"
"ZT0idG5zOlNlcnZpY2VDb3VudGVyRGF0YVR5cGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJU"
"cmFuc2xhdGVCcm93c2VQYXRoc1RvTm9kZUlkc0NvdW50IiBUeXBlTmFtZT0idG5zOlNlcnZpY2VD"
"b3VudGVyRGF0YVR5cGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJRdWVyeUZpcnN0Q291bnQi"
"IFR5cGVOYW1lPSJ0bnM6U2VydmljZUNvdW50ZXJEYXRhVHlwZSIgLz4NCiAgICA8b3BjOkZpZWxk"
"IE5hbWU9IlF1ZXJ5TmV4dENvdW50IiBUeXBlTmFtZT0idG5zOlNlcnZpY2VDb3VudGVyRGF0YVR5"
"cGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZWdpc3Rlck5vZGVzQ291bnQiIFR5cGVOYW1l"
"PSJ0bnM6U2VydmljZUNvdW50ZXJEYXRhVHlwZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlVu"
"cmVnaXN0ZXJOb2Rlc0NvdW50IiBUeXBlTmFtZT0idG5zOlNlcnZpY2VDb3VudGVyRGF0YVR5cGUi"
"IC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFt"
"ZT0iU2Vzc2lvblNlY3VyaXR5RGlhZ25vc3RpY3NEYXRhVHlwZSIgQmFzZVR5cGU9InVhOkV4dGVu"
"c2lvbk9iamVjdCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTZXNzaW9uSWQiIFR5cGVOYW1lPSJ1"
"YTpOb2RlSWQiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJDbGllbnRVc2VySWRPZlNlc3Npb24i"
"IFR5cGVOYW1lPSJvcGM6U3RyaW5nIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTm9PZkNsaWVu"
"dFVzZXJJZEhpc3RvcnkiIFR5cGVOYW1lPSJvcGM6SW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBO"
"YW1lPSJDbGllbnRVc2VySWRIaXN0b3J5IiBUeXBlTmFtZT0ib3BjOlN0cmluZyIgTGVuZ3RoRmll"
"bGQ9Ik5vT2ZDbGllbnRVc2VySWRIaXN0b3J5IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iQXV0"
"aGVudGljYXRpb25NZWNoYW5pc20iIFR5cGVOYW1lPSJvcGM6U3RyaW5nIiAvPg0KICAgIDxvcGM6"
"RmllbGQgTmFtZT0iRW5jb2RpbmciIFR5cGVOYW1lPSJvcGM6U3RyaW5nIiAvPg0KICAgIDxvcGM6"
"RmllbGQgTmFtZT0iVHJhbnNwb3J0UHJvdG9jb2wiIFR5cGVOYW1lPSJvcGM6U3RyaW5nIiAvPg0K"
"ICAgIDxvcGM6RmllbGQgTmFtZT0iU2VjdXJpdHlNb2RlIiBUeXBlTmFtZT0idG5zOk1lc3NhZ2VT"
"ZWN1cml0eU1vZGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJTZWN1cml0eVBvbGljeVVyaSIg"
"VHlwZU5hbWU9Im9wYzpTdHJpbmciIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJDbGllbnRDZXJ0"
"aWZpY2F0ZSIgVHlwZU5hbWU9Im9wYzpCeXRlU3RyaW5nIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVk"
"VHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IlNlcnZpY2VDb3VudGVyRGF0YVR5"
"cGUiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0i"
"VG90YWxDb3VudCIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1l"
"PSJFcnJvckNvdW50IiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgPC9vcGM6U3RydWN0dXJl"
"ZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJTdGF0dXNSZXN1bHQiIEJhc2VU"
"eXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iU3RhdHVzQ29k"
"ZSIgVHlwZU5hbWU9InVhOlN0YXR1c0NvZGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJEaWFn"
"bm9zdGljSW5mbyIgVHlwZU5hbWU9InVhOkRpYWdub3N0aWNJbmZvIiAvPg0KICA8L29wYzpTdHJ1"
"Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9IlN1YnNjcmlwdGlvbkRp"
"YWdub3N0aWNzRGF0YVR5cGUiIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxv"
"cGM6RmllbGQgTmFtZT0iU2Vzc2lvbklkIiBUeXBlTmFtZT0idWE6Tm9kZUlkIiAvPg0KICAgIDxv"
"cGM6RmllbGQgTmFtZT0iU3Vic2NyaXB0aW9uSWQiIFR5cGVOYW1lPSJvcGM6VUludDMyIiAvPg0K"
"ICAgIDxvcGM6RmllbGQgTmFtZT0iUHJpb3JpdHkiIFR5cGVOYW1lPSJvcGM6Qnl0ZSIgLz4NCiAg"
"ICA8b3BjOkZpZWxkIE5hbWU9IlB1Ymxpc2hpbmdJbnRlcnZhbCIgVHlwZU5hbWU9Im9wYzpEb3Vi"
"bGUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJNYXhLZWVwQWxpdmVDb3VudCIgVHlwZU5hbWU9"
"Im9wYzpVSW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJNYXhMaWZldGltZUNvdW50IiBU"
"eXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ik1heE5vdGlmaWNh"
"dGlvbnNQZXJQdWJsaXNoIiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxk"
"IE5hbWU9IlB1Ymxpc2hpbmdFbmFibGVkIiBUeXBlTmFtZT0ib3BjOkJvb2xlYW4iIC8+DQogICAg"
"PG9wYzpGaWVsZCBOYW1lPSJNb2RpZnlDb3VudCIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIC8+DQog"
"ICAgPG9wYzpGaWVsZCBOYW1lPSJFbmFibGVDb3VudCIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIC8+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJEaXNhYmxlQ291bnQiIFR5cGVOYW1lPSJvcGM6VUludDMy"
"IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iUmVwdWJsaXNoUmVxdWVzdENvdW50IiBUeXBlTmFt"
"ZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlcHVibGlzaE1lc3NhZ2VS"
"ZXF1ZXN0Q291bnQiIFR5cGVOYW1lPSJvcGM6VUludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFt"
"ZT0iUmVwdWJsaXNoTWVzc2FnZUNvdW50IiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8"
"b3BjOkZpZWxkIE5hbWU9IlRyYW5zZmVyUmVxdWVzdENvdW50IiBUeXBlTmFtZT0ib3BjOlVJbnQz"
"MiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlRyYW5zZmVycmVkVG9BbHRDbGllbnRDb3VudCIg"
"VHlwZU5hbWU9Im9wYzpVSW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJUcmFuc2ZlcnJl"
"ZFRvU2FtZUNsaWVudENvdW50IiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9IlB1Ymxpc2hSZXF1ZXN0Q291bnQiIFR5cGVOYW1lPSJvcGM6VUludDMyIiAvPg0K"
"ICAgIDxvcGM6RmllbGQgTmFtZT0iRGF0YUNoYW5nZU5vdGlmaWNhdGlvbnNDb3VudCIgVHlwZU5h"
"bWU9Im9wYzpVSW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJFdmVudE5vdGlmaWNhdGlv"
"bnNDb3VudCIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJO"
"b3RpZmljYXRpb25zQ291bnQiIFR5cGVOYW1lPSJvcGM6VUludDMyIiAvPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iTGF0ZVB1Ymxpc2hSZXF1ZXN0Q291bnQiIFR5cGVOYW1lPSJvcGM6VUludDMyIiAv"
"Pg0KICAgIDxvcGM6RmllbGQgTmFtZT0iQ3VycmVudEtlZXBBbGl2ZUNvdW50IiBUeXBlTmFtZT0i"
"b3BjOlVJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkN1cnJlbnRMaWZldGltZUNvdW50"
"IiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlVuYWNrbm93"
"bGVkZ2VkTWVzc2FnZUNvdW50IiBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgLz4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9IkRpc2NhcmRlZE1lc3NhZ2VDb3VudCIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIC8+"
"DQogICAgPG9wYzpGaWVsZCBOYW1lPSJNb25pdG9yZWRJdGVtQ291bnQiIFR5cGVOYW1lPSJvcGM6"
"VUludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRGlzYWJsZWRNb25pdG9yZWRJdGVtQ291"
"bnQiIFR5cGVOYW1lPSJvcGM6VUludDMyIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTW9uaXRv"
"cmluZ1F1ZXVlT3ZlcmZsb3dDb3VudCIgVHlwZU5hbWU9Im9wYzpVSW50MzIiIC8+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJOZXh0U2VxdWVuY2VOdW1iZXIiIFR5cGVOYW1lPSJvcGM6VUludDMyIiAv"
"Pg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRXZlbnRRdWV1ZU92ZXJGbG93Q291bnQiIFR5cGVOYW1l"
"PSJvcGM6VUludDMyIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOkVudW1l"
"cmF0ZWRUeXBlIE5hbWU9Ik1vZGVsQ2hhbmdlU3RydWN0dXJlVmVyYk1hc2siIExlbmd0aEluQml0"
"cz0iMzIiPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9Ik5vZGVBZGRlZCIgVmFsdWU9"
"IjEiIC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iTm9kZURlbGV0ZWQiIFZhbHVl"
"PSIyIiAvPg0KICAgIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IlJlZmVyZW5jZUFkZGVkIiBW"
"YWx1ZT0iNCIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJSZWZlcmVuY2VEZWxl"
"dGVkIiBWYWx1ZT0iOCIgLz4NCiAgICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJEYXRhVHlw"
"ZUNoYW5nZWQiIFZhbHVlPSIxNiIgLz4NCiAgPC9vcGM6RW51bWVyYXRlZFR5cGU+DQoNCiAgPG9w"
"YzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJNb2RlbENoYW5nZVN0cnVjdHVyZURhdGFUeXBlIiBCYXNl"
"VHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkFmZmVjdGVk"
"IiBUeXBlTmFtZT0idWE6Tm9kZUlkIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iQWZmZWN0ZWRU"
"eXBlIiBUeXBlTmFtZT0idWE6Tm9kZUlkIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iVmVyYiIg"
"VHlwZU5hbWU9Im9wYzpCeXRlIiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3Bj"
"OlN0cnVjdHVyZWRUeXBlIE5hbWU9IlNlbWFudGljQ2hhbmdlU3RydWN0dXJlRGF0YVR5cGUiIEJh"
"c2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iQWZmZWN0"
"ZWQiIFR5cGVOYW1lPSJ1YTpOb2RlSWQiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJBZmZlY3Rl"
"ZFR5cGUiIFR5cGVOYW1lPSJ1YTpOb2RlSWQiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0K"
"DQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iUmFuZ2UiIEJhc2VUeXBlPSJ1YTpFeHRlbnNp"
"b25PYmplY3QiPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iTG93IiBUeXBlTmFtZT0ib3BjOkRvdWJs"
"ZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkhpZ2giIFR5cGVOYW1lPSJvcGM6RG91YmxlIiAv"
"Pg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBlIE5hbWU9"
"IkVVSW5mb3JtYXRpb24iIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxvcGM6"
"RmllbGQgTmFtZT0iTmFtZXNwYWNlVXJpIiBUeXBlTmFtZT0ib3BjOlN0cmluZyIgLz4NCiAgICA8"
"b3BjOkZpZWxkIE5hbWU9IlVuaXRJZCIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3Bj"
"OkZpZWxkIE5hbWU9IkRpc3BsYXlOYW1lIiBUeXBlTmFtZT0idWE6TG9jYWxpemVkVGV4dCIgLz4N"
"CiAgICA8b3BjOkZpZWxkIE5hbWU9IkRlc2NyaXB0aW9uIiBUeXBlTmFtZT0idWE6TG9jYWxpemVk"
"VGV4dCIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpFbnVtZXJhdGVkVHlw"
"ZSBOYW1lPSJBeGlzU2NhbGVFbnVtZXJhdGlvbiIgTGVuZ3RoSW5CaXRzPSIzMiI+DQogICAgPG9w"
"YzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iTGluZWFyIiBWYWx1ZT0iMCIgLz4NCiAgICA8b3BjOkVu"
"dW1lcmF0ZWRWYWx1ZSBOYW1lPSJMb2ciIFZhbHVlPSIxIiAvPg0KICAgIDxvcGM6RW51bWVyYXRl"
"ZFZhbHVlIE5hbWU9IkxuIiBWYWx1ZT0iMiIgLz4NCiAgPC9vcGM6RW51bWVyYXRlZFR5cGU+DQoN"
"CiAgPG9wYzpTdHJ1Y3R1cmVkVHlwZSBOYW1lPSJDb21wbGV4TnVtYmVyVHlwZSIgQmFzZVR5cGU9"
"InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJSZWFsIiBUeXBlTmFt"
"ZT0ib3BjOkZsb2F0IiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iSW1hZ2luYXJ5IiBUeXBlTmFt"
"ZT0ib3BjOkZsb2F0IiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVj"
"dHVyZWRUeXBlIE5hbWU9IkRvdWJsZUNvbXBsZXhOdW1iZXJUeXBlIiBCYXNlVHlwZT0idWE6RXh0"
"ZW5zaW9uT2JqZWN0Ij4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlJlYWwiIFR5cGVOYW1lPSJvcGM6"
"RG91YmxlIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iSW1hZ2luYXJ5IiBUeXBlTmFtZT0ib3Bj"
"OkRvdWJsZSIgLz4NCiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpTdHJ1Y3R1cmVk"
"VHlwZSBOYW1lPSJBeGlzSW5mb3JtYXRpb24iIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3Qi"
"Pg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRW5naW5lZXJpbmdVbml0cyIgVHlwZU5hbWU9InRuczpF"
"VUluZm9ybWF0aW9uIiAvPg0KICAgIDxvcGM6RmllbGQgTmFtZT0iRVVSYW5nZSIgVHlwZU5hbWU9"
"InRuczpSYW5nZSIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IlRpdGxlIiBUeXBlTmFtZT0idWE6"
"TG9jYWxpemVkVGV4dCIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9IkF4aXNTY2FsZVR5cGUiIFR5"
"cGVOYW1lPSJ0bnM6QXhpc1NjYWxlRW51bWVyYXRpb24iIC8+DQogICAgPG9wYzpGaWVsZCBOYW1l"
"PSJOb09mQXhpc1N0ZXBzIiBUeXBlTmFtZT0ib3BjOkludDMyIiAvPg0KICAgIDxvcGM6RmllbGQg"
"TmFtZT0iQXhpc1N0ZXBzIiBUeXBlTmFtZT0ib3BjOkRvdWJsZSIgTGVuZ3RoRmllbGQ9Ik5vT2ZB"
"eGlzU3RlcHMiIC8+DQogIDwvb3BjOlN0cnVjdHVyZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJl"
"ZFR5cGUgTmFtZT0iWFZUeXBlIiBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0Ij4NCiAgICA8"
"b3BjOkZpZWxkIE5hbWU9IlgiIFR5cGVOYW1lPSJvcGM6RG91YmxlIiAvPg0KICAgIDxvcGM6Rmll"
"bGQgTmFtZT0iVmFsdWUiIFR5cGVOYW1lPSJvcGM6RmxvYXQiIC8+DQogIDwvb3BjOlN0cnVjdHVy"
"ZWRUeXBlPg0KDQogIDxvcGM6U3RydWN0dXJlZFR5cGUgTmFtZT0iUHJvZ3JhbURpYWdub3N0aWNE"
"YXRhVHlwZSIgQmFzZVR5cGU9InVhOkV4dGVuc2lvbk9iamVjdCI+DQogICAgPG9wYzpGaWVsZCBO"
"YW1lPSJDcmVhdGVTZXNzaW9uSWQiIFR5cGVOYW1lPSJ1YTpOb2RlSWQiIC8+DQogICAgPG9wYzpG"
"aWVsZCBOYW1lPSJDcmVhdGVDbGllbnROYW1lIiBUeXBlTmFtZT0ib3BjOlN0cmluZyIgLz4NCiAg"
"ICA8b3BjOkZpZWxkIE5hbWU9Ikludm9jYXRpb25DcmVhdGlvblRpbWUiIFR5cGVOYW1lPSJvcGM6"
"RGF0ZVRpbWUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJMYXN0VHJhbnNpdGlvblRpbWUiIFR5"
"cGVOYW1lPSJvcGM6RGF0ZVRpbWUiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJMYXN0TWV0aG9k"
"Q2FsbCIgVHlwZU5hbWU9Im9wYzpTdHJpbmciIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJMYXN0"
"TWV0aG9kU2Vzc2lvbklkIiBUeXBlTmFtZT0idWE6Tm9kZUlkIiAvPg0KICAgIDxvcGM6RmllbGQg"
"TmFtZT0iTm9PZkxhc3RNZXRob2RJbnB1dEFyZ3VtZW50cyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIg"
"Lz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ikxhc3RNZXRob2RJbnB1dEFyZ3VtZW50cyIgVHlwZU5h"
"bWU9InRuczpBcmd1bWVudCIgTGVuZ3RoRmllbGQ9Ik5vT2ZMYXN0TWV0aG9kSW5wdXRBcmd1bWVu"
"dHMiIC8+DQogICAgPG9wYzpGaWVsZCBOYW1lPSJOb09mTGFzdE1ldGhvZE91dHB1dEFyZ3VtZW50"
"cyIgVHlwZU5hbWU9Im9wYzpJbnQzMiIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ikxhc3RNZXRo"
"b2RPdXRwdXRBcmd1bWVudHMiIFR5cGVOYW1lPSJ0bnM6QXJndW1lbnQiIExlbmd0aEZpZWxkPSJO"
"b09mTGFzdE1ldGhvZE91dHB1dEFyZ3VtZW50cyIgLz4NCiAgICA8b3BjOkZpZWxkIE5hbWU9Ikxh"
"c3RNZXRob2RDYWxsVGltZSIgVHlwZU5hbWU9Im9wYzpEYXRlVGltZSIgLz4NCiAgICA8b3BjOkZp"
"ZWxkIE5hbWU9Ikxhc3RNZXRob2RSZXR1cm5TdGF0dXMiIFR5cGVOYW1lPSJ0bnM6U3RhdHVzUmVz"
"dWx0IiAvPg0KICA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4NCg0KICA8b3BjOlN0cnVjdHVyZWRUeXBl"
"IE5hbWU9IkFubm90YXRpb24iIEJhc2VUeXBlPSJ1YTpFeHRlbnNpb25PYmplY3QiPg0KICAgIDxv"
"cGM6RmllbGQgTmFtZT0iTWVzc2FnZSIgVHlwZU5hbWU9Im9wYzpTdHJpbmciIC8+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJVc2VyTmFtZSIgVHlwZU5hbWU9Im9wYzpTdHJpbmciIC8+DQogICAgPG9w"
"YzpGaWVsZCBOYW1lPSJBbm5vdGF0aW9uVGltZSIgVHlwZU5hbWU9Im9wYzpEYXRlVGltZSIgLz4N"
"CiAgPC9vcGM6U3RydWN0dXJlZFR5cGU+DQoNCiAgPG9wYzpFbnVtZXJhdGVkVHlwZSBOYW1lPSJF"
"eGNlcHRpb25EZXZpYXRpb25Gb3JtYXQiIExlbmd0aEluQml0cz0iMzIiPg0KICAgIDxvcGM6RW51"
"bWVyYXRlZFZhbHVlIE5hbWU9IkFic29sdXRlVmFsdWUiIFZhbHVlPSIwIiAvPg0KICAgIDxvcGM6"
"RW51bWVyYXRlZFZhbHVlIE5hbWU9IlBlcmNlbnRPZlJhbmdlIiBWYWx1ZT0iMSIgLz4NCiAgICA8"
"b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJQZXJjZW50T2ZWYWx1ZSIgVmFsdWU9IjIiIC8+DQog"
"ICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iUGVyY2VudE9mRVVSYW5nZSIgVmFsdWU9IjMi"
"IC8+DQogICAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iVW5rbm93biIgVmFsdWU9IjQiIC8+"
"DQogIDwvb3BjOkVudW1lcmF0ZWRUeXBlPg0KDQo8L29wYzpUeXBlRGljdGlvbmFyeT4="";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasProperty;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7619");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7650");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7656");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8914");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7665");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7662");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7668");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7782");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7698");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7671");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7674");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7677");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7680");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7683");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7728");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7731");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7734");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7737");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7686");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7689");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7695");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7929");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7932");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7935");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7938");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7941");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7944");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7947");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8004");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8067");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8073");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8076");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8172");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7749");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7752");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7755");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7692");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8208");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11959");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=11962");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8211");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8214");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8217");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8220");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8223");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8226");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=7659");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8229");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8232");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8235");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8238");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8241");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12183");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12186");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12091");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=12094");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8247");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceId::HasComponent;
        ref.SourceNodeId = ToNodeId("i=7617");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeId = ToNodeId("i=8244");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7619");
        node.BrowseName = ToQualifiedName("NamespaceUri");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasProperty;
        node.TypeDefinition = ToNodeId("i=68");
        VariableAttributes attrs;
        attrs.Description = LocalizedText("A URI that uniquely identifies the dictionary.");
        attrs.DisplayName = LocalizedText("NamespaceUri");
        attrs.Type = ObjectId::String;
        attrs.Value = +""http://opcfoundation.org/UA/"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7650");
        node.BrowseName = ToQualifiedName("Argument");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Argument");
        attrs.Type = ObjectId::String;
        attrs.Value = +""Argument"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7656");
        node.BrowseName = ToQualifiedName("EnumValueType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EnumValueType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""EnumValueType"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8914");
        node.BrowseName = ToQualifiedName("TimeZoneDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TimeZoneDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""TimeZoneDataType"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7665");
        node.BrowseName = ToQualifiedName("ApplicationDescription");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ApplicationDescription");
        attrs.Type = ObjectId::String;
        attrs.Value = +""ApplicationDescription"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7662");
        node.BrowseName = ToQualifiedName("UserTokenPolicy");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UserTokenPolicy");
        attrs.Type = ObjectId::String;
        attrs.Value = +""UserTokenPolicy"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7668");
        node.BrowseName = ToQualifiedName("EndpointDescription");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointDescription");
        attrs.Type = ObjectId::String;
        attrs.Value = +""EndpointDescription"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7782");
        node.BrowseName = ToQualifiedName("RegisteredServer");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RegisteredServer");
        attrs.Type = ObjectId::String;
        attrs.Value = +""RegisteredServer"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7698");
        node.BrowseName = ToQualifiedName("SignedSoftwareCertificate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SignedSoftwareCertificate");
        attrs.Type = ObjectId::String;
        attrs.Value = +""SignedSoftwareCertificate"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7671");
        node.BrowseName = ToQualifiedName("UserIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UserIdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +""UserIdentityToken"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7674");
        node.BrowseName = ToQualifiedName("AnonymousIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AnonymousIdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +""AnonymousIdentityToken"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7677");
        node.BrowseName = ToQualifiedName("UserNameIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UserNameIdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +""UserNameIdentityToken"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7680");
        node.BrowseName = ToQualifiedName("X509IdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("X509IdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +""X509IdentityToken"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7683");
        node.BrowseName = ToQualifiedName("IssuedIdentityToken");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("IssuedIdentityToken");
        attrs.Type = ObjectId::String;
        attrs.Value = +""IssuedIdentityToken"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7728");
        node.BrowseName = ToQualifiedName("AddNodesItem");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddNodesItem");
        attrs.Type = ObjectId::String;
        attrs.Value = +""AddNodesItem"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7731");
        node.BrowseName = ToQualifiedName("AddReferencesItem");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AddReferencesItem");
        attrs.Type = ObjectId::String;
        attrs.Value = +""AddReferencesItem"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7734");
        node.BrowseName = ToQualifiedName("DeleteNodesItem");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteNodesItem");
        attrs.Type = ObjectId::String;
        attrs.Value = +""DeleteNodesItem"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7737");
        node.BrowseName = ToQualifiedName("DeleteReferencesItem");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DeleteReferencesItem");
        attrs.Type = ObjectId::String;
        attrs.Value = +""DeleteReferencesItem"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7686");
        node.BrowseName = ToQualifiedName("EndpointConfiguration");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointConfiguration");
        attrs.Type = ObjectId::String;
        attrs.Value = +""EndpointConfiguration"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7689");
        node.BrowseName = ToQualifiedName("SupportedProfile");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SupportedProfile");
        attrs.Type = ObjectId::String;
        attrs.Value = +""SupportedProfile"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7695");
        node.BrowseName = ToQualifiedName("SoftwareCertificate");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SoftwareCertificate");
        attrs.Type = ObjectId::String;
        attrs.Value = +""SoftwareCertificate"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7929");
        node.BrowseName = ToQualifiedName("ContentFilterElement");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ContentFilterElement");
        attrs.Type = ObjectId::String;
        attrs.Value = +""ContentFilterElement"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7932");
        node.BrowseName = ToQualifiedName("ContentFilter");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ContentFilter");
        attrs.Type = ObjectId::String;
        attrs.Value = +""ContentFilter"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7935");
        node.BrowseName = ToQualifiedName("FilterOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("FilterOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +""FilterOperand"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7938");
        node.BrowseName = ToQualifiedName("ElementOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ElementOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +""ElementOperand"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7941");
        node.BrowseName = ToQualifiedName("LiteralOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("LiteralOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +""LiteralOperand"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7944");
        node.BrowseName = ToQualifiedName("AttributeOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AttributeOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +""AttributeOperand"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7947");
        node.BrowseName = ToQualifiedName("SimpleAttributeOperand");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SimpleAttributeOperand");
        attrs.Type = ObjectId::String;
        attrs.Value = +""SimpleAttributeOperand"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8004");
        node.BrowseName = ToQualifiedName("HistoryEvent");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryEvent");
        attrs.Type = ObjectId::String;
        attrs.Value = +""HistoryEvent"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8067");
        node.BrowseName = ToQualifiedName("MonitoringFilter");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("MonitoringFilter");
        attrs.Type = ObjectId::String;
        attrs.Value = +""MonitoringFilter"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8073");
        node.BrowseName = ToQualifiedName("EventFilter");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EventFilter");
        attrs.Type = ObjectId::String;
        attrs.Value = +""EventFilter"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8076");
        node.BrowseName = ToQualifiedName("AggregateConfiguration");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AggregateConfiguration");
        attrs.Type = ObjectId::String;
        attrs.Value = +""AggregateConfiguration"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8172");
        node.BrowseName = ToQualifiedName("HistoryEventFieldList");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("HistoryEventFieldList");
        attrs.Type = ObjectId::String;
        attrs.Value = +""HistoryEventFieldList"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7749");
        node.BrowseName = ToQualifiedName("ScalarTestType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ScalarTestType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""ScalarTestType"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7752");
        node.BrowseName = ToQualifiedName("ArrayTestType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ArrayTestType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""ArrayTestType"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7755");
        node.BrowseName = ToQualifiedName("CompositeTestType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("CompositeTestType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""CompositeTestType"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7692");
        node.BrowseName = ToQualifiedName("BuildInfo");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("BuildInfo");
        attrs.Type = ObjectId::String;
        attrs.Value = +""BuildInfo"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8208");
        node.BrowseName = ToQualifiedName("RedundantServerDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("RedundantServerDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""RedundantServerDataType"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11959");
        node.BrowseName = ToQualifiedName("EndpointUrlListDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EndpointUrlListDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""EndpointUrlListDataType"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=11962");
        node.BrowseName = ToQualifiedName("NetworkGroupDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("NetworkGroupDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""NetworkGroupDataType"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8211");
        node.BrowseName = ToQualifiedName("SamplingIntervalDiagnosticsDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SamplingIntervalDiagnosticsDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""SamplingIntervalDiagnosticsDataType"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8214");
        node.BrowseName = ToQualifiedName("ServerDiagnosticsSummaryDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerDiagnosticsSummaryDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""ServerDiagnosticsSummaryDataType"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8217");
        node.BrowseName = ToQualifiedName("ServerStatusDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServerStatusDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""ServerStatusDataType"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8220");
        node.BrowseName = ToQualifiedName("SessionDiagnosticsDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionDiagnosticsDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""SessionDiagnosticsDataType"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8223");
        node.BrowseName = ToQualifiedName("SessionSecurityDiagnosticsDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SessionSecurityDiagnosticsDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""SessionSecurityDiagnosticsDataType"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8226");
        node.BrowseName = ToQualifiedName("ServiceCounterDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ServiceCounterDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""ServiceCounterDataType"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=7659");
        node.BrowseName = ToQualifiedName("StatusResult");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("StatusResult");
        attrs.Type = ObjectId::String;
        attrs.Value = +""StatusResult"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8229");
        node.BrowseName = ToQualifiedName("SubscriptionDiagnosticsDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SubscriptionDiagnosticsDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""SubscriptionDiagnosticsDataType"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8232");
        node.BrowseName = ToQualifiedName("ModelChangeStructureDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ModelChangeStructureDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""ModelChangeStructureDataType"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8235");
        node.BrowseName = ToQualifiedName("SemanticChangeStructureDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("SemanticChangeStructureDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""SemanticChangeStructureDataType"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8238");
        node.BrowseName = ToQualifiedName("Range");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Range");
        attrs.Type = ObjectId::String;
        attrs.Value = +""Range"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8241");
        node.BrowseName = ToQualifiedName("EUInformation");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("EUInformation");
        attrs.Type = ObjectId::String;
        attrs.Value = +""EUInformation"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12183");
        node.BrowseName = ToQualifiedName("ComplexNumberType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ComplexNumberType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""ComplexNumberType"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12186");
        node.BrowseName = ToQualifiedName("DoubleComplexNumberType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("DoubleComplexNumberType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""DoubleComplexNumberType"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12091");
        node.BrowseName = ToQualifiedName("AxisInformation");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("AxisInformation");
        attrs.Type = ObjectId::String;
        attrs.Value = +""AxisInformation"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=12094");
        node.BrowseName = ToQualifiedName("XVType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("XVType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""XVType"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8247");
        node.BrowseName = ToQualifiedName("ProgramDiagnosticDataType");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("ProgramDiagnosticDataType");
        attrs.Type = ObjectId::String;
        attrs.Value = +""ProgramDiagnosticDataType"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeId = ToNodeId("i=8244");
        node.BrowseName = ToQualifiedName("Annotation");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeId("i=7617");
        node.ReferenceTypeId = ReferenceId::HasComponent;
        node.TypeDefinition = ToNodeId("i=69");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("Annotation");
        attrs.Type = ObjectId::String;
        attrs.Value = +""Annotation"";
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }

   }

} // namespace
    
