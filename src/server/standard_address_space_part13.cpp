
// DO NOT EDIT THIS FILE!
// It is automatically generated from opcfoundation.org schemas.
//

#include "standard_address_space_parts.h"
#include <opc/ua/protocol/string_utils.h>
#include <opc/common/addons_core/addon.h>
#include <opc/ua/protocol/node_classes.h>
#include <opc/ua/protocol/strings.h>
#include <opc/ua/protocol/variable_access_level.h>
#include <opc/ua/services/node_management.h>

#include <algorithm>
#include <iostream>
#include <map>

namespace OpcUa
{
  void CreateAddressSpacePart13(OpcUa::NodeManagementServices& registry)
  {
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=11187");
        node.BrowseName = ToQualifiedName("AggregateConfigurationType");
        node.Class = NodeClass::ObjectType;
        node.ParentNodeId = ToNodeID("i=58");
        node.ReferenceTypeId = ReferenceID::HasSubtype;
        ObjectAttributes attrs;
        attrs.DisplayName = LocalizedText("AggregateConfigurationType");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasProperty;
        ref.SourceNodeID = ToNodeID("i=11187");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeID = ToNodeID("i=11188");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasProperty;
        ref.SourceNodeID = ToNodeID("i=11187");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeID = ToNodeID("i=11189");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasProperty;
        ref.SourceNodeID = ToNodeID("i=11187");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeID = ToNodeID("i=11190");
        refs.push_back(ref);
        }
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasProperty;
        ref.SourceNodeID = ToNodeID("i=11187");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeID = ToNodeID("i=11191");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=11188");
        node.BrowseName = ToQualifiedName("TreatUncertainAsBad");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeID("i=11187");
        node.ReferenceTypeId = ReferenceID::HasProperty;
        node.TypeDefinition = ToNodeID("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("TreatUncertainAsBad");
        attrs.Type = ObjectID::Boolean;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasModellingRule;
        ref.SourceNodeID = ToNodeID("i=11188");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeID = ToNodeID("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=11189");
        node.BrowseName = ToQualifiedName("PercentDataBad");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeID("i=11187");
        node.ReferenceTypeId = ReferenceID::HasProperty;
        node.TypeDefinition = ToNodeID("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PercentDataBad");
        attrs.Type = ObjectID::Byte;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasModellingRule;
        ref.SourceNodeID = ToNodeID("i=11189");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeID = ToNodeID("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=11190");
        node.BrowseName = ToQualifiedName("PercentDataGood");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeID("i=11187");
        node.ReferenceTypeId = ReferenceID::HasProperty;
        node.TypeDefinition = ToNodeID("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("PercentDataGood");
        attrs.Type = ObjectID::Byte;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasModellingRule;
        ref.SourceNodeID = ToNodeID("i=11190");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeID = ToNodeID("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=11191");
        node.BrowseName = ToQualifiedName("UseSlopedExtrapolation");
        node.Class = NodeClass::Variable;
        node.ParentNodeId = ToNodeID("i=11187");
        node.ReferenceTypeId = ReferenceID::HasProperty;
        node.TypeDefinition = ToNodeID("i=68");
        VariableAttributes attrs;
        attrs.DisplayName = LocalizedText("UseSlopedExtrapolation");
        attrs.Type = ObjectID::Boolean;
        attrs.Rank = -1;
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        std::vector<AddReferencesItem> refs;
        {
        AddReferencesItem ref;
        ref.IsForward = true;
        ref.ReferenceTypeId = ReferenceID::HasModellingRule;
        ref.SourceNodeID = ToNodeID("i=11191");
        ref.TargetNodeClass = NodeClass::DataType;
        ref.TargetNodeID = ToNodeID("i=78");
        refs.push_back(ref);
        }
        registry.AddReferences(refs);
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=2341");
        node.BrowseName = ToQualifiedName("Interpolative");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("At the beginning of each interval, retrieve the calculated value from the data points on either side of the requested timestamp.");
        attrs.DisplayName = LocalizedText("Interpolative");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=2342");
        node.BrowseName = ToQualifiedName("Average");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the average value of the data over the interval.");
        attrs.DisplayName = LocalizedText("Average");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=2343");
        node.BrowseName = ToQualifiedName("TimeAverage");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the time weighted average data over the interval using Interpolated Bounding Values.");
        attrs.DisplayName = LocalizedText("TimeAverage");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=11285");
        node.BrowseName = ToQualifiedName("TimeAverage2");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the time weighted average data over the interval using Simple Bounding Values.");
        attrs.DisplayName = LocalizedText("TimeAverage2");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=2344");
        node.BrowseName = ToQualifiedName("Total");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the total (time integral) of the data over the interval using Interpolated Bounding Values.");
        attrs.DisplayName = LocalizedText("Total");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=11304");
        node.BrowseName = ToQualifiedName("Total2");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the total (time integral) of the data over the interval using Simple Bounding Values.");
        attrs.DisplayName = LocalizedText("Total2");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=2346");
        node.BrowseName = ToQualifiedName("Minimum");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the minimum raw value in the interval with the timestamp of the start of the interval.");
        attrs.DisplayName = LocalizedText("Minimum");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=2347");
        node.BrowseName = ToQualifiedName("Maximum");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the maximum raw value in the interval with the timestamp of the start of the interval.");
        attrs.DisplayName = LocalizedText("Maximum");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=2348");
        node.BrowseName = ToQualifiedName("MinimumActualTime");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the minimum value in the interval and the Timestamp of the minimum value.");
        attrs.DisplayName = LocalizedText("MinimumActualTime");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=2349");
        node.BrowseName = ToQualifiedName("MaximumActualTime");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the maximum value in the interval and the Timestamp of the maximum value.");
        attrs.DisplayName = LocalizedText("MaximumActualTime");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=2350");
        node.BrowseName = ToQualifiedName("Range");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the difference between the minimum and maximum Value over the interval.");
        attrs.DisplayName = LocalizedText("Range");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=11286");
        node.BrowseName = ToQualifiedName("Minimum2");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the minimum value in the interval including the Simple Bounding Values.");
        attrs.DisplayName = LocalizedText("Minimum2");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=11287");
        node.BrowseName = ToQualifiedName("Maximum2");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the maximum value in the interval including the Simple Bounding Values.");
        attrs.DisplayName = LocalizedText("Maximum2");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=11305");
        node.BrowseName = ToQualifiedName("MinimumActualTime2");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the minimum value with the actual timestamp including the Simple Bounding Values.");
        attrs.DisplayName = LocalizedText("MinimumActualTime2");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=11306");
        node.BrowseName = ToQualifiedName("MaximumActualTime2");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the maximum value with the actual timestamp including the Simple Bounding Values.");
        attrs.DisplayName = LocalizedText("MaximumActualTime2");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=11288");
        node.BrowseName = ToQualifiedName("Range2");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the difference between the Minimum2 and Maximum2 value over the interval.");
        attrs.DisplayName = LocalizedText("Range2");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=2351");
        node.BrowseName = ToQualifiedName("AnnotationCount");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the number of Annotations in the interval.");
        attrs.DisplayName = LocalizedText("AnnotationCount");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=2352");
        node.BrowseName = ToQualifiedName("Count");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the number of raw values over the interval.");
        attrs.DisplayName = LocalizedText("Count");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=11307");
        node.BrowseName = ToQualifiedName("DurationInStateZero");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the time a Boolean or numeric was in a zero state using Simple Bounding Values.");
        attrs.DisplayName = LocalizedText("DurationInStateZero");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=11308");
        node.BrowseName = ToQualifiedName("DurationInStateNonZero");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the time a Boolean or numeric was in a non-zero state using Simple Bounding Values.");
        attrs.DisplayName = LocalizedText("DurationInStateNonZero");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=2355");
        node.BrowseName = ToQualifiedName("NumberOfTransitions");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the number of changes between zero and non-zero that a Boolean or Numeric value experienced in the interval.");
        attrs.DisplayName = LocalizedText("NumberOfTransitions");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=2357");
        node.BrowseName = ToQualifiedName("Start");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the value at the beginning of the interval using Interpolated Bounding Values.");
        attrs.DisplayName = LocalizedText("Start");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=2358");
        node.BrowseName = ToQualifiedName("End");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the value at the end of the interval using Interpolated Bounding Values.");
        attrs.DisplayName = LocalizedText("End");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=2359");
        node.BrowseName = ToQualifiedName("Delta");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the difference between the Start and End value in the interval.");
        attrs.DisplayName = LocalizedText("Delta");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=11505");
        node.BrowseName = ToQualifiedName("StartBound");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the value at the beginning of the interval using Simple Bounding Values.");
        attrs.DisplayName = LocalizedText("StartBound");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=11506");
        node.BrowseName = ToQualifiedName("EndBound");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the value at the end of the interval using Simple Bounding Values.");
        attrs.DisplayName = LocalizedText("EndBound");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=11507");
        node.BrowseName = ToQualifiedName("DeltaBounds");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the difference between the StartBound and EndBound value in the interval.");
        attrs.DisplayName = LocalizedText("DeltaBounds");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=2360");
        node.BrowseName = ToQualifiedName("DurationGood");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the total duration of time in the interval during which the data is good.");
        attrs.DisplayName = LocalizedText("DurationGood");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=2361");
        node.BrowseName = ToQualifiedName("DurationBad");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the total duration of time in the interval during which the data is bad.");
        attrs.DisplayName = LocalizedText("DurationBad");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=2362");
        node.BrowseName = ToQualifiedName("PercentGood");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the percent of data (0 to 100) in the interval which has a good StatusCode.");
        attrs.DisplayName = LocalizedText("PercentGood");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=2363");
        node.BrowseName = ToQualifiedName("PercentBad");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the percent of data (0 to 100) in the interval which has a bad StatusCode.");
        attrs.DisplayName = LocalizedText("PercentBad");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=2364");
        node.BrowseName = ToQualifiedName("WorstQuality");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the worst StatusCode of data in the interval.");
        attrs.DisplayName = LocalizedText("WorstQuality");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=11292");
        node.BrowseName = ToQualifiedName("WorstQuality2");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the worst StatusCode of data in the interval including the Simple Bounding Values.");
        attrs.DisplayName = LocalizedText("WorstQuality2");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=11426");
        node.BrowseName = ToQualifiedName("StandardDeviationSample");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the standard deviation for the interval for a sample of the population (n-1).");
        attrs.DisplayName = LocalizedText("StandardDeviationSample");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=11427");
        node.BrowseName = ToQualifiedName("StandardDeviationPopulation");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the standard deviation for the interval for a complete population (n) which includes Simple Bounding Values.");
        attrs.DisplayName = LocalizedText("StandardDeviationPopulation");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=11428");
        node.BrowseName = ToQualifiedName("VarianceSample");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the variance for the interval as calculated by the StandardDeviationSample.");
        attrs.DisplayName = LocalizedText("VarianceSample");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }
       
        {
        AddNodesItem node;
        node.RequestedNewNodeID = ToNodeID("i=11429");
        node.BrowseName = ToQualifiedName("VariancePopulation");
        node.Class = NodeClass::Object;
        node.TypeDefinition = ToNodeID("i=2340");
        ObjectAttributes attrs;
        attrs.Description = LocalizedText("Retrieve the variance for the interval as calculated by the StandardDeviationPopulation which includes Simple Bounding Values.");
        attrs.DisplayName = LocalizedText("VariancePopulation");
        node.Attributes = attrs;
        registry.AddNodes(std::vector<AddNodesItem>{node});
        }

   }

} // namespace
    
